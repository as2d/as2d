{"version":3,"sources":["~lib/rt/common.ts","~lib/shared/typeinfo.ts","~lib/rt/pure.ts","~lib/rt/tlsf.ts","~lib/gc.ts","src/shared/CanvasInstruction.ts","src/shared/CanvasDirection.ts","src/shared/CanvasPatternRepetition.ts","src/shared/GlobalCompositeOperation.ts","src/shared/ImageSmoothingQuality.ts","src/shared/LineCap.ts","src/shared/LineJoin.ts","src/shared/TextAlign.ts","src/shared/TextBaseline.ts","src/shared/FillRule.ts","assembly/internal/FillStrokeStyleType.ts","assembly/renderer/CanvasRenderingContext2D.ts","~lib/arraybuffer.ts","~lib/util/error.ts","~lib/memory.ts","~lib/util/memory.ts","~lib/util/number.ts","~lib/util/string.ts","~lib/typedarray.ts","~lib/map.ts","~lib/util/hash.ts","assembly/internal/getContext.ts","assembly/internal/Buffer.ts","assembly/internal/StackPointer.ts","assembly/internal/util.ts","~lib/string.ts","assembly/renderer/Image.ts","assembly/Buffer.test.ts"],"names":[],"mappings":"kZGoRE,AAAkB,AADF,OACc,mBAE9B,AAAkB,AADP,EAAY,KACG,KAAiB,EAAO,2BAalD,AAAkB,AATlB,AAAI,EAAO,MAET,AAAK,AAAM,EAAQ,KADd,GAKL,AAAK,AAAO,EAAS,AADhB,EAAM,AAAW,MACI,IAAa,KACvC,EAAM,MAEe,KAAW,EAAK,uBAIvC,AAAW,OACX,AAAI,AAFO,SAED,EAAY,MACtB,AAAI,IAAM,EAAY,MAGtB,AAAI,EAAS,AApIX,EAA2B,AAAC,AAAkB,EAAjB,EAAM,IAAyB,UAqI5D,AA5HA,EAA2B,AAAC,AAAkB,EAAjB,EAAM,IAAyB,IAC5D,KA8HA,AAAI,AAAC,KAEH,AApJF,EAA2B,EAAM,IACjC,AAXF,AACE,EAA2B,EAAM,OA6JN,AAAE,EAAK,YAGhC,AAAI,AAAC,KAAO,OAAc,AAAE,EAAK,mBAzGrC,AAAkB,kBAElB,AAAkB,AADF,OACc,mBAM9B,AAAI,AAHY,AADJ,qBAII,KAEd,AAAI,AADU,AAAC,EAAY,GAAc,GAAkB,EAAY,MACzD,SACZ,AAAY,EAAM,IAClB,EAAe,AAAY,AAA0B,EAAzB,EAAY,SAE5B,AADJ,AArHa,EAA2B,GAAkB,KAAe,aA4HrF,AAAI,EAAY,KAGd,AAAkB,AADH,AADJ,AAnIM,EAA2B,aAqIf,mBAE7B,AAAI,AADU,AAAC,EAAW,GAAc,GAAkB,EAAY,MACxD,WACZ,AAAY,EAAM,IAClB,EAAc,AAAY,AAAyB,EAAxB,EAAW,SAC9B,OAKZ,EAAe,EAAY,MAK3B,AAAkB,AADP,EAAY,KACG,KAAiB,EAAO,2BAClD,AAAkB,AAA4C,EAA5C,EAA2B,IAAyB,kBAGtE,AAAa,EAA2B,GAAiB,KAazD,AAAkB,AATlB,AAAI,EAAO,MAET,AAAK,AAAM,EAAQ,KADd,GAKL,AAAK,AAAO,EAAS,AADhB,EAAM,AAAW,MACI,IAAa,KACvC,EAAM,MAEe,KAAW,EAAK,uBA5FvC,AACE,EAA2B,AAAC,AAAkB,EAAjB,EAAM,IAAyB,SA+F9D,EAAa,KACb,EAFW,KAGX,AAAI,IAAM,EAAY,MACtB,AAzFE,EAA2B,AAAC,AAAkB,EAAjB,EAAM,IAAyB,IAC5D,KA2FF,OAAe,EAAK,OACpB,AAhHE,EAA2B,EAAM,IACjC,AA+Gc,AAzHd,EAA2B,EAAM,OAyHA,EAAK,aAkHxC,AAII,AAAE,EAAM,MADR,AAAE,EAAQ,MADV,EAAS,qBAQb,AAAI,AAFO,AA7MT,UAgNA,AAAkB,EAAS,EAA0B,mBAGrD,AAAI,AAA0B,EAA1B,EAAQ,MAEV,AAAW,OADX,EAAS,OAON,AACE,EAAS,EAA0B,qBAK5C,AAAI,AADO,EAAM,YAQjB,EAAc,AAAmB,EAAW,GAA9B,AAFC,EAAQ,GAEE,OACzB,EAAY,KACZ,EAAY,KAIZ,AADO,AAAkB,EAAQ,GAAO,KAC1B,KACd,AAtOE,EACA,MAuOF,AAAY,EAAM,UAmClB,AAAI,AAAC,AADM,OAKT,AAAI,AADc,EACA,AAFA,OAEe,AAAY,EAAc,KAAe,SAAG,EAE7E,AADO,KACM,KACb,GAAc,OACU,EAAK,KAC3B,SAAgB,KACX,AAAc,MAAG,EAAK,KACzB,eAAsB,KADY,AAAE,WAFF,AAAE,WAM9B,GAAM,GAA+C,EAAiB,KAChF,AAAO,WAtBT,AAAI,EAAQ,SAA+B,cACzB,AAAC,EAAO,GAAW,mBAxHrC,AAAkB,AAdlB,AAAI,EAAO,MAET,AAAK,AAAM,EAAQ,KADd,GAMa,EAAO,SACrB,EAAQ,EAAM,EAAW,AAAW,MAAU,MAGlD,AAAK,AAAO,EAAgB,AADvB,EAAM,AAHO,MAIe,IAAa,KAC9C,EAAM,MAEe,KAAW,EAAK,uBAKvC,AAAK,AAFO,WAAmB,EAAM,QAc5B,AA1LP,EAA2B,AAAC,AAAkB,AA0LZ,GA1LL,EAAM,IAAyB,QAiL5D,AAAK,AADO,KAAc,EAAO,EAAK,SAMpC,AAAkB,AADV,AAxMV,EAA2B,AAuMpB,AAAW,KAvMe,yBA0MxB,EAAkB,AAAS,iBAL3B,SAqGX,AAAI,AAAY,AAJhB,AAAkB,IAElB,AAAkB,AAAO,AAAC,AAR1B,AAAI,EAAO,SAET,EAAQ,AAAC,EAAM,EAAW,AAAW,KAAU,QAKzC,EAAkB,AAAqD,AAjQ7E,MAiQ8B,AAAC,EAAsB,GAAM,MAC5B,KAAU,KAAa,aAEzB,KAC7B,AAAI,AAAY,IAAe,KAAG,GAG1B,EAAM,EAAsB,GAAI,EAAqB,WAxF/D,AAAgB,OAChB,AAAoB,EAAO,kBAI3B,AAAI,AADY,AAAC,EAAY,GAAc,UAEzC,EAAe,EAAQ,EAAY,OAGnC,AADY,AAA8D,EAA5C,EAA2B,MAC1C,AAAC,EAAY,GAAkB,MAC9C,AAAY,EAAM,KAIlB,EAAe,EAAY,MAC3B,AAtRuB,EAA2B,GAAkB,KAAe,IAsRnF,iBAA0B,aA+G5B,AAAmB,iBAGnB,AAAI,AAAC,AADO,AAAY,EAAM,AADZ,AAAY,aAI1B,AAAyB,IAEzB,AAAyB,IAEzB,AAAI,AAAC,AADG,AAAY,EAAM,SAExB,AAAW,EAAM,IAEjB,AAAkB,AADV,AAA8B,EAAM,wBASlD,AAAkB,AAAC,QAA8B,kBACjD,EAAe,KACf,EAAa,KACb,EAAe,KACf,AAAY,EAAM,IAClB,AAAa,EAAM,EAAc,SAkEjC,AAAO,AACS,EAAmB,EAAM,IACrC,QD1dJ,AAAO,AAAC,AADG,cACwB,AAAC,EAAO,2BAC3C,EAAW,EAAO,MAElB,AAAoB,KAAW,sBA+J/B,AAAI,EAAM,MAAa,AAAU,AAAkB,EAAM,WAOzD,AAAI,EAAM,MAAa,AAAU,AAAkB,EAAM,ciBjQvD,ECsLA,AAAI,ADtLW,KCuLf,AAAU,EAAM,KAChB,AAAU,EAAO,GAAI,GAAG,KACxB,AAAI,EAAK,KAET,AAAU,EAAO,GAAG,KACpB,AAAU,EAAO,GAAG,KACpB,AAAU,EAAO,KAAI,GAAG,KACxB,AAAU,EAAW,GAAG,KACxB,AAAI,EAAK,KACT,AAAU,EAAO,GAAG,KACpB,AAAU,EAAO,GAAI,GAAG,KACxB,AAAI,EAAK,KAKT,EAAK,AAFU,EAAC,GAAO,QAQvB,AAAW,AAPX,EAAQ,KAOS,AAHF,AAAgB,MAAhB,WAIf,AAAW,EAAO,AANlB,EAAK,MAMiB,GAAG,KACzB,AAAI,EAAK,KACT,AAAW,EAAO,GAAG,KACrB,AAAW,EAAO,GAAG,KACrB,AAAW,EAAO,KAAI,GAAI,KAC1B,AAAW,EAAW,GAAG,KACzB,AAAI,EAAK,KACT,AAAW,EAAO,GAAI,KACtB,AAAW,EAAO,GAAI,KACtB,AAAW,EAAO,GAAI,KACtB,AAAW,EAAO,GAAI,KACtB,AAAW,EAAO,KAAI,GAAI,KAC1B,AAAW,EAAW,GAAI,KAC1B,AAAW,EAAW,GAAI,KAC1B,AAAW,EAAW,GAAI,KAI1B,EAAQ,AADJ,AAAM,EAAO,GAAb,QAEJ,EAAK,KAGL,AAAe,KAAY,EAAY,QACvC,AAAO,EAAK,KACV,AAAW,EAAM,KACjB,AAAW,EAAO,GAAG,KACrB,AAAW,EAAO,GAAI,KACtB,AAAW,EAAO,GAAI,KACtB,EAAK,KACL,EAAQ,eHvOV,AAAY,AADC,AAAQ,EAA8B,MAC/B,EAAG,yCACT,2BAAd,OACA,EAAiB,KACjB,EAAkB,YA0BlB,AAAI,EAAc,SAAyC,cAE3D,AAAY,AADC,AAAQ,EAAe,MAChB,EAAG,IAChB,SO2BQ,AAAgB,aAA/B,OACA,EAAmB,KAEJ,AAAgB,aAA/B,OACA,EAAuB,KACvB,EAAqB,KACrB,EAAoB,4DAXpB,2BG9C+B,AAAgB,WAKd,AAAgB,WAKlB,OAKV,YCtCrB,AAAY,AADF,AAAQ,IAAQ,MACT,EAAG,YZiEtB,AADY,EACF,YACV,EAAU,YACV,EAAkB,KAClB,EAAsB,KACtB,QAEA,QAEA,QAEA,EAAoB,YACpB,EAAiC,KACjC,EAA8B,KAC9B,EAA8B,KAC9B,EAAgB,KAChB,EAAiB,KACjB,EAAiB,MACjB,EAAkB,aAClB,EAAmB,aACnB,EAAmB,aACnB,EAAoB,OACpB,cAhCA,cACA,iBACA,iBACA,iBACA,iBACA,Aa7BS,EAAW,GAAwB,mBD9B1C,AAAY,AADF,AAAQ,IAAQ,MACT,EAAG,MZiGtB,EAAwB,KACxB,EAAkB,KAClB,EAA4B,KAC5B,EAAuB,YACvB,EAAuB,wUAiBL,OAMS,OAwCiB,AAAuB,SAQ1B,AAA+C,AAAQ,EAAmB,aAiGtE,OAiCQ,OAMb,QA0IP,QAsCF,QAqCI,cAmCkC,OAmCvB,OAmCiB,OAsC5B,OAiCM,SA4DH,cAkCD,OAqCJ,cAkCC,cAmCA,cAuCI,SAsCD,eAsCA,eAuCkB,QAMb,SA0HH,QAoCM,QA2KA,AY51CR,EAA0B,uDZi2Cb,AY51Cb,AZ41Ca,MY51Ca,UZk2C7D,AAAwC,AAAkB,MAAmB,WAK3B,iBSj0CpD,AAAQ,QACR,IACoC,AK/BlC,AAAO,AAAkB,EAA0B,MAA0B,GL+B7B,OAAG,EAAI,KACrD,AAAI,AAAC,EAAI,AAAc,EAAyB,OAAM,QADE,AAAE,oBHc9D,AACM,EAAO,KAAK,AAAE,AAAC,EAAO,GAAM,EAAO,aACrC,AACM,AAAU,KAAS,AAAU,QACjC,EAAQ,KACR,EAAQ,KAED,AADP,EAAQ,KACM,UAGb,aAGL,AAAI,AAFI,AAAe,OAEd,AADD,AAAe,UACJ,EAAI,KACvB,EAAQ,KACR,EAAQ,gBQRR,AAAI,WACJ,AAAqB,KAAjB,SAEJ,AAAI,AAvDJ,AAAO,AAAkB,EAA0B,MAA0B,KAA7E,AAAO,AAAkB,EAA0B,MAA0B,UAyDrE,AAAY,EAAS,EAAU,QNDvC,AAAY,AACV,AAAkB,KAAgB,AAAQ,EAAW,MAAoB,WAE3E,IACE,AAAM,KAAmB,QAAU,KAAa,WAChD,AAAQ,AAA0B,KAAmB,iBA4EvD,AAAiB,AAAgB,AADR,AAAM,EAAiB,KACM,OAEtD,AAAiB,AAAgB,AADR,EAAqB,GAAgB,KACR,OAItD,AAAa,AADA,AAAkB,OACT,AAAO,KAAqB,MAClD,AAAa,MACb,AAAO,EAAU,KAEf,AAAI,AAAE,KAAsB,MAE1B,EAAe,QACf,EAAiB,QAGjB,EAAsB,AAAY,AADX,EAAgC,ACzLpD,ADwL0B,OAAgB,GACkC,YAE/E,AAAa,EAAkB,KAC/B,EAAU,MAEZ,EAAU,SAGG,yBAAf,OACA,EAAmB,KACJ,yBAAf,OACA,EAAuB,KACvB,EAAqB,sBArFrB,AAAe,QAEf,AAAI,AADQ,EAAU,EAAK,QAIvB,AAAI,EAA4B,AADnB,AAAkB,UAE7B,EAAc,AAAuB,OACrC,AAAU,MAOd,AAAI,KAAsB,QACxB,EACE,KAAoB,KAAuB,GAAgB,MACtD,MACD,AAAC,KAAoB,GAAK,OAIlC,AAAc,OACiD,eAE/D,AAFQ,AAA0B,EAA6B,EAAuB,MAE1E,AACe,OAE3B,EAAc,AACa,OAE3B,AAAE,aAGF,EAAmB,AAAY,AADX,AAAkB,KAAgB,AAAQ,EAAW,MAAoB,YAE7F,AAAa,EAAe,MAEvB,SE1IT,AAAW,AADE,IAC0B,GAA0C,KACjF,EAAQ,EAAM,aK8Bd,AAAW,EAAyB,GAA2B,KAC/D,AAAW,EAAyB,GAA4B,KAChE,AAAY,EAAyB,GAA4B,QZd/C,gBAOA,qBCrClB,AAAa,EAAM,KAAZ,KACK,SAAiB,SAA3B,AAAU,EAAQ,AAAS,QAC3B,WAIF,AAAI,AAAC,EAAO,QACV,AAAO,EAAK,KACV,AAAW,EAAW,AAAU,QAChC,AAAW,EAAQ,GAAG,AAAU,EAAO,SACvC,AAAW,EAAQ,GAAG,AAAU,EAAO,SACvC,AAAW,EAAO,GAAI,AAAU,EAAM,SACtC,EAAO,KAAI,EAAQ,KAAI,EAAK,SAE9B,AAAI,EAAI,KACN,AAAW,EAAU,AAAU,QAC/B,AAAW,EAAO,GAAG,AAAU,EAAM,SAC1B,EAAO,KAAlB,EAAQ,MAEV,AAAI,EAAI,KACN,AAAW,EAAM,AAAU,QAChB,EAAO,KAAlB,EAAQ,MAEV,AAAI,EAAI,KACN,AAAW,EAAM,AAAU,QAChB,EAAO,KAAlB,EAAQ,MAEV,AAAI,EAAI,KACN,AAAU,EAAQ,AAAS,WAO/B,AAAI,EAAK,KACP,MAAQ,EAAO,KAER,OAmBA,OAkBA,QApCH,AAAI,AAAU,OACd,AAAU,EAAQ,AAAS,QAC3B,AAAU,OAAQ,AAAS,qCAC3B,AAAU,EAAQ,AAAS,QAC3B,EAAK,OACL,AAAO,EAAK,KAEV,AAAW,EAAM,AAAU,AADvB,AAAU,EAAM,QACY,GAAf,EAAK,OAEtB,AAAW,EAAO,GAAG,EAAK,GAAK,AAD3B,AAAU,EAAM,QACgB,OAEpC,AAAW,EAAO,GAAG,EAAK,GAAK,AAD3B,AAAU,EAAM,QACgB,OAEpC,AAAW,EAAO,GAAI,AAAU,AAD5B,AAAU,EAAM,QACiB,GAAf,EAAK,OAC3B,EAAO,KAAI,EAAQ,KAAI,EAAK,YAK9B,AAAI,AAAU,OACd,AAAU,EAAQ,AAAS,gCAC3B,AAAU,EAAQ,AAAS,QAC3B,EAAK,OACL,AAAO,EAAK,KAEV,AAAW,EAAM,AAAU,AADvB,AAAU,EAAM,QACY,GAAf,EAAK,OAEtB,AAAW,EAAO,GAAG,EAAK,GAAK,AAD3B,AAAU,EAAM,QACgB,OAEpC,AAAW,EAAO,GAAG,EAAK,GAAK,AAD3B,AAAU,EAAM,QACgB,OAEpC,AAAW,EAAO,GAAI,AAAU,AAD5B,AAAU,EAAM,QACiB,GAAf,EAAK,OAC3B,EAAO,KAAI,EAAQ,KAAI,EAAK,YAK9B,AAAI,AAAU,OACJ,SAAiB,SAA3B,AAAU,EAAQ,AAAS,QAC3B,EAAK,OACL,AAAO,EAAK,KAEV,AAAW,EAAM,AAAS,AADtB,AAAU,EAAM,QACW,GAAd,EAAK,OAEtB,AAAW,EAAO,GAAG,EAAK,GAAI,AAD1B,AAAU,EAAM,QACe,OAEnC,AAAW,EAAO,GAAG,EAAK,GAAI,AAD1B,AAAU,EAAM,QACe,OAEnC,AAAW,EAAO,GAAI,AAAS,AAD3B,AAAU,EAAM,QACgB,GAAd,EAAK,OAC3B,EAAO,KAAI,EAAQ,KAAI,EAAK,WAQpC,AAAI,EAAI,KACN,AAAU,EAAQ,AAAS,QAC3B,AAAU,OAAQ,AAAS,aAC3B,AAAU,OAAQ,AAAS,aAC3B,AAAU,OAAQ,AAAS,aAC3B,AAAU,OAAQ,AAAS,aAC3B,AAAU,OAAQ,AAAS,aAC3B,AAAU,OAAQ,AAAS,aAC3B,AAAU,OAAQ,AAAS,aAC3B,AAAU,OAAQ,AAAS,aAC3B,AAAU,OAAQ,AAAS,aAC3B,AAAU,OAAQ,AAAS,aAC3B,AAAU,OAAQ,AAAS,aAC3B,AAAU,OAAQ,AAAS,aAC3B,AAAU,OAAQ,AAAS,aAC3B,AAAU,OAAQ,AAAS,qCAC3B,AAAU,EAAQ,AAAS,SAE7B,AAAI,EAAI,KACN,AAAU,EAAQ,AAAS,QAC3B,AAAU,OAAQ,AAAS,aAC3B,AAAU,OAAQ,AAAS,aAC3B,AAAU,OAAQ,AAAS,aAC3B,AAAU,OAAQ,AAAS,aAC3B,AAAU,OAAQ,AAAS,aAC3B,AAAU,OAAQ,AAAS,qCAC3B,AAAU,EAAQ,AAAS,SAE7B,AAAI,EAAI,KACN,AAAU,EAAQ,AAAS,QAC3B,AAAU,OAAQ,AAAS,aAC3B,AAAU,OAAQ,AAAS,qCAC3B,AAAU,EAAQ,AAAS,SAE7B,AAAI,EAAI,KACN,AAAU,EAAQ,AAAS,gCAC3B,AAAU,EAAQ,AAAS,SAE7B,AAAI,EAAI,KACN,AAAU,EAAQ,AAAS,eDhH3B,EAAkB,ICuHpB,AAAI,ADvHM,EAAK,KCwHf,EACyB,EAAO,GAAK,GAA/B,EAAM,GAAK,MACb,AAAO,EAAM,EAAK,OAItB,AAAI,EAAO,KACT,AACM,AAAC,EAAM,GAAO,EAAO,QACvB,AAAO,EAAO,KACZ,AAAI,AAAC,KACL,AAAE,OACQ,SAAiB,SAA3B,AAAU,EAAQ,AAAS,cAE7B,AAAO,EAAK,KACV,AAAW,EAAM,AAAU,QAC3B,EAAQ,KACR,EAAQ,KACR,EAAQ,YAId,IACY,SAAiB,SAA3B,AAAU,EAAQ,AAAS,QAC3B,AAAE,YAGJ,AACM,AAAC,EAAM,GAAO,EAAO,QACvB,AAAO,AAAC,EAAO,GAAK,KAClB,AAAI,AAAC,KACL,AAAU,AAAO,AAAE,OAAT,GAAY,AAAS,EAAM,eAEvC,AAAO,EAAK,KAEV,AAAW,AAAO,AADlB,EAAK,KACM,GAAU,AAAU,EAAM,gBAI3C,IACE,AAAU,AAAO,AAAE,OAAT,GAAY,AAAS,EAAM,oBD1IvC,AAAY,EAAY,OACxB,AAAO,EAAQ,KACb,AAAY,EAAM,GAAO,EAAK,IAC9B,AAAS,EAAT,iBCmNJ,AAAqB,EAAjB,AD3MY,EAAI,MC4MpB,AACM,AAAC,EAAK,GAAO,EAAK,QACpB,AAAO,EAAK,KACV,AAAe,EAAX,AAAC,MAGL,AAAI,AAFI,AAAc,OAEb,AADD,AAAc,UACH,EAAI,MACvB,OAAK,OAAM,aAEN,EAAK,KAAZ,AACM,AAAU,KAAO,AAAU,QAC/B,EAAM,KACN,EAAM,KACN,EAAM,aAIL,aAGL,AAAI,AAFI,AAAc,OAEb,AADD,AAAc,UACH,EAAI,MACvB,OAAM,WAER,wBO/PiC,AAAgB,WAKd,AAAgB,WAKlB,OAKV,YGwBjB,EAJJ,AAAI,QAAwB,kBA9BuB,MAA0B,GAgCtC,KAClB,AAFC,AA/BtB,AAAO,MAAsE,GA+BxC,YAGZ,cAEzB,AAAY,AADF,AAA2B,EAAS,QACV,GAAyB,IAC7D,AAAY,EAAyB,GAAU,EAA0B,aNoCzE,AAAI,AAAC,AADO,EAAU,GAAK,YACC,eACrB,YEtFT,AAAI,AF+EK,EAAU,GAAK,uBE9EjB,eMND,QAAN,SL0EE,AADa,AAAmB,AAAS,AAD7B,OACoB,AAFD,MAE0B,KAC3C,YACM,EAAe,EAAQ,QAA3C,EAAc,MACd,EAAW,YACX,EAAW,eKzEb,IAVE,AAAyB,8C9ByG3B,AAAS,AADE,OACK,SAEhB,AAAoB,KAAW,mBAC/B,AAAI,EAAM,KACR,AAAgB,EAAuB,KAErC,AAAoB,EAAO,uBCob/B,EAAe,AADC,KACW,MAC3B,AAAY,EAAM,KD3ahB,AAAkB,EAAK,mBACvB,AACE,EAAW,AAA2B,EAAK,GAA/B,EAAO,eAvEvB,AAAI,EAAM,QAGR,AAAU,AAAkB,EAAM,UsB8KlC,AAAQ,AAAkB,OAIxB,AAAU,AADA,AAFE,AAAkB,SAGd,AAAO,KAAqB,QAC5C,AAAO,EAAM,KAEX,AAAI,AAAE,KAAmB,MAGrB,AAEe,AAHa,OAO5B,AAEe,AAHa,QAMhC,EAAO,SAGX,AAAQ","sourceRoot":"./Buffer.test.wasm","sourcesContent":["// Alignment guarantees\n\n// @ts-ignore: decorator\n@inline export const AL_BITS: u32 = 4; // 16 bytes to fit up to v128\n// @ts-ignore: decorator\n@inline export const AL_SIZE: usize = 1 << <usize>AL_BITS;\n// @ts-ignore: decorator\n@inline export const AL_MASK: usize = AL_SIZE - 1;\n\n// Extra debugging\n\n// @ts-ignore: decorator\n@inline export const DEBUG = true;\n\n// ╒════════════════ Common block layout (32-bit) ═════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤\n// │                           MM info                             │ -16\n// ├───────────────────────────────────────────────────────────────┤\n// │                           GC info                             │ -12\n// ├───────────────────────────────────────────────────────────────┤\n// │                          runtime id                           │ -8\n// ├───────────────────────────────────────────────────────────────┤\n// │                         runtime size                          │ -4\n// ╞═══════════════════════════════════════════════════════════════╡\n// │                              ...                              │ ref\n@unmanaged export class BLOCK {\n  /** Memory manager info. */\n  mmInfo: usize; // WASM64 needs adaption\n  /** Garbage collector info. */\n  gcInfo: u32;\n  /** Runtime class id. */\n  rtId: u32;\n  /** Runtime object size. */\n  rtSize: u32;\n}\n\n// @ts-ignore: decorator\n@inline export const BLOCK_OVERHEAD = (offsetof<BLOCK>() + AL_MASK) & ~AL_MASK;\n\n// @ts-ignore: decorator\n@inline export const BLOCK_MAXSIZE: usize = (1 << 30) - BLOCK_OVERHEAD;\n","// This file is shared with the compiler and must remain portable\n\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n\n/** Runtime type information data structure. */\n@unmanaged\nexport class Typeinfo {\n  /** Flags describing the shape of this class type. */\n  flags: TypeinfoFlags;\n  /** Base class id or `0` if none. */\n  base: u32;\n}\n\n/** Runtime type information flags. */\nexport const enum TypeinfoFlags {\n  /** No specific flags. */\n  NONE = 0,\n  /** Type is an `ArrayBufferView`. */\n  ARRAYBUFFERVIEW = 1 << 0,\n  /** Type is an `Array`. */\n  ARRAY = 1 << 1,\n  /** Type is a `Set`. */\n  SET = 1 << 2,\n  /** Type is a `Map`. */\n  MAP = 1 << 3,\n  /** Type is inherently acyclic. */\n  ACYCLIC = 1 << 4,\n  /** Value alignment of 1 byte. */\n  VALUE_ALIGN_0 = 1 << 5,\n  /** Value alignment of 2 bytes. */\n  VALUE_ALIGN_1 = 1 << 6,\n  /** Value alignment of 4 bytes. */\n  VALUE_ALIGN_2 = 1 << 7,\n  /** Value alignment of 8 bytes. */\n  VALUE_ALIGN_3 = 1 << 8,\n  /** Value alignment of 16 bytes. */\n  VALUE_ALIGN_4 = 1 << 9,\n  /** Value is a signed type. */\n  VALUE_SIGNED = 1 << 10,\n  /** Value is a float type. */\n  VALUE_FLOAT = 1 << 11,\n  /** Value type is nullable. */\n  VALUE_NULLABLE = 1 << 12,\n  /** Value type is managed. */\n  VALUE_MANAGED = 1 << 13,\n  /** Key alignment of 1 byte. */\n  KEY_ALIGN_0 = 1 << 14,\n  /** Key alignment of 2 bytes. */\n  KEY_ALIGN_1 = 1 << 15,\n  /** Key alignment of 4 bytes. */\n  KEY_ALIGN_2 = 1 << 16,\n  /** Key alignment of 8 bytes. */\n  KEY_ALIGN_3 = 1 << 17,\n  /** Key alignment of 16 bytes. */\n  KEY_ALIGN_4 = 1 << 18,\n  /** Key is a signed type. */\n  KEY_SIGNED = 1 << 19,\n  /** Key is a float type. */\n  KEY_FLOAT = 1 << 20,\n  /** Key type is nullable. */\n  KEY_NULLABLE = 1 << 21,\n  /** Key type is managed. */\n  KEY_MANAGED = 1 << 22\n}\n","import { DEBUG, BLOCK_OVERHEAD } from \"rt/common\";\nimport { Block, freeBlock, ROOT } from \"rt/tlsf\";\nimport { TypeinfoFlags } from \"shared/typeinfo\";\nimport { onincrement, ondecrement, onfree, onalloc } from \"./rtrace\";\n\n/////////////////////////// A Pure Reference Counting Garbage Collector ///////////////////////////\n// see:     https://researcher.watson.ibm.com/researcher/files/us-bacon/Bacon03Pure.pdf\n\n// ╒══════════════════════ GC Info structure ══════════════════════╕\n// │  3                   2                   1                    │\n// │1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0│\n// ├─┼─┴─┴─┼─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤\n// │B│color│                     refCount                          │\n// └─┴─────┴───────────────────────────────────────────────────────┘\n// B: buffered\n\n// @ts-ignore: decorator\n@inline const BUFFERED_MASK: u32 = 1 << ((sizeof<u32>() * 8) - 1);\n// @ts-ignore: decorator\n@inline const COLOR_BITS = 3;\n// @ts-ignore: decorator\n@inline const COLOR_SHIFT: u32 = ctz(BUFFERED_MASK) - COLOR_BITS;\n// @ts-ignore: decorator\n@inline const COLOR_MASK: u32 = ((1 << COLOR_BITS) - 1) << COLOR_SHIFT;\n// @ts-ignore: decorator\n@inline export const REFCOUNT_MASK: u32 = (1 << COLOR_SHIFT) - 1;\n\n// ╒════════╤═══════════════════ Colors ═══════════════════════════╕\n// │ Color  │ Meaning                                              │\n// ├────────┼──────────────────────────────────────────────────────┤\n// │ BLACK  │ In use or free                                       │\n// │ GRAY   │ Possible member of cycle                             │\n// │ WHITE  │ Member of garbage cycle                              │\n// │ PURPLE │ Possible root of cycle                               │\n// │ RED    │ Candidate cycle undergoing Σ-computation *concurrent │\n// │ ORANGE │ Candidate cycle awaiting epoch boundary  *concurrent │\n// └────────┴──────────────────────────────────────────────────────┘\n// Acyclic detection has been decoupled, hence no GREEN.\n\n// @ts-ignore: decorator\n@inline const COLOR_BLACK: u32 = 0 << COLOR_SHIFT;\n// @ts-ignore: decorator\n@inline const COLOR_GRAY: u32 = 1 << COLOR_SHIFT;\n// @ts-ignore: decorator\n@inline const COLOR_WHITE: u32 = 2 << COLOR_SHIFT;\n// @ts-ignore: decorator\n@inline const COLOR_PURPLE: u32 = 3 << COLOR_SHIFT;\n// @ts-ignore: decorator\n// @inline const COLOR_RED: u32 = 4 << COLOR_SHIFT;\n// @ts-ignore: decorator\n// @inline const COLOR_ORANGE: u32 = 5 << COLOR_SHIFT;\n\n// @ts-ignore: decorator\n@inline const VISIT_DECREMENT = 1; // guard 0\n// @ts-ignore: decorator\n@inline const VISIT_MARKGRAY = 2;\n// @ts-ignore: decorator\n@inline const VISIT_SCAN = 3;\n// @ts-ignore: decorator\n@inline const VISIT_SCANBLACK = 4;\n// @ts-ignore: decorator\n@inline const VISIT_COLLECTWHITE = 5;\n\n// @ts-ignore: decorator\n@global @unsafe @lazy\nfunction __visit(ref: usize, cookie: i32): void {\n  if (ref < __heap_base) return;\n  if (isDefined(__GC_ALL_ACYCLIC)) {\n    if (DEBUG) assert(cookie == VISIT_DECREMENT);\n    decrement(changetype<Block>(ref - BLOCK_OVERHEAD));\n  } else {\n    let s = changetype<Block>(ref - BLOCK_OVERHEAD);\n    switch (cookie) {\n      case VISIT_DECREMENT: {\n        decrement(s);\n        break;\n      }\n      case VISIT_MARKGRAY: {\n        if (DEBUG) assert((s.gcInfo & REFCOUNT_MASK) > 0);\n        s.gcInfo = s.gcInfo - 1;\n        markGray(s);\n        break;\n      }\n      case VISIT_SCAN: {\n        scan(s);\n        break;\n      }\n      case VISIT_SCANBLACK: {\n        let info = s.gcInfo;\n        assert((info & ~REFCOUNT_MASK) == ((info + 1) & ~REFCOUNT_MASK)); // overflow\n        s.gcInfo = info + 1;\n        if ((info & COLOR_MASK) != COLOR_BLACK) {\n          scanBlack(s);\n        }\n        break;\n      }\n      case VISIT_COLLECTWHITE: {\n        collectWhite(s);\n        break;\n      }\n      default: if (DEBUG) assert(false);\n    }\n  }\n}\n\n/** Increments the reference count of the specified block by one.*/\nfunction increment(s: Block): void {\n  var info = s.gcInfo;\n  assert((info & ~REFCOUNT_MASK) == ((info + 1) & ~REFCOUNT_MASK)); // overflow\n  s.gcInfo = info + 1;\n  if (isDefined(ASC_RTRACE)) onincrement(s);\n  if (DEBUG) assert(!(s.mmInfo & 1)); // used\n}\n\n/** Decrements the reference count of the specified block by one, possibly freeing it. */\n// @ts-ignore: decorator\n@lazy\nfunction decrement(s: Block): void {\n  var info = s.gcInfo;\n  var rc = info & REFCOUNT_MASK;\n  if (isDefined(ASC_RTRACE)) ondecrement(s);\n  if (DEBUG) assert(!(s.mmInfo & 1)); // used\n  if (rc == 1) {\n    __visit_members(changetype<usize>(s) + BLOCK_OVERHEAD, VISIT_DECREMENT);\n    if (isDefined(__GC_ALL_ACYCLIC)) {\n      if (DEBUG) assert(!(info & BUFFERED_MASK));\n      freeBlock(ROOT, s);\n    } else {\n      if (!(info & BUFFERED_MASK)) {\n        freeBlock(ROOT, s);\n      } else {\n        s.gcInfo = BUFFERED_MASK | COLOR_BLACK | 0;\n      }\n    }\n  } else {\n    if (DEBUG) assert(rc > 0);\n    if (isDefined(__GC_ALL_ACYCLIC)) {\n      s.gcInfo = (info & ~REFCOUNT_MASK) | (rc - 1);\n    } else {\n      if (!(__typeinfo(s.rtId) & TypeinfoFlags.ACYCLIC)) {\n        s.gcInfo = BUFFERED_MASK | COLOR_PURPLE | (rc - 1);\n        if (!(info & BUFFERED_MASK)) {\n          appendRoot(s);\n        }\n      } else {\n        s.gcInfo = (info & ~REFCOUNT_MASK) | (rc - 1);\n      }\n    }\n  }\n}\n\n/** Buffer of possible roots. */\n// @ts-ignore: decorator\n@lazy var ROOTS: usize;\n/** Current absolute offset into the `ROOTS` buffer. */\n// @ts-ignore: decorator\n@lazy var CUR: usize = 0;\n/** Current absolute end offset into the `ROOTS` buffer. */\n// @ts-ignore: decorator\n@lazy var END: usize = 0;\n\n/** Appends a block to possible roots. */\nfunction appendRoot(s: Block): void {\n  var cur = CUR;\n  if (cur >= END) {\n    growRoots(); // TBD: either that or pick a default and force collection on overflow\n    cur = CUR;\n  }\n  store<Block>(cur, s);\n  CUR = cur + sizeof<usize>();\n}\n\n/** Grows the roots buffer if it ran full. */\nfunction growRoots(): void {\n  var oldRoots = ROOTS;\n  var oldSize = CUR - oldRoots;\n  var newSize = max(oldSize * 2, 64 << alignof<usize>());\n  var newRoots = __alloc(newSize, 0);\n  if (isDefined(ASC_RTRACE)) onfree(changetype<Block>(newRoots - BLOCK_OVERHEAD)); // neglect unmanaged\n  memory.copy(newRoots, oldRoots, oldSize);\n  if (oldRoots) {\n    if (isDefined(ASC_RTRACE)) onalloc(changetype<Block>(oldRoots - BLOCK_OVERHEAD)); // neglect unmanaged\n    __free(oldRoots);\n  }\n  ROOTS = newRoots;\n  CUR = newRoots + oldSize;\n  END = newRoots + newSize;\n}\n\n/** Collects cyclic garbage. */\n// @ts-ignore: decorator\n@global @unsafe @lazy\nexport function __collect(): void {\n  if (isDefined(__GC_ALL_ACYCLIC)) return;\n\n  // markRoots\n  var roots = ROOTS;\n  var cur = roots;\n  for (let pos = cur, end = CUR; pos < end; pos += sizeof<usize>()) {\n    let s = load<Block>(pos);\n    let info = s.gcInfo;\n    if ((info & COLOR_MASK) == COLOR_PURPLE && (info & REFCOUNT_MASK) > 0) {\n      markGray(s);\n      store<Block>(cur, s);\n      cur += sizeof<usize>();\n    } else {\n      if ((info & COLOR_MASK) == COLOR_BLACK && !(info & REFCOUNT_MASK)) {\n        freeBlock(ROOT, s);\n      } else {\n        s.gcInfo = info & ~BUFFERED_MASK;\n      }\n    }\n  }\n  CUR = cur;\n\n  // scanRoots\n  for (let pos = roots; pos < cur; pos += sizeof<usize>()) {\n    scan(load<Block>(pos));\n  }\n\n  // collectRoots\n  for (let pos = roots; pos < cur; pos += sizeof<usize>()) {\n    let s = load<Block>(pos);\n    s.gcInfo = s.gcInfo & ~BUFFERED_MASK;\n    collectWhite(s);\n  }\n  CUR = roots;\n}\n\n/** Marks a block as gray (possible member of cycle) during the collection phase. */\nfunction markGray(s: Block): void {\n  var info = s.gcInfo;\n  if ((info & COLOR_MASK) != COLOR_GRAY) {\n    s.gcInfo = (info & ~COLOR_MASK) | COLOR_GRAY;\n    __visit_members(changetype<usize>(s) + BLOCK_OVERHEAD, VISIT_MARKGRAY);\n  }\n}\n\n/** Scans a block during the collection phase, determining whether it is garbage or not. */\nfunction scan(s: Block): void {\n  var info = s.gcInfo;\n  if ((info & COLOR_MASK) == COLOR_GRAY) {\n    if ((info & REFCOUNT_MASK) > 0) {\n      scanBlack(s);\n    } else {\n      s.gcInfo = (info & ~COLOR_MASK) | COLOR_WHITE;\n      __visit_members(changetype<usize>(s) + BLOCK_OVERHEAD, VISIT_SCAN);\n    }\n  }\n}\n\n/** Marks a block as black (in use) if it was found to be reachable during the collection phase. */\nfunction scanBlack(s: Block): void {\n  s.gcInfo = (s.gcInfo & ~COLOR_MASK) | COLOR_BLACK;\n  __visit_members(changetype<usize>(s) + BLOCK_OVERHEAD, VISIT_SCANBLACK);\n}\n\n/** Collects all white (member of a garbage cycle) nodes when completing the collection phase.  */\nfunction collectWhite(s: Block): void {\n  var info = s.gcInfo;\n  if ((info & COLOR_MASK) == COLOR_WHITE && !(info & BUFFERED_MASK)) {\n    s.gcInfo = (info & ~COLOR_MASK) | COLOR_BLACK;\n    __visit_members(changetype<usize>(s) + BLOCK_OVERHEAD, VISIT_COLLECTWHITE);\n    freeBlock(ROOT, s);\n  }\n}\n\n// @ts-ignore: decorator\n@global @unsafe\nexport function __retain(ptr: usize): usize {\n  if (ptr > __heap_base) increment(changetype<Block>(ptr - BLOCK_OVERHEAD));\n  return ptr;\n}\n\n// @ts-ignore: decorator\n@global @unsafe\nexport function __release(ptr: usize): void {\n  if (ptr > __heap_base) decrement(changetype<Block>(ptr - BLOCK_OVERHEAD));\n}\n","import { AL_BITS, AL_MASK, DEBUG, BLOCK, BLOCK_OVERHEAD, BLOCK_MAXSIZE } from \"rt/common\";\nimport { onfree, onalloc, onrealloc } from \"./rtrace\";\nimport { REFCOUNT_MASK } from \"./pure\";\n\n/////////////////////// The TLSF (Two-Level Segregate Fit) memory allocator ///////////////////////\n//                             see: http://www.gii.upv.es/tlsf/\n\n// - `ffs(x)` is equivalent to `ctz(x)` with x != 0\n// - `fls(x)` is equivalent to `sizeof(x) * 8 - clz(x) - 1`\n\n// ╒══════════════ Block size interpretation (32-bit) ═════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┼─┴─┴─┴─╫─┴─┴─┴─┤\n// │ |                    FL                       │ SB = SL + AL  │ ◄─ usize\n// └───────────────────────────────────────────────┴───────╨───────┘\n// FL: first level, SL: second level, AL: alignment, SB: small block\n\n// @ts-ignore: decorator\n@inline const SL_BITS: u32 = 4;\n// @ts-ignore: decorator\n@inline const SL_SIZE: usize = 1 << <usize>SL_BITS;\n\n// @ts-ignore: decorator\n@inline const SB_BITS: usize = <usize>(SL_BITS + AL_BITS);\n// @ts-ignore: decorator\n@inline const SB_SIZE: usize = 1 << <usize>SB_BITS;\n\n// @ts-ignore: decorator\n@inline const FL_BITS: u32 = 31 - SB_BITS;\n\n// [00]: < 256B (SB)  [12]: < 1M\n// [01]: < 512B       [13]: < 2M\n// [02]: < 1K         [14]: < 4M\n// [03]: < 2K         [15]: < 8M\n// [04]: < 4K         [16]: < 16M\n// [05]: < 8K         [17]: < 32M\n// [06]: < 16K        [18]: < 64M\n// [07]: < 32K        [19]: < 128M\n// [08]: < 64K        [20]: < 256M\n// [09]: < 128K       [21]: < 512M\n// [10]: < 256K       [22]: <= 1G - OVERHEAD\n// [11]: < 512K\n// VMs limit to 2GB total (currently), making one 1G block max (or three 512M etc.) due to block overhead\n\n// Tags stored in otherwise unused alignment bits\n\n// @ts-ignore: decorator\n@inline const FREE: usize = 1 << 0;\n// @ts-ignore: decorator\n@inline const LEFTFREE: usize = 1 << 1;\n// @ts-ignore: decorator\n@inline const TAGS_MASK: usize = FREE | LEFTFREE; // <= AL_MASK\n\n// ╒════════════════════ Block layout (32-bit) ════════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┼─┼─┼─┤ overhead   ┐\n// │                          size                           │0│L│F│ ◄─┐ info\n// ├─────────────────────────────────────────────────────────┴─┴─┴─┤   │\n// │                                                               │   │\n// │               ... additional runtime overhead ...             │   │\n// │                                                               │   │\n// ╞═══════════════════════════════════════════════════════════════╡   │      ┐ ┘\n// │                        if free: ◄ prev                        │ ◄─┤ usize\n// ├───────────────────────────────────────────────────────────────┤   │\n// │                        if free: next ►                        │ ◄─┤\n// ├───────────────────────────────────────────────────────────────┤   │\n// │                             ...                               │   │    = 0\n// ├───────────────────────────────────────────────────────────────┤   │\n// │                        if free: back ▲                        │ ◄─┘\n// └───────────────────────────────────────────────────────────────┘ payload  ┘ >= MIN SIZE\n// F: FREE, L: LEFTFREE\n@unmanaged export class Block extends BLOCK {\n\n  /** Previous free block, if any. Only valid if free, otherwise part of payload. */\n  prev: Block | null;\n  /** Next free block, if any. Only valid if free, otherwise part of payload. */\n  next: Block | null;\n\n  // If the block is free, there is a 'back'reference at its end pointing at its start.\n}\n\n// Block constants. A block must have a minimum size of three pointers so it can hold `prev`,\n// `next` and `back` if free.\n\n// @ts-ignore: decorator\n@inline const BLOCK_MINSIZE: usize = (3 * sizeof<usize>() + AL_MASK) & ~AL_MASK; // prev + next + back\n// @ts-ignore: decorator\n// @inline const BLOCK_MAXSIZE: usize = 1 << (FL_BITS + SB_BITS - 1); // exclusive, lives in common.ts\n\n/** Gets the left block of a block. Only valid if the left block is free. */\n// @ts-ignore: decorator\n@inline function GETFREELEFT(block: Block): Block {\n  return load<Block>(changetype<usize>(block) - sizeof<usize>());\n}\n\n/** Gets the right block of of a block by advancing to the right by its size. */\n// @ts-ignore: decorator\n@inline function GETRIGHT(block: Block): Block {\n  return changetype<Block>(changetype<usize>(block) + BLOCK_OVERHEAD + (block.mmInfo & ~TAGS_MASK));\n}\n\n// ╒═════════════════════ Root layout (32-bit) ════════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤          ┐\n// │        0        |           flMap                            S│ ◄────┐\n// ╞═══════════════════════════════════════════════════════════════╡      │\n// │                           slMap[0] S                          │ ◄─┐  │\n// ├───────────────────────────────────────────────────────────────┤   │  │\n// │                           slMap[1]                            │ ◄─┤  │\n// ├───────────────────────────────────────────────────────────────┤  u32 │\n// │                           slMap[22]                           │ ◄─┘  │\n// ╞═══════════════════════════════════════════════════════════════╡    usize\n// │                            head[0]                            │ ◄────┤\n// ├───────────────────────────────────────────────────────────────┤      │\n// │                              ...                              │ ◄────┤\n// ├───────────────────────────────────────────────────────────────┤      │\n// │                           head[367]                           │ ◄────┤\n// ╞═══════════════════════════════════════════════════════════════╡      │\n// │                             tail                              │ ◄────┘\n// └───────────────────────────────────────────────────────────────┘   SIZE   ┘\n// S: Small blocks map\n@unmanaged class Root {\n  /** First level bitmap. */\n  flMap: usize;\n}\n\n// Root constants. Where stuff is stored inside of the root structure.\n\n// @ts-ignore: decorator\n@inline const SL_START = sizeof<usize>();\n// @ts-ignore: decorator\n@inline const SL_END = SL_START + (FL_BITS << alignof<u32>());\n// @ts-ignore: decorator\n@inline const HL_START = (SL_END + AL_MASK) & ~AL_MASK;\n// @ts-ignore: decorator\n@inline const HL_END = HL_START + FL_BITS * SL_SIZE * sizeof<usize>();\n// @ts-ignore: decorator\n@inline const ROOT_SIZE = HL_END + sizeof<usize>();\n\n// @ts-ignore: decorator\n@lazy export var ROOT: Root;\n\n/** Gets the second level map of the specified first level. */\n// @ts-ignore: decorator\n@inline function GETSL(root: Root, fl: usize): u32 {\n  return load<u32>(\n    changetype<usize>(root) + (fl << alignof<u32>()),\n    SL_START\n  );\n}\n\n/** Sets the second level map of the specified first level. */\n// @ts-ignore: decorator\n@inline function SETSL(root: Root, fl: usize, slMap: u32): void {\n  store<u32>(\n    changetype<usize>(root) + (fl << alignof<u32>()),\n    slMap,\n    SL_START\n  );\n}\n\n/** Gets the head of the free list for the specified combination of first and second level. */\n// @ts-ignore: decorator\n@inline function GETHEAD(root: Root, fl: usize, sl: u32): Block | null {\n  return load<Block>(\n    changetype<usize>(root) + (((fl << SL_BITS) + <usize>sl) << alignof<usize>()),\n    HL_START\n  );\n}\n\n/** Sets the head of the free list for the specified combination of first and second level. */\n// @ts-ignore: decorator\n@inline function SETHEAD(root: Root, fl: usize, sl: u32, head: Block | null): void {\n  store<Block>(\n    changetype<usize>(root) + (((fl << SL_BITS) + <usize>sl) << alignof<usize>()),\n    head,\n    HL_START\n  );\n}\n\n/** Gets the tail block.. */\n// @ts-ignore: decorator\n@inline function GETTAIL(root: Root): Block {\n  return load<Block>(\n    changetype<usize>(root),\n    HL_END\n  );\n}\n\n/** Sets the tail block. */\n// @ts-ignore: decorator\n@inline function SETTAIL(root: Root, tail: Block): void {\n  store<Block>(\n    changetype<usize>(root),\n    tail,\n    HL_END\n  );\n}\n\n/** Inserts a previously used block back into the free list. */\nfunction insertBlock(root: Root, block: Block): void {\n  if (DEBUG) assert(block); // cannot be null\n  var blockInfo = block.mmInfo;\n  if (DEBUG) assert(blockInfo & FREE); // must be free\n\n  var right = GETRIGHT(block);\n  var rightInfo = right.mmInfo;\n\n  // merge with right block if also free\n  if (rightInfo & FREE) {\n    let newSize = (blockInfo & ~TAGS_MASK) + BLOCK_OVERHEAD + (rightInfo & ~TAGS_MASK);\n    if (newSize < BLOCK_MAXSIZE) {\n      removeBlock(root, right);\n      block.mmInfo = blockInfo = (blockInfo & TAGS_MASK) | newSize;\n      right = GETRIGHT(block);\n      rightInfo = right.mmInfo;\n      // 'back' is set below\n    }\n  }\n\n  // merge with left block if also free\n  if (blockInfo & LEFTFREE) {\n    let left = GETFREELEFT(block);\n    let leftInfo = left.mmInfo;\n    if (DEBUG) assert(leftInfo & FREE); // must be free according to right tags\n    let newSize = (leftInfo & ~TAGS_MASK) + BLOCK_OVERHEAD + (blockInfo & ~TAGS_MASK);\n    if (newSize < BLOCK_MAXSIZE) {\n      removeBlock(root, left);\n      left.mmInfo = blockInfo = (leftInfo & TAGS_MASK) | newSize;\n      block = left;\n      // 'back' is set below\n    }\n  }\n\n  right.mmInfo = rightInfo | LEFTFREE;\n  // right is no longer used now, hence rightInfo is not synced\n\n  // we now know the size of the block\n  var size = blockInfo & ~TAGS_MASK;\n  if (DEBUG) assert(size >= BLOCK_MINSIZE && size < BLOCK_MAXSIZE); // must be a valid size\n  if (DEBUG) assert(changetype<usize>(block) + BLOCK_OVERHEAD + size == changetype<usize>(right)); // must match\n\n  // set 'back' to itself at the end of block\n  store<Block>(changetype<usize>(right) - sizeof<usize>(), block);\n\n  // mapping_insert\n  var fl: usize, sl: u32;\n  if (size < SB_SIZE) {\n    fl = 0;\n    sl = <u32>(size >> AL_BITS);\n  } else {\n    const inv: usize = sizeof<usize>() * 8 - 1;\n    fl = inv - clz<usize>(size);\n    sl = <u32>((size >> (fl - SL_BITS)) ^ (1 << SL_BITS));\n    fl -= SB_BITS - 1;\n  }\n  if (DEBUG) assert(fl < FL_BITS && sl < SL_SIZE); // fl/sl out of range\n\n  // perform insertion\n  var head = GETHEAD(root, fl, sl);\n  block.prev = null;\n  block.next = head;\n  if (head) head.prev = block;\n  SETHEAD(root, fl, sl, block);\n\n  // update first and second level maps\n  root.flMap |= (1 << fl);\n  SETSL(root, fl, GETSL(root, fl) | (1 << sl));\n}\n\n/** Removes a free block from internal lists. */\nfunction removeBlock(root: Root, block: Block): void {\n  var blockInfo = block.mmInfo;\n  if (DEBUG) assert(blockInfo & FREE); // must be free\n  var size = blockInfo & ~TAGS_MASK;\n  if (DEBUG) assert(size >= BLOCK_MINSIZE && size < BLOCK_MAXSIZE); // must be valid\n\n  // mapping_insert\n  var fl: usize, sl: u32;\n  if (size < SB_SIZE) {\n    fl = 0;\n    sl = <u32>(size >> AL_BITS);\n  } else {\n    const inv: usize = sizeof<usize>() * 8 - 1;\n    fl = inv - clz<usize>(size);\n    sl = <u32>((size >> (fl - SL_BITS)) ^ (1 << SL_BITS));\n    fl -= SB_BITS - 1;\n  }\n  if (DEBUG) assert(fl < FL_BITS && sl < SL_SIZE); // fl/sl out of range\n\n  // link previous and next free block\n  var prev = block.prev;\n  var next = block.next;\n  if (prev) prev.next = next;\n  if (next) next.prev = prev;\n\n  // update head if we are removing it\n  if (block == GETHEAD(root, fl, sl)) {\n    SETHEAD(root, fl, sl, next);\n\n    // clear second level map if head is empty now\n    if (!next) {\n      let slMap = GETSL(root, fl);\n      SETSL(root, fl, slMap &= ~(1 << sl));\n\n      // clear first level map if second level is empty now\n      if (!slMap) root.flMap &= ~(1 << fl);\n    }\n  }\n  // note: does not alter left/back because it is likely that splitting\n  // is performed afterwards, invalidating those changes. so, the caller\n  // must perform those updates.\n}\n\n/** Searches for a free block of at least the specified size. */\nfunction searchBlock(root: Root, size: usize): Block | null {\n  // size was already asserted by caller\n\n  // mapping_search\n  var fl: usize, sl: u32;\n  if (size < SB_SIZE) {\n    fl = 0;\n    sl = <u32>(size >> AL_BITS);\n  } else {\n    const halfMaxSize = BLOCK_MAXSIZE >> 1; // don't round last fl\n    const inv: usize = sizeof<usize>() * 8 - 1;\n    const invRound = inv - SL_BITS;\n    let requestSize = size < halfMaxSize\n      ? size + (1 << (invRound - clz<usize>(size))) - 1\n      : size;\n    fl = inv - clz<usize>(requestSize);\n    sl = <u32>((requestSize >> (fl - SL_BITS)) ^ (1 << SL_BITS));\n    fl -= SB_BITS - 1;\n  }\n  if (DEBUG) assert(fl < FL_BITS && sl < SL_SIZE); // fl/sl out of range\n\n  // search second level\n  var slMap = GETSL(root, fl) & (~0 << sl);\n  var head: Block | null = null;\n  if (!slMap) {\n    // search next larger first level\n    let flMap = root.flMap & (~0 << (fl + 1));\n    if (!flMap) {\n      head = null;\n    } else {\n      fl = ctz<usize>(flMap);\n      slMap = GETSL(root, fl);\n      if (DEBUG) assert(slMap);  // can't be zero if fl points here\n      head = GETHEAD(root, fl, ctz<u32>(slMap));\n    }\n  } else {\n    head = GETHEAD(root, fl, ctz<u32>(slMap));\n  }\n  return head;\n}\n\n/** Prepares the specified block before (re-)use, possibly splitting it. */\nfunction prepareBlock(root: Root, block: Block, size: usize): void {\n  // size was already asserted by caller\n\n  var blockInfo = block.mmInfo;\n  if (DEBUG) assert(!(size & AL_MASK)); // size must be aligned so the new block is\n\n  // split if the block can hold another MINSIZE block incl. overhead\n  var remaining = (blockInfo & ~TAGS_MASK) - size;\n  if (remaining >= BLOCK_OVERHEAD + BLOCK_MINSIZE) {\n    block.mmInfo = size | (blockInfo & LEFTFREE); // also discards FREE\n\n    let spare = changetype<Block>(changetype<usize>(block) + BLOCK_OVERHEAD + size);\n    spare.mmInfo = (remaining - BLOCK_OVERHEAD) | FREE; // not LEFTFREE\n    insertBlock(root, spare); // also sets 'back'\n\n  // otherwise tag block as no longer FREE and right as no longer LEFTFREE\n  } else {\n    block.mmInfo = blockInfo & ~FREE;\n    GETRIGHT(block).mmInfo &= ~LEFTFREE;\n  }\n}\n\n/** Adds more memory to the pool. */\nfunction addMemory(root: Root, start: usize, end: usize): bool {\n  if (DEBUG) {\n    assert(\n      start <= end &&       // must be valid\n      !(start & AL_MASK) && // must be aligned\n      !(end & AL_MASK)      // must be aligned\n    );\n  }\n\n  var tail = GETTAIL(root);\n  var tailInfo: usize = 0;\n  if (tail) { // more memory\n    if (DEBUG) assert(start >= changetype<usize>(tail) + BLOCK_OVERHEAD);\n\n    // merge with current tail if adjacent\n    if (start - BLOCK_OVERHEAD == changetype<usize>(tail)) {\n      start -= BLOCK_OVERHEAD;\n      tailInfo = tail.mmInfo;\n    } else {\n      // We don't do this, but a user might `memory.grow` manually\n      // leading to non-adjacent pages managed by TLSF.\n    }\n\n  } else if (DEBUG) { // first memory\n    assert(start >= changetype<usize>(root) + ROOT_SIZE); // starts after root\n  }\n\n  // check if size is large enough for a free block and the tail block\n  var size = end - start;\n  if (size < BLOCK_OVERHEAD + BLOCK_MINSIZE + BLOCK_OVERHEAD) {\n    return false;\n  }\n\n  // left size is total minus its own and the zero-length tail's header\n  var leftSize = size - (BLOCK_OVERHEAD << 1);\n  var left = changetype<Block>(start);\n  left.mmInfo = leftSize | FREE | (tailInfo & LEFTFREE);\n  left.prev = null;\n  left.next = null;\n\n  // tail is a zero-length used block\n  tail = changetype<Block>(start + size - BLOCK_OVERHEAD);\n  tail.mmInfo = 0 | LEFTFREE;\n  SETTAIL(root, tail);\n\n  insertBlock(root, left); // also merges with free left before tail / sets 'back'\n\n  return true;\n}\n\n/** Grows memory to fit at least another block of the specified size. */\nfunction growMemory(root: Root, size: usize): void {\n  // Here, both rounding performed in searchBlock ...\n  const halfMaxSize = BLOCK_MAXSIZE >> 1;\n  if (size < halfMaxSize) { // don't round last fl\n    const invRound = (sizeof<usize>() * 8 - 1) - SL_BITS;\n    size += (1 << (invRound - clz<usize>(size))) - 1;\n  }\n  // and additional BLOCK_OVERHEAD must be taken into account. If we are going\n  // to merge with the tail block, that's one time, otherwise it's two times.\n  var pagesBefore = memory.size();\n  size += BLOCK_OVERHEAD << usize((<usize>pagesBefore << 16) - BLOCK_OVERHEAD != changetype<usize>(GETTAIL(root)));\n  var pagesNeeded = <i32>(((size + 0xffff) & ~0xffff) >>> 16);\n  var pagesWanted = max(pagesBefore, pagesNeeded); // double memory\n  if (memory.grow(pagesWanted) < 0) {\n    if (memory.grow(pagesNeeded) < 0) unreachable();\n  }\n  var pagesAfter = memory.size();\n  addMemory(root, <usize>pagesBefore << 16, <usize>pagesAfter << 16);\n}\n\n/** Prepares and checks an allocation size. */\nfunction prepareSize(size: usize): usize {\n  if (size >= BLOCK_MAXSIZE) throw new Error(\"allocation too large\");\n  return max<usize>((size + AL_MASK) & ~AL_MASK, BLOCK_MINSIZE); // align and ensure min size\n}\n\n/** Initilizes the root structure. */\nexport function maybeInitialize(): Root {\n  var root = ROOT;\n  if (!root) {\n    const rootOffset = (__heap_base + AL_MASK) & ~AL_MASK;\n    let pagesBefore = memory.size();\n    let pagesNeeded = <i32>((((rootOffset + ROOT_SIZE) + 0xffff) & ~0xffff) >>> 16);\n    if (pagesNeeded > pagesBefore && memory.grow(pagesNeeded - pagesBefore) < 0) unreachable();\n    root = changetype<Root>(rootOffset);\n    root.flMap = 0;\n    SETTAIL(root, changetype<Block>(0));\n    for (let fl: usize = 0; fl < FL_BITS; ++fl) {\n      SETSL(root, fl, 0);\n      for (let sl: u32 = 0; sl < SL_SIZE; ++sl) {\n        SETHEAD(root, fl, sl, null);\n      }\n    }\n    addMemory(root, (rootOffset + ROOT_SIZE + AL_MASK) & ~AL_MASK, memory.size() << 16);\n    ROOT = root;\n  }\n  return root;\n}\n\n// @ts-ignore: decorator\n@lazy\nvar collectLock: bool = false;\n\n/** Allocates a block of the specified size. */\nexport function allocateBlock(root: Root, size: usize, id: u32): Block {\n  if (DEBUG) assert(!collectLock); // must not allocate while collecting\n  var payloadSize = prepareSize(size);\n  var block = searchBlock(root, payloadSize);\n  if (!block) {\n    if (gc.auto) {\n      if (DEBUG) collectLock = true;\n      __collect();\n      if (DEBUG) collectLock = false;\n      block = searchBlock(root, payloadSize);\n      if (!block) {\n        growMemory(root, payloadSize);\n        block = changetype<Block>(searchBlock(root, payloadSize));\n        if (DEBUG) assert(block); // must be found now\n      }\n    } else {\n      growMemory(root, payloadSize);\n      block = changetype<Block>(searchBlock(root, payloadSize));\n      if (DEBUG) assert(block); // must be found now\n    }\n  }\n  if (DEBUG) assert((block.mmInfo & ~TAGS_MASK) >= payloadSize); // must fit\n  block.gcInfo = 0; // RC=0\n  block.rtId = id;\n  block.rtSize = size;\n  removeBlock(root, <Block>block);\n  prepareBlock(root, <Block>block, payloadSize);\n  if (isDefined(ASC_RTRACE)) onalloc(<Block>block);\n  return <Block>block;\n}\n\n/** Reallocates a block to the specified size. */\nexport function reallocateBlock(root: Root, block: Block, size: usize): Block {\n  var payloadSize = prepareSize(size);\n  var blockInfo = block.mmInfo;\n\n  // possibly split and update runtime size if it still fits\n  if (payloadSize <= (blockInfo & ~TAGS_MASK)) {\n    prepareBlock(root, block, payloadSize);\n    block.rtSize = size;\n    return block;\n  }\n\n  // merge with right free block if merger is large enough\n  var right = GETRIGHT(block);\n  var rightInfo = right.mmInfo;\n  if (rightInfo & FREE) {\n    let mergeSize = (blockInfo & ~TAGS_MASK) + BLOCK_OVERHEAD + (rightInfo & ~TAGS_MASK);\n    if (mergeSize >= payloadSize) {\n      removeBlock(root, right);\n      // TODO: this can yield an intermediate block larger than BLOCK_MAXSIZE, which\n      // is immediately split though. does this trigger any assertions / issues?\n      block.mmInfo = (blockInfo & TAGS_MASK) | mergeSize;\n      block.rtSize = size;\n      prepareBlock(root, block, payloadSize);\n      return block;\n    }\n  }\n\n  // otherwise move the block\n  var newBlock = allocateBlock(root, size, block.rtId); // may invalidate cached blockInfo\n  newBlock.gcInfo = block.gcInfo; // keep RC\n  memory.copy(changetype<usize>(newBlock) + BLOCK_OVERHEAD, changetype<usize>(block) + BLOCK_OVERHEAD, size);\n  if (changetype<usize>(block) >= __heap_base) {\n    if (isDefined(ASC_RTRACE)) onrealloc(block, newBlock);\n    freeBlock(root, block);\n  }\n  return newBlock;\n}\n\n/** Frees a block. */\nexport function freeBlock(root: Root, block: Block): void {\n  var blockInfo = block.mmInfo;\n  block.mmInfo = blockInfo | FREE;\n  insertBlock(root, block);\n  if (isDefined(ASC_RTRACE)) onfree(block);\n}\n\n/** Checks that a used block is valid to be freed or reallocated. */\nfunction checkUsedBlock(ref: usize): Block {\n  var block = changetype<Block>(ref - BLOCK_OVERHEAD);\n  assert(\n    ref != 0 && !(ref & AL_MASK) &&  // must exist and be aligned\n    !(block.mmInfo & FREE) &&        // must be used\n    !(block.gcInfo & ~REFCOUNT_MASK) // not buffered or != BLACK\n  );\n  return block;\n}\n\n// @ts-ignore: decorator\n@global @unsafe\nexport function __alloc(size: usize, id: u32): usize {\n  return changetype<usize>(\n    allocateBlock(maybeInitialize(), size, id)\n  ) + BLOCK_OVERHEAD;\n}\n\n// @ts-ignore: decorator\n@global @unsafe\nexport function __realloc(ref: usize, size: usize): usize {\n  return changetype<usize>(\n    reallocateBlock(maybeInitialize(), checkUsedBlock(ref), size)\n  ) + BLOCK_OVERHEAD;\n}\n\n// @ts-ignore: decorator\n@global @unsafe\nexport function __free(ref: usize): void {\n  freeBlock(maybeInitialize(), checkUsedBlock(ref));\n}\n","/// <reference path=\"./rt/index.d.ts\" />\n\n/** Garbage collector interface. */\nexport namespace gc {\n\n  /** Can be set to `false` to disable automatic collection. Defaults to `true`. */\n  export var auto: bool = true;\n\n  /** Performs a full garbage collection cycle. */\n  export function collect(): void {\n    __collect();\n  }\n}\n","export const enum CanvasInstruction {\r\n  Arc = 0,\r\n  ArcTo = 1,\r\n  BeginPath = 2,\r\n  BezierCurveTo = 3,\r\n  Clip = 4,\r\n  ClosePath = 5,\r\n  Commit = 6,\r\n  ClearRect = 7,\r\n  Direction = 8,\r\n  DrawFocusIfNeeded = 9,\r\n  DrawImage = 10,\r\n  Ellipse = 11,\r\n  Fill = 12,\r\n  FillGradient = 13,\r\n  FillPattern = 14,\r\n  FillRect = 15,\r\n  FillStyle = 16,\r\n  FillText = 17,\r\n  FillTextWidth = 18,\r\n  Filter = 19,\r\n  Font = 20,\r\n  GlobalAlpha = 21,\r\n  GlobalCompositeOperation = 22,\r\n  ImageSmoothingEnabled = 23,\r\n  ImageSmoothingQuality = 24,\r\n  Inspect = 25,\r\n  LineCap = 26,\r\n  LineDash = 27,\r\n  LineDashOffset = 28,\r\n  LineJoin = 29,\r\n  LineTo = 30,\r\n  LineWidth = 31,\r\n  MiterLimit = 32,\r\n  MoveTo = 33,\r\n  QuadraticCurveTo = 34,\r\n  Rect = 35,\r\n  Restore = 36,\r\n  Rotate = 37,\r\n  Save = 38,\r\n  Scale = 39,\r\n  SetTransform = 40,\r\n  ShadowBlur = 41,\r\n  ShadowColor = 42,\r\n  ShadowOffsetX = 43,\r\n  ShadowOffsetY = 44,\r\n  Stroke = 45,\r\n  StrokeGradient = 46,\r\n  StrokePattern = 47,\r\n  StrokeRect = 48,\r\n  StrokeStyle = 49,\r\n  StrokeText = 50,\r\n  StrokeTextWidth = 51,\r\n  TextAlign = 52,\r\n  TextBaseline = 53,\r\n  Translate = 54,\r\n  Transform = 55,\r\n}\r\n","/**\r\n * The CanvasRenderingContext2D.direction value of the Canvas 2D API specifies the current text\r\n * direction used to draw text onto the canvas.\r\n */\r\nexport enum CanvasDirection {\r\n  /**\r\n   * The text direction is left-to-right.\r\n   */\r\n  ltr = 0,\r\n  /**\r\n   * The text direction is right-to-left.\r\n   */\r\n  rtl = 1,\r\n  /**\r\n   * The text direction is inherited from the <canvas> element or the Document as appropriate. Default value.\r\n   */\r\n  inherit = 2,\r\n}\r\n","/**\r\n * A value indicating how to repeat the pattern's image.\r\n */\r\nexport enum CanvasPatternRepetition {\r\n  /**\r\n   * A canvas pattern repetition indicating a repeating pattern in both the x and y directions.\r\n   */\r\n  repeat = 0,\r\n  /**\r\n   * A canvas pattern repetition indicating a repeating pattern only the x direction.\r\n   */\r\n  repeat_x = 1,\r\n  /**\r\n   * A canvas pattern repetition indicating a repeating pattern only the y direction.\r\n   */\r\n  repeat_y = 2,\r\n  /**\r\n   * A canvas pattern repetition indicationg no repeating pattern.\r\n   */\r\n  no_repeat = 3,\r\n}\r\n","/**\r\n * The GlobalCompositeOperation enum for the globalCompositeOperation property sets the type\r\n * of compositing operation to apply when drawing new shapes.\r\n */\r\nexport enum GlobalCompositeOperation {\r\n  /**\r\n   * This is the default setting and draws new shapes on top of the existing canvas content\r\n   */\r\n  source_over = 0,\r\n  /**\r\n   * The new shape is drawn only where both the new shape and the destination canvas overlap.\r\n   * Everything else is made transparent.\r\n   */\r\n  source_in = 1,\r\n  /**\r\n   * The new shape is drawn where it doesn't overlap the existing canvas content.\r\n   */\r\n  source_out = 2,\r\n  /**\r\n   * The new shape is only drawn where it overlaps the existing canvas content.\r\n   */\r\n  source_atop = 3,\r\n  /**\r\n   * New shapes are drawn behind the existing canvas content.\r\n   */\r\n  destination_over = 4,\r\n  /**\r\n   * The existing canvas content is kept where both the new shape and existing canvas content\r\n   * overlap. Everything else is made transparent.\r\n   */\r\n  destination_in = 5,\r\n  /**\r\n   * The existing content is kept where it doesn't overlap the new shape.\r\n   */\r\n  destination_out = 6,\r\n  /**\r\n   * The existing canvas is only kept where it overlaps the new shape. The new shape is drawn\r\n   * behind the canvas content.\r\n   */\r\n  destination_atop = 7,\r\n  /**\r\n   * Where both shapes overlap the color is determined by adding color values.\r\n   */\r\n  lighter = 8,\r\n  /**\r\n   * Only the new shape is shown.\r\n   */\r\n  copy = 9,\r\n  /**\r\n   * Shapes are made transparent where both overlap and drawn normal everywhere else.\r\n   */\r\n  xor = 10,\r\n  /**\r\n   * The pixels are of the top layer are multiplied with the corresponding pixel of the bottom\r\n   * layer. A darker picture is the result.\r\n   */\r\n  multiply = 11,\r\n  /**\r\n   * The pixels are inverted, multiplied, and inverted again. A lighter picture is the result\r\n   * (opposite of multiply)\r\n   */\r\n  screen = 12,\r\n  /**\r\n   * A combination of multiply and screen. Dark parts on the base layer become darker, and light\r\n   * parts become lighter.\r\n   */\r\n  overlay = 13,\r\n  /**\r\n   * Retains the darkest pixels of both layers.\r\n   */\r\n  darken = 14,\r\n  /**\r\n   * Retains the lightest pixels of both layers.\r\n   */\r\n  lighten = 15,\r\n  /**\r\n   * Divides the bottom layer by the inverted top layer.\r\n   */\r\n  color_dodge = 16,\r\n  /**\r\n   * Divides the inverted bottom layer by the top layer, and then inverts the result.\r\n   */\r\n  color_burn = 17,\r\n  /**\r\n   * A combination of multiply and screen like overlay, but with top and bottom layer swapped.\r\n   */\r\n  hard_light = 18,\r\n  /**\r\n   * A softer version of hard-light. Pure black or white does not result in pure black or white.\r\n   */\r\n  soft_light = 19,\r\n  /**\r\n   * Subtracts the bottom layer from the top layer or the other way round to always get a positive\r\n   * value.\r\n   */\r\n  difference = 20,\r\n  /**\r\n   * Like difference, but with lower contrast.\r\n   */\r\n  exclusion = 21,\r\n  /**\r\n   * Preserves the luma and chroma of the bottom layer, while adopting the hue of the top layer.\r\n   */\r\n  hue = 22,\r\n  /**\r\n   * Preserves the luma and hue of the bottom layer, while adopting the chroma of the top layer.\r\n   */\r\n  saturation = 23,\r\n  /**\r\n   * Preserves the luma of the bottom layer, while adopting the hue and chroma of the top layer.\r\n   */\r\n  color = 24,\r\n  /**\r\n   * Preserves the hue and chroma of the bottom layer, while adopting the luma of the top layer.\r\n   */\r\n  luminosity = 25,\r\n}\r\n","export enum ImageSmoothingQuality {\r\n  low = 0,\r\n  medium = 1,\r\n  high = 2,\r\n}\r\n","export enum LineCap {\r\n  butt = 0,\r\n  round = 1,\r\n  square = 2,\r\n}\r\n","/**\r\n * The LineJoin enum responsible for setting the lineJoin property of the Canvas 2D API determines\r\n * the shape used to join two line segments where they meet.\r\n *\r\n * This property has no effect wherever two connected segments have the same direction, because no\r\n * joining area will be added in this case. Degenerate segments with a length of zero (i.e., with\r\n * all endpoints and control points at the exact same position) are also ignored.\r\n */\r\nexport enum LineJoin {\r\n  /**\r\n   * Rounds off the corners of a shape by filling an additional sector of disc centered at the\r\n   * common endpoint of connected segments. The radius for these rounded corners is equal to the\r\n   * line width.\r\n   */\r\n  bevel = 0,\r\n  /**\r\n   * Fills an additional triangular area between the common endpoint of connected segments, and the\r\n   * separate outside rectangular corners of each segment.\r\n   */\r\n  round = 1,\r\n  /**\r\n   * Connected segments are joined by extending their outside edges to connect at a single point,\r\n   * with the effect of filling an additional lozenge-shaped area. This setting is affected by the\r\n   * miterLimit property. Default value.\r\n   */\r\n  miter = 2,\r\n}\r\n","/**\r\n * The TextAlign enum specifies the current text alignment used when drawing text.\r\n *\r\n * The alignment is relative to the x value of the fillText() method. For example, if textAlign is\r\n * \"center\", then the text's left edge will be at x - (textWidth / 2).\r\n */\r\nexport enum TextAlign {\r\n  /**\r\n   * The text is left-aligned.\r\n   **/\r\n  left = 0,\r\n  /**\r\n   * The text is right-aligned.\r\n   **/\r\n  right = 1,\r\n  /**\r\n   * The text is centered.\r\n   **/\r\n  center = 2,\r\n  /**\r\n   * The text is aligned at the normal start of the line (left-aligned for left-to-right locales, right-aligned for right-to-left locales).\r\n   **/\r\n  start = 3,\r\n  /**\r\n   * The text is aligned at the normal end of the line (right-aligned for left-to-right locales, left-aligned for right-to-left locales).\r\n   **/\r\n  end = 4,\r\n}\r\n","/**\r\n * The TextBasline enum specifies the current text baseline used when drawing text.\r\n */\r\nexport enum TextBaseline {\r\n  /**\r\n   * The text baseline is the top of the em square.\r\n   **/\r\n  top = 0,\r\n  /**\r\n   * The text baseline is the hanging baseline. (Used by Tibetan and other Indic scripts.)\r\n   **/\r\n  hanging = 1,\r\n  /**\r\n   * The text baseline is the middle of the em square.\r\n   **/\r\n  middle = 2,\r\n  /**\r\n   * The text baseline is the normal alphabetic baseline. Default value.\r\n   **/\r\n  alphabetic = 3,\r\n  /**\r\n   * The text baseline is the ideographic baseline; this is the bottom of the body of the characters, if the main body of characters protrudes beneath the alphabetic baseline. (Used by Chinese, Japanese, and Korean scripts.)\r\n   **/\r\n  ideographic = 4,\r\n  /**\r\n   * The text baseline is the bottom of the bounding box. This differs from the ideographic baseline in that the ideographic baseline doesn't consider descenders.\r\n   **/\r\n  bottom = 5,\r\n}\r\n","export enum FillRule {\r\n  nonzero = 0,\r\n  evenodd = 1,\r\n}\r\n","//#endregion EXTERNALS\r\nexport const enum FillStrokeStyleType {\r\n  String = 0,\r\n  CanvasPattern = 1,\r\n  CanvasGradient = 2\r\n}\r\n","import { CanvasInstruction } from \"../../src/shared/CanvasInstruction\";\r\nimport { Buffer } from \"../internal/Buffer\";\r\nimport { DOMMatrix } from \"./DOMMatrix\";\r\nimport { CanvasDirection } from \"../../src/shared/CanvasDirection\";\r\nimport { CanvasPattern } from \"./CanvasPattern\";\r\nimport { CanvasGradient } from \"./CanvasGradient\";\r\nimport { Image, getImageID } from \"./Image\";\r\nimport { CanvasPatternRepetition } from \"../../src/shared/CanvasPatternRepetition\";\r\nimport { GlobalCompositeOperation } from \"../../src/shared/GlobalCompositeOperation\";\r\nimport { ImageSmoothingQuality } from \"../../src/shared/ImageSmoothingQuality\";\r\nimport { LineCap } from \"../../src/shared/LineCap\";\r\nimport { LineJoin } from \"../../src/shared/LineJoin\";\r\nimport { TextAlign } from \"../../src/shared/TextAlign\";\r\nimport { TextBaseline } from \"../../src/shared/TextBaseline\";\r\nimport { arraysEqual } from \"../internal/util\";\r\nimport { Path2DElement } from \"../internal/Path2DElement\";\r\nimport { FillRule } from \"../../src/shared/FillRule\";\r\nimport { STORE, LOAD } from \"../internal/util\";\r\nimport { StackPointer } from \"../internal/StackPointer\";\r\nimport { CanvasStack } from \"./CanvasStack\";\r\nimport { FillStrokeStyleType } from \"../internal/FillStrokeStyleType\";\r\n\r\n// @ts-ignore: linked functions can have decorators\r\n@external(\"__canvas_sys\", \"render\")\r\ndeclare function render(ctxid: i32, data: usize): void;\r\n\r\n// @ts-ignore: linked functions can have decorators\r\n@external(\"__canvas_sys\", \"createLinearGradient\")\r\ndeclare function createLinearGradient(id: i32, x0: f64, y0: f64, x1: f64, y1: f64): i32;\r\n\r\n// @ts-ignore: linked functions can have decorators\r\n@external(\"__canvas_sys\", \"createRadialGradient\")\r\ndeclare function createRadialGradient(id: i32, x0: f64, y0: f64, r0: f64, x1: f64, y1: f64, r1: f64): i32;\r\n\r\n// @ts-ignore: linked functions can have decorators\r\n@external(\"__canvas_sys\", \"createPattern\")\r\ndeclare function createPattern(ctxid: i32, imageid: i32, repetition: CanvasPatternRepetition): i32;\r\n\r\n// @ts-ignore: linked functions can have decorators\r\n@external(\"__canvas_sys\", \"measureText\")\r\ndeclare function measureText(id: i32, text: string): f64;\r\n\r\n// @ts-ignore: linked functions can have decorators\r\n@external(\"__canvas_sys\", \"isPointInPath\")\r\ndeclare function isPointInPath(id: i32, x: f64, y: f64, fillRule: FillRule): bool;\r\n\r\n// @ts-ignore: linked functions can have decorators\r\n@external(\"__canvas_sys\", \"isPointInStroke\")\r\ndeclare function isPointInStroke(id: i32, x: f64, y: f64): bool;\r\nvar defaultBlack: string = \"#000\";\r\nvar defaultNone: string = \"none\";\r\nvar defaultFont: string = \"10px sans-serif\";\r\nvar defaultShadowColor: string = \"rgba(0, 0, 0, 0)\";\r\nvar defaultLineDash: Float64Array = new Float64Array(0);\r\n\r\n//#region ARRAYBUFFERINITIALIZER\r\n/**\r\n * Utility function for setting the given ArrayBuffer to the identity 2d transform matrix inline.\r\n *\r\n * @param ArrayBuffer buff\r\n */\r\n// @ts-ignore: Decorators are valid here\r\nfunction setArrayBufferIdentity(buff: usize): usize {\r\n  STORE<f64>(buff, 0, 1.0);\r\n  STORE<f64>(buff, 1, 0.0);\r\n  STORE<f64>(buff, 2, 0.0);\r\n  STORE<f64>(buff, 3, 1.0);\r\n  STORE<f64>(buff, 4, 0.0);\r\n  STORE<f64>(buff, 5, 0.0);\r\n  return buff;\r\n}\r\n\r\nfunction initializeStackPointer(pointer: StackPointer<CanvasStack>): StackPointer<CanvasStack> {\r\n  let stack = pointer.reference();\r\n  stack.a = 1;\r\n  stack.d = 1;\r\n  stack.direction = CanvasDirection.inherit;\r\n  stack.fillStyleType = FillStrokeStyleType.String;\r\n  stack.fillStyleString = defaultBlack;\r\n  __retain(changetype<usize>(defaultBlack));\r\n  stack.filter = defaultNone;\r\n  __retain(changetype<usize>(defaultNone));\r\n  stack.font = defaultFont;\r\n  __retain(changetype<usize>(defaultFont));\r\n  stack.globalAlpha = 1.0;\r\n  stack.globalCompositeOperation = GlobalCompositeOperation.source_over;\r\n  stack.imageSmoothingEnabled = true;\r\n  stack.imageSmoothingQuality = ImageSmoothingQuality.low;\r\n  stack.lineCap = LineCap.butt;\r\n  stack.lineDash = defaultLineDash;\r\n  stack.lineJoin = LineJoin.miter;\r\n  stack.lineWidth = 1.0;\r\n  stack.miterLimit = 10.0;\r\n  stack.shadowBlur = 0.0;\r\n  stack.shadowColor = defaultShadowColor;\r\n  stack.strokeStyleString = defaultBlack;\r\n  __retain(changetype<usize>(defaultBlack));\r\n  __retain(changetype<usize>(defaultShadowColor));\r\n  return pointer;\r\n}\r\n\r\n\r\n/** The path element initializer. */\r\nfunction createPathElements(): StackPointer<Path2DElement> {\r\n  let pointer = StackPointer.create<Path2DElement>(0x1000);\r\n  let reference = pointer.reference();\r\n  reference.instruction = CanvasInstruction.BeginPath;\r\n  reference.count = 0;\r\n  reference.updateTransform = true;\r\n  reference.transformA = 1.0;\r\n  reference.transformD = 1.0;\r\n  return pointer;\r\n}\r\n\r\n/**\r\n * An AssemblyScript virtual representation of an actual CanvasRenderingContext2D Object. The\r\n * CanvasRenderingContext2D interface, part of the Canvas API, provides the 2D rendering context\r\n * for the drawing surface of a <canvas> element. It is used for drawing shapes, text, images, and\r\n * other objects.\r\n */\r\n@sealed\r\nexport class CanvasRenderingContext2D extends Buffer<CanvasInstruction> {\r\n  /**\r\n   * The component's external object id. It initializes to -1, which will never be an actual object\r\n   * id externally. If it actually returns -1, it will cause the host to error saying it cannot\r\n   * find the specified canvas context.\r\n   */\r\n  private id: i32 = -1;\r\n\r\n  /**\r\n   * The virutal stack index offset that keeps track of the number of `save()` and `restore()`\r\n   * stack states.\r\n   */\r\n  private _stackOffset: u8 = <u8>0;\r\n\r\n  //#region CREATELINEARGRADIENT\r\n  /**\r\n   * The CanvasRenderingContext2D.createLinearGradient() method of the Canvas 2D API creates a\r\n   * gradient along the line connecting two given coordinates.\r\n   *\r\n   * @param {f64} x0 - A float number representing the first x coordinate point of the gradient.\r\n   * @param {f64} y0 - A float number representing the first y coordinate point of the gradient.\r\n   * @param {f64} x1 - A float number representing the second x coordinate point of the gradient.\r\n   * @param {f64} y1 - A float number representing the second y coordinate point of the gradient.\r\n   */\r\n  public createLinearGradient(x0: f64, y0: f64, x1: f64, y1: f64): CanvasGradient {\r\n    var id: i32 = createLinearGradient(this.id, x0, y0, x1, y1);\r\n    var result: CanvasGradient = new CanvasGradient();\r\n    store<i32>(changetype<usize>(result), id, offsetof<CanvasGradient>(\"id\"));\r\n    return result;\r\n  }\r\n  //#endregion CREATELINEARGRADIENT\r\n\r\n  //#region CREATERADIALGRADIENT\r\n  /**\r\n   * The CanvasRenderingContext2D.createRadialGradient() method of the Canvas 2D API creates a\r\n   * radial gradient using the size and coordinates of two circles.\r\n   *\r\n   * @param {f64} x0 - The x-axis coordinate of the start circle.\r\n   * @param {f64} y0 - The y-axis coordinate of the start circle.\r\n   * @param {f64} r0 - The radius of the start circle. Must be non-negative and finite.\r\n   * @param {f64} x1 - The x-axis coordinate of the end circle.\r\n   * @param {f64} y1 - The y-axis coordinate of the end circle.\r\n   * @param {f64} r1 - The radius of the end circle. Must be non-negative and finite.\r\n   */\r\n  public createRadialGradient(x0: f64, y0: f64, r0: f64, x1: f64, y1: f64, r1: f64): CanvasGradient {\r\n    var id: i32 = createRadialGradient(this.id, x0, y0, r0, x1, y1, r1);\r\n    var result: CanvasGradient = new CanvasGradient();\r\n    store<i32>(changetype<usize>(result), id, offsetof<CanvasGradient>(\"id\"));\r\n    return result;\r\n  }\r\n  //#endregion CREATERADIALGRADIENT\r\n\r\n  private _stack: StackPointer<CanvasStack> = initializeStackPointer(StackPointer.create<CanvasStack>(0xFF));\r\n\r\n  //#region TRANSFORM\r\n\r\n  /**\r\n   * An ArrayBuffer that contains a single transform value that represents the last transform\r\n   * written by a `setTransform()` operation\r\n   */\r\n  private _currentTransform: ArrayBuffer = changetype<ArrayBuffer>(setArrayBufferIdentity(__alloc(sizeof<f64>() * 6, idof<ArrayBuffer>())));\r\n\r\n  /**\r\n   * An operation that generates a DOMMatrix reflecting the current transform on the `_transformStack\r\n   */\r\n  @inline\r\n  private _getTransform(): DOMMatrix {\r\n    var result: DOMMatrix = new DOMMatrix();\r\n    var stack = this._stack.reference();\r\n    result.m11 = stack.a;\r\n    result.m12 = stack.b;\r\n    result.m21 = stack.c;\r\n    result.m22 = stack.d;\r\n    result.m41 = stack.e;\r\n    result.m42 = stack.f;\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * An function that sets the current transform on the `_transformStack` to the specified\r\n   * DOMMatrix values.\r\n   *\r\n   * @param {f64} a - The a property of the transform matrix.\r\n   * @param {f64} b - The b property of the transform matrix.\r\n   * @param {f64} c - The c property of the transform matrix.\r\n   * @param {f64} d - The d property of the transform matrix.\r\n   * @param {f64} e - The e property of the transform matrix.\r\n   * @param {f64} f - The f property of the transform matrix.\r\n   */\r\n  @inline\r\n  private _setTransform(a: f64, b: f64, c: f64, d: f64, e: f64, f: f64): void {\r\n    var stack = this._stack.reference();\r\n    stack.a = a;\r\n    stack.b = b;\r\n    stack.c = c;\r\n    stack.d = d;\r\n    stack.e = e;\r\n    stack.f = f;\r\n  }\r\n\r\n  /**\r\n   * The CanvasRenderingContext2D.currentTransform property of the Canvas 2D API returns or sets a\r\n   * DOMMatrix (current specification) object for the current transformation matrix\r\n  */\r\n  public get currentTransform(): DOMMatrix {\r\n    return this._getTransform();\r\n  }\r\n\r\n  public set currentTransform(value: DOMMatrix) {\r\n    this._setTransform(value.m11, value.m12, value.m21, value.m22, value.m41, value.m42);\r\n  }\r\n\r\n  /**\r\n   * The CanvasRenderingContext2D.getTransform() method of the Canvas 2D API gets the current\r\n   * transformation matrix, and returns a DOMMatrix\r\n   */\r\n  public getTransform(): DOMMatrix {\r\n    return this._getTransform();\r\n  }\r\n\r\n  /**\r\n   * An internal function that writes the current transform value on the _transformStack to the\r\n   * buffer if it currently does not match the last written transform.\r\n   */\r\n  private _updateTransform(): void {\r\n    var stack = this._stack.reference();\r\n    var a = stack.a;\r\n    var b = stack.b;\r\n    var c = stack.c;\r\n    var d = stack.d;\r\n    var e = stack.e;\r\n    var f = stack.f;\r\n\r\n    var current = changetype<usize>(this._currentTransform);\r\n    if ( a != LOAD<f64>(current, 0)\r\n      || b != LOAD<f64>(current, 1)\r\n      || c != LOAD<f64>(current, 2)\r\n      || d != LOAD<f64>(current, 3)\r\n      || e != LOAD<f64>(current, 4)\r\n      || f != LOAD<f64>(current, 5)) {\r\n      super._writeSix(CanvasInstruction.SetTransform, a, b, c, d, e, f);\r\n      STORE<f64>(current, 0, a);\r\n      STORE<f64>(current, 1, b);\r\n      STORE<f64>(current, 2, c);\r\n      STORE<f64>(current, 3, d);\r\n      STORE<f64>(current, 4, e);\r\n      STORE<f64>(current, 5, f);\r\n    }\r\n  }\r\n  //#endregion TRANSFORM\r\n\r\n  //#region DIRECTION\r\n\r\n  /**\r\n   * A private member that contains a single CanvasDirection value that represents the last\r\n   * CanvasDirection value written by a drawing operation\r\n   */\r\n  private _currentDirection: CanvasDirection = CanvasDirection.inherit;\r\n\r\n  /**\r\n   * The CanvasRenderingContext2D.direction property of the Canvas 2D API specifies the current text\r\n   * direction used to draw text\r\n   */\r\n  public get direction(): CanvasDirection {\r\n    return this._stack.reference().direction;\r\n  }\r\n\r\n  public set direction(value: CanvasDirection) {\r\n    this._stack.reference().direction = value;\r\n  }\r\n\r\n  /**\r\n   * An internal function that writes the current CanvasDirection value on the _directionStack to\r\n   * the buffer if it currently does not match the last written CanvasDirection.\r\n   */\r\n  @inline\r\n  private _updateDirection(): void {\r\n    var value: CanvasDirection = this._stack.reference().direction;\r\n    if (value != this._currentDirection) {\r\n      this._currentDirection = value;\r\n      super._writeOne(CanvasInstruction.Direction, <f64>value);\r\n    }\r\n  }\r\n  //#endregion DIRECTION\r\n\r\n  //#region FILLSTYLE\r\n  /**\r\n   * A private member that contains a single StrokeFillStyleType value that represents the last\r\n   * fillStyle value written by a drawing operation\r\n   */\r\n  private _currentFillStyleType: FillStrokeStyleType = FillStrokeStyleType.String;\r\n\r\n  /**\r\n   * A private member that contains a single pointer or id value that represents the last\r\n   * fillStyle value written by a drawing operation\r\n   */\r\n  private _currentFillStyleValue: usize = changetype<usize>(defaultBlack);\r\n\r\n  /**\r\n   * The CanvasRenderingContext2D.fillStyle property of the Canvas 2D API specifies the current text\r\n   * representing a CSS Color\r\n   */\r\n  public get fillStyle(): string | null {\r\n    var stack = this._stack.reference();\r\n    return stack.fillStyleType === FillStrokeStyleType.String\r\n      ? stack.fillStyleString\r\n      : null;\r\n  }\r\n\r\n  public set fillStyle(value: string | null) {\r\n    if (value == null) value = defaultBlack;\r\n    let stack = this._stack.reference();\r\n    let currentType = stack.fillStyleType;\r\n    stack.fillStyleType = FillStrokeStyleType.String;\r\n    __retain(changetype<usize>(value));\r\n    if (currentType == FillStrokeStyleType.CanvasGradient) {\r\n      __release(changetype<usize>(stack.fillStyleGradient));\r\n      stack.fillStyleGradient = null;\r\n    } else if (currentType == FillStrokeStyleType.CanvasPattern) {\r\n      __release(changetype<usize>(stack.fillStylePattern));\r\n      stack.fillStylePattern = null;\r\n    } else {\r\n      __release(changetype<usize>(stack.fillStyleString));\r\n    }\r\n    stack.fillStyleString = value!;\r\n    stack.fillStyleValue = changetype<usize>(value);\r\n  }\r\n\r\n  /**\r\n   * An internal function that writes the current fillStyle value on the _fillStyleStack to the\r\n   * buffer if it currently does not match the last written fillStyle.\r\n   */\r\n  @inline\r\n  private _updateFillStyle(): void {\r\n    var stack = this._stack.reference();\r\n    var styleType = stack.fillStyleType;\r\n\r\n    var pointer: usize = 0;\r\n    var value: f64 = 0;\r\n    if (styleType === FillStrokeStyleType.String) {\r\n      pointer = changetype<usize>(stack.fillStyleString);\r\n      value = pointer;\r\n    } else if (styleType === FillStrokeStyleType.CanvasGradient) {\r\n      pointer = changetype<usize>(stack.fillStyleGradient);\r\n      value = <f64>load<i32>(pointer, offsetof<CanvasGradient>(\"id\"));\r\n    } else if (styleType === FillStrokeStyleType.CanvasPattern) {\r\n      pointer = changetype<usize>(stack.fillStylePattern);\r\n      value = <f64>load<i32>(pointer, offsetof<CanvasPattern>(\"id\"));\r\n    }\r\n\r\n    if (styleType != this._currentFillStyleType || value != this._currentFillStyleValue) {\r\n      var inst: CanvasInstruction;\r\n      if (styleType == FillStrokeStyleType.String) inst = CanvasInstruction.FillStyle;\r\n      else if (styleType == FillStrokeStyleType.CanvasGradient) inst = CanvasInstruction.FillGradient;\r\n      else inst = CanvasInstruction.FillPattern;\r\n      super._retain(pointer);\r\n      super._writeOne(inst, <f64>value);\r\n    }\r\n  }\r\n  //#endregion FILLSTYLE\r\n\r\n  //#region FILLPATTERN\r\n  /**\r\n   * The CanvasRenderingContext2D.fillPattern property of the Canvas 2D API specifies the current\r\n   * fillStyle pattern\r\n   */\r\n  public get fillPattern(): CanvasPattern | null {\r\n    var stack = this._stack.reference();\r\n    return stack.fillStyleType === FillStrokeStyleType.CanvasPattern\r\n      ? stack.fillStylePattern\r\n      : null;\r\n  }\r\n\r\n  public set fillPattern(value: CanvasPattern | null) {\r\n    if (value == null) {\r\n      this.fillStyle = defaultBlack;\r\n      return;\r\n    }\r\n    __retain(changetype<usize>(value));\r\n    var stack = this._stack.reference();\r\n    __release(changetype<usize>(stack.fillStylePattern));\r\n    stack.fillStyleType = FillStrokeStyleType.CanvasPattern;\r\n    stack.fillStylePattern = value;\r\n    stack.fillStyleValue = <usize>load<i32>(changetype<usize>(value), offsetof<CanvasPattern>(\"id\"));\r\n  }\r\n  //#endregion FILLPATTERN\r\n\r\n  //#region FILLGRADIENT\r\n  /**\r\n   * The CanvasRenderingContext2D.fillGradient property of the Canvas 2D API specifies the current\r\n   * fillStyle gradient\r\n   */\r\n  public get fillGradient(): CanvasGradient | null {\r\n    var stack = this._stack.reference();\r\n    return stack.fillStyleType == FillStrokeStyleType.CanvasGradient\r\n      ? stack.fillStyleGradient\r\n      : null;\r\n  }\r\n\r\n  public set fillGradient(value: CanvasGradient | null) {\r\n    if (value == null) {\r\n      this.fillStyle = defaultBlack;\r\n      return;\r\n    }\r\n    __retain(changetype<usize>(value));\r\n    var stack = this._stack.reference();\r\n    stack.fillStyleType = FillStrokeStyleType.CanvasGradient;\r\n    __release(changetype<usize>(stack.fillStyleGradient));\r\n    stack.fillStyleGradient = value;\r\n    stack.fillStyleValue = <usize>load<i32>(changetype<usize>(value), offsetof<CanvasGradient>(\"id\"));\r\n  }\r\n  //#endregion FILLGRADIENT\r\n\r\n  //#region CREATEPATTERN\r\n  /**\r\n   * The CanvasRenderingContext2D.createPattern() method of the Canvas 2D API creates a pattern\r\n   * using the specified image and repetition.\r\n   *\r\n   * @param {Image} img - A CanvasImageSource to be used as the pattern's Image.\r\n   * @param {CanvasPatternRepetition} repetition - An enum value indicating how to repeat the pattern's image.\r\n   */\r\n  public createPattern(img: Image, repetition: CanvasPatternRepetition): CanvasPattern {\r\n    var result = new CanvasPattern();\r\n    var id: i32 = load<i32>(changetype<usize>(img), offsetof<Image>(\"_id\"));\r\n    store<i32>(changetype<usize>(result), createPattern(this.id, id, repetition), offsetof<CanvasPattern>(\"id\"));\r\n    return result;\r\n  }\r\n  //#endregion CREATEPATTERN\r\n\r\n  //#region FILTER\r\n  /**\r\n   * A private member that contains a single string value that represents the last\r\n   * filter value written by a drawing operation.\r\n   */\r\n  private _currentFilter: string = defaultNone;\r\n\r\n  /**\r\n   * The CanvasRenderingContext2D.filter property of the Canvas 2D API provides filter effects such\r\n   * as blurring and grayscaling. It is similar to the CSS filter property and accepts the same\r\n   * values.\r\n   */\r\n  public get filter(): string {\r\n    return this._stack.reference().filter;\r\n  }\r\n\r\n  public set filter(value: string) {\r\n    let stack = this._stack.reference();\r\n    __retain(changetype<usize>(value));\r\n    __release(changetype<usize>(stack.filter));\r\n    stack.filter = value;\r\n  }\r\n\r\n  /**\r\n   * An internal function that writes the current filter value on the _filterStack if it currently\r\n   * does not match the last written filter string value to the buffer using write_one.\r\n   */\r\n  @inline\r\n  private _updateFilter(): void {\r\n    var value: string = this._stack.reference().filter;\r\n    if (value != this._currentFilter) {\r\n      this._currentFilter = value;\r\n      super._retain(changetype<usize>(value));\r\n      super._writeOne(CanvasInstruction.Filter, changetype<usize>(value));\r\n    }\r\n  }\r\n  //#endregion FILTER\r\n\r\n  //#region FONT\r\n  /**\r\n   * A private member that contains a single string value that represents the last\r\n   * font value written by a drawing operation.\r\n   */\r\n  private _currentFont: string = defaultFont;\r\n\r\n  /**\r\n   * The CanvasRenderingContext2D.font property of the Canvas 2D API specifies the current text\r\n   * style to use when drawing text. This string uses the same syntax as the CSS font specifier.\r\n   */\r\n  public get font(): string {\r\n    return this._stack.reference().font;\r\n  }\r\n\r\n  public set font(value: string) {\r\n    let stack = this._stack.reference();\r\n    __retain(changetype<usize>(value));\r\n    __release(changetype<usize>(stack.font));\r\n    stack.font = value;\r\n  }\r\n\r\n  /**\r\n   * An internal function that writes the current font value on the _fontStack to the buffer if it\r\n   * currently does not match the last written font string value.\r\n   */\r\n  @inline\r\n  private _updateFont(): void {\r\n    var value: string = this._stack.reference().font;\r\n    if (value != this._currentFont) {\r\n      this._currentFont = value;\r\n      super._retain(changetype<usize>(value));\r\n      super._writeOne(CanvasInstruction.Font, changetype<usize>(value));\r\n    }\r\n  }\r\n  //#endregion FONT\r\n\r\n  //#region GLOBALALPHA\r\n  /**\r\n   * A private member that contains a single float value that represents the last globalAlpha value\r\n   * written by a drawing operation.\r\n   */\r\n  private _currentGlobalAlpha: f64 = 1.0;\r\n\r\n  /**\r\n   * The CanvasRenderingContext2D.globalAlpha property of the Canvas 2D API specifies the alpha\r\n   * (transparency) value that is applied to shapes and images before they are drawn onto the\r\n   * canvas.\r\n   */\r\n  public get globalAlpha(): f64 {\r\n    return this._stack.reference().globalAlpha;\r\n  }\r\n\r\n  public set globalAlpha(value: f64) {\r\n    if (!isFinite(value) || value < 0.0 || value > 1.0) return;\r\n    this._stack.reference().globalAlpha = value;\r\n  }\r\n\r\n  /**\r\n   * An internal function that writes the current globalAlpha value on the _globalAlphaStack to the\r\n   * buffer if it currently does not match the last written globalAlpha value.\r\n   */\r\n  @inline\r\n  private _updateGlobalAlpha(): void {\r\n    var value: f64 = this._stack.reference().globalAlpha;\r\n    if (value != this._currentGlobalAlpha) {\r\n      this._currentGlobalAlpha = value;\r\n      super._writeOne(CanvasInstruction.GlobalAlpha, value);\r\n    }\r\n  }\r\n  //#endregion GLOBALALPHA\r\n\r\n  //#region GLOBALCOMPOSITEOPERATION\r\n  /**\r\n   * A private member that contains a single GlobalCompositeOperation value that represents the last\r\n   * globalCompositeOperation value written by a drawing operation.\r\n   */\r\n  private _currentGlobalCompositeOperation: GlobalCompositeOperation = GlobalCompositeOperation.source_over;\r\n\r\n  /**\r\n   * The CanvasRenderingContext2D.globalCompositeOperation property of the Canvas 2D API sets the\r\n   * type of compositing operation to apply when drawing new shapes.\r\n   */\r\n  public get globalCompositeOperation(): GlobalCompositeOperation {\r\n    return this._stack.reference().globalCompositeOperation;\r\n  }\r\n\r\n  public set globalCompositeOperation(value: GlobalCompositeOperation) {\r\n    this._stack.reference().globalCompositeOperation = value;\r\n  }\r\n\r\n  /**\r\n   * An internal function that writes the current globalCompositeOperation value on the\r\n   * _globalCompositeOperationStack to the buffer if it currently does not match the last written\r\n   * globalCompositeOperation value.\r\n   */\r\n  @inline\r\n  private _updateGlobalCompositeOperation(): void {\r\n    var value: GlobalCompositeOperation = this._stack.reference().globalCompositeOperation;\r\n    if (value != this._currentGlobalCompositeOperation) {\r\n      this._currentGlobalCompositeOperation = value;\r\n      super._writeOne(CanvasInstruction.GlobalCompositeOperation, <f64>value);\r\n    }\r\n  }\r\n  //#endregion GLOBALCOMPOSITEOPERATION\r\n\r\n  //#region IMAGESMOOTHINGENABLED\r\n\r\n  /**\r\n   * A private member that contains a single bool value that represents the last\r\n   * imageSmoothingEnabled value written by a drawing operation.\r\n   */\r\n  private _currentImageSmoothingEnabled: bool = true;\r\n\r\n  /**\r\n   * The imageSmoothingEnabled property of the CanvasRenderingContext2D interface, part of the\r\n   * Canvas API, determines whether scaled images are smoothed (true, default) or not (false). On\r\n   * getting the imageSmoothingEnabled property, the last value it was set to is returned.\r\n   */\r\n  public get imageSmoothingEnabled(): bool {\r\n    return this._stack.reference().imageSmoothingEnabled;\r\n  }\r\n\r\n  public set imageSmoothingEnabled(value: bool) {\r\n    this._stack.reference().imageSmoothingEnabled = value;\r\n  }\r\n\r\n  /**\r\n   * An internal function that writes the current imageSmoothingEnabled value on the\r\n   * _imageSmoothingEnabledStack to the buffer if it currently does not match the last written\r\n   * imageSmoothingEnabled value.\r\n   */\r\n  @inline\r\n  private _updateImageSmoothingEnabled(): void {\r\n    var value: bool = this._stack.reference().imageSmoothingEnabled;\r\n    if (value != this._currentImageSmoothingEnabled) {\r\n      this._currentImageSmoothingEnabled = value;\r\n      super._writeOne(CanvasInstruction.ImageSmoothingEnabled, value ? 1.0 : 0.0);\r\n    }\r\n  }\r\n  //#endregion IMAGESMOOTHINGENABLED\r\n\r\n  //#region IMAGESMOOTHINGQUALITY\r\n  /**\r\n   * A private member that contains a single ImageSmoothingQuality value that represents the last\r\n   * imageSmoothingQuality value written by a drawing operation.\r\n   */\r\n  private _currentImageSmoothingQuality: ImageSmoothingQuality = ImageSmoothingQuality.low;\r\n\r\n  /**\r\n   * The imageSmoothingQuality property of the CanvasRenderingContext2D interface, part of the\r\n   * Canvas API, lets you set the quality of image smoothing.\r\n   */\r\n  public get imageSmoothingQuality(): ImageSmoothingQuality {\r\n    return this._stack.reference().imageSmoothingQuality;\r\n  }\r\n\r\n  public set imageSmoothingQuality(value: ImageSmoothingQuality) {\r\n    this._stack.reference().imageSmoothingQuality = value;\r\n  }\r\n\r\n  /**\r\n   * An internal function that writes the current imageSmoothingQuality value on the\r\n   * _imageSmoothingQualityStack to the buffer if it currently does not match the last written\r\n   * imageSmoothingQuality value, and imageSmoothingEnabled is true.\r\n   */\r\n  @inline\r\n  private _updateImageSmoothingQuality(): void {\r\n    let stack = this._stack.reference();\r\n    let enabled = stack.imageSmoothingEnabled;\r\n    if (enabled) {\r\n      let value = stack.imageSmoothingQuality;\r\n      if (value != this._currentImageSmoothingQuality) {\r\n        this._currentImageSmoothingQuality = value;\r\n        super._writeOne(CanvasInstruction.ImageSmoothingQuality, <f64>value);\r\n      }\r\n    }\r\n  }\r\n  //#endregion IMAGESMOOTHINGQUALITY\r\n\r\n  //#region LINECAP\r\n  /**\r\n   * A private member that contains a single LineCap value that represents the last\r\n   * lineCap value written by a drawing operation.\r\n   */\r\n  private _currentLineCap: LineCap = LineCap.butt;\r\n\r\n  /**\r\n   * The CanvasRenderingContext2D.lineCap property of the Canvas 2D API determines the shape used\r\n   * to draw the end points of lines.\r\n   */\r\n  public get lineCap(): LineCap {\r\n    return this._stack.reference().lineCap;\r\n  }\r\n\r\n  public set lineCap(value: LineCap) {\r\n    this._stack.reference().lineCap = value;\r\n  }\r\n\r\n  /**\r\n   * An internal function that writes the current lineCap value on the _lineCapStack to the buffer\r\n   * if it currently does not match the last written lineCap value.\r\n   */\r\n  @inline\r\n  private _updateLineCap(): void {\r\n    var value: LineCap = this._stack.reference().lineCap;\r\n    if (value != this._currentLineCap) {\r\n      this._currentLineCap = value;\r\n      super._writeOne(CanvasInstruction.LineCap, <f64>value);\r\n    }\r\n  }\r\n  //#endregion LINECAP\r\n\r\n  //#region LINEDASH\r\n  /**\r\n   * A private member that contains a single LineCap value that represents the last\r\n   * lineCap value written by a drawing operation.\r\n   */\r\n  private _currentLineDash: Float64Array = defaultLineDash;\r\n\r\n  /**\r\n   * The getLineDash() method of the Canvas 2D API's CanvasRenderingContext2D interface gets the\r\n   * current line dash pattern.\r\n   */\r\n  public getLineDash(): Float64Array {\r\n    return this._getLineDash();\r\n  }\r\n\r\n  /**\r\n   * The setLineDash() method of the Canvas 2D API's CanvasRenderingContext2D interface sets the\r\n   * line dash pattern used when stroking lines. It uses a Float64Array of values that specify\r\n   * alternating lengths of lines and gaps which describe the pattern.\r\n   *\r\n   * @param {Float64Array} value - An Array of numbers that specify distances to alternately draw a\r\n   * line and a gap (in coordinate space units). If the number of elements in the array is odd, the\r\n   * elements of the array get copied and concatenated. For example, Float64Array [5, 15, 25] will\r\n   * become Float64Array [5, 15, 25, 5, 15, 25]. If the array is empty, the line dash list is\r\n   * cleared and line strokes return to being solid.\r\n   */\r\n  public setLineDash(value: Float64Array): void {\r\n    let stack = this._stack.reference();\r\n    __release(changetype<usize>(stack.lineDash));\r\n    __retain(changetype<usize>(value));\r\n    stack.lineDash = value;\r\n  }\r\n\r\n  /**\r\n   * An internal getLineDash function that loops backwards from the current stackOffset until it\r\n   * doesn't find a null pointer, then returns the reference.\r\n   */\r\n  @inline\r\n  private _getLineDash(): Float64Array {\r\n    return this._stack.reference().lineDash;\r\n  }\r\n\r\n  /**\r\n   * An internal function that writes the current lineDash value on the _lineDashStack to the buffer\r\n   * if it currently does not match the last written lineCap value.\r\n   */\r\n  @inline\r\n  private _updateLineDash(): void {\r\n    var lineDash: Float64Array = this._getLineDash();\r\n    var current: Float64Array = this._currentLineDash;\r\n\r\n    if (!arraysEqual(current, lineDash)) {\r\n      this._currentLineDash = lineDash;\r\n      let pointer = changetype<usize>(lineDash);\r\n      super._retain(pointer);\r\n      super._writeOne(CanvasInstruction.LineDash, <f64>pointer);\r\n    }\r\n  }\r\n  //#endregion LINEDASH\r\n\r\n  //#region LINEDASHOFFSET\r\n  /**\r\n   * A private member that contains a single float value that represents the last lineDashOffset value\r\n   * written by a drawing operation.\r\n   */\r\n  private _currentLineDashOffset: f64 = 0.0;\r\n\r\n  /**\r\n   * The CanvasRenderingContext2D.lineDashOffset property of the Canvas 2D API sets the line dash\r\n   * offset, or \"phase.\"\r\n   */\r\n  public get lineDashOffset(): f64 {\r\n    return this._stack.reference().lineDashOffset;\r\n  }\r\n\r\n  public set lineDashOffset(value: f64) {\r\n    if (!isFinite(value)) return;\r\n    this._stack.reference().lineDashOffset = value;\r\n  }\r\n\r\n  /**\r\n   * An internal function that writes the current lineDashOffset value on the _lineDashOffsetStack\r\n   * to the buffer if it currently does not match the last written lineDashOffset value.\r\n   */\r\n  @inline\r\n  private _updateLineDashOffset(): void {\r\n    var value: f64 = this._stack.reference().lineDashOffset;\r\n    if (value != this._currentLineDashOffset) {\r\n      this._currentLineDashOffset = value;\r\n      super._writeOne(CanvasInstruction.LineDashOffset, value);\r\n    }\r\n  }\r\n  //#endregion LINEDASHOFFSET\r\n\r\n  //#region LINEJOIN\r\n  /**\r\n   * A private member that contains a single LineJoin value that represents the last\r\n   * lineJoin value written by a drawing operation.\r\n   */\r\n  private _currentLineJoin: LineJoin = LineJoin.miter;\r\n\r\n  /**\r\n   * The CanvasRenderingContext2D.lineJoin property of the Canvas 2D API determines the shape used\r\n   * to join two line segments where they meet.\r\n   *\r\n   * This property has no effect wherever two connected segments have the same direction, because\r\n   * no joining area will be added in this case. Degenerate segments with a length of zero (i.e.,\r\n   * with all endpoints and control points at the exact same position) are also ignored.\r\n   */\r\n  public get lineJoin(): LineJoin {\r\n    return this._stack.reference().lineJoin;\r\n  }\r\n\r\n  public set lineJoin(value: LineJoin) {\r\n    this._stack.reference().lineJoin = value;\r\n  }\r\n\r\n  /**\r\n   * An internal function that writes the current lineJoin value on the  _lineJoinStack if it\r\n   * currently does not match the last written lineJoin value.\r\n   */\r\n  @inline\r\n  private _updateLineJoin(): void {\r\n    var value: LineJoin = this._stack.reference().lineJoin;\r\n    if (value != this._currentLineJoin) {\r\n      this._currentLineJoin = value;\r\n      super._writeOne(CanvasInstruction.LineJoin, <f64>value);\r\n    }\r\n  }\r\n  //#endregion\r\n\r\n  //#region LINEWIDTH\r\n  /**\r\n   * A private member that contains a single float value that represents the last lineWidth value\r\n   * written by a drawing operation.\r\n   */\r\n  private _currentLineWidth: f64 = 1.0;\r\n\r\n  /**\r\n   * The CanvasRenderingContext2D.lineWidth property of the Canvas 2D API sets the line dash\r\n   * offset, or \"phase.\"\r\n   */\r\n  public get lineWidth(): f64 {\r\n    return this._stack.reference().lineWidth;\r\n  }\r\n\r\n  public set lineWidth(value: f64) {\r\n    if (!isFinite(value) || value < 0) return;\r\n    this._stack.reference().lineWidth = value;\r\n  }\r\n\r\n  /**\r\n   * An internal function that writes the current lineWidth value on the _lineWidthStack to the\r\n   * buffer if it currently does not match the last written lineWidth value.\r\n   */\r\n  @inline\r\n  private _updateLineWidth(): void {\r\n    var value: f64 = this._stack.reference().lineWidth;\r\n    if (value != this._currentLineWidth) {\r\n      this._currentLineWidth = value;\r\n      super._writeOne(CanvasInstruction.LineWidth, value);\r\n    }\r\n  }\r\n  //#endregion\r\n\r\n  //#region MITERLIMIT\r\n  /**\r\n   * A private member that contains a single float value that represents the last miterLimit value\r\n   * written by a drawing operation.\r\n   */\r\n  private _currentMiterLimit: f64 = 10.0;\r\n\r\n  /**\r\n   * The CanvasRenderingContext2D.miterLimit property of the Canvas 2D API sets the miter limit\r\n   * ratio. It establishes a limit on the miter when two lines join at a sharp angle, to let you\r\n   * control how thick the junction becomes.\r\n   */\r\n  public get miterLimit(): f64 {\r\n    return this._stack.reference().miterLimit;\r\n  }\r\n\r\n  public set miterLimit(value: f64) {\r\n    if (!isFinite(value) || value < 0) return;\r\n    this._stack.reference().miterLimit = value;\r\n  }\r\n\r\n  /**\r\n   * An internal function that writes the current miterLimit value on the _miterLimitStack to the\r\n   * buffer if it currently does not match the last written miterLimit value.\r\n   */\r\n  @inline\r\n  private _updateMiterLimit(): void {\r\n    var value: f64 = this._stack.reference().miterLimit;\r\n    if (value != this._currentMiterLimit) {\r\n      this._currentMiterLimit = value;\r\n      super._writeOne(CanvasInstruction.MiterLimit, value);\r\n    }\r\n  }\r\n  //#endregion MITERLIMIT\r\n\r\n  //#region SHADOWBLUR\r\n  /**\r\n   * A private member that contains a single float value that represents the last shadowBlur value\r\n   * written by a drawing operation.\r\n   */\r\n  private _currentShadowBlur: f64 = 0.0;\r\n\r\n  /**\r\n   * The CanvasRenderingContext2D.shadowBlur property of the Canvas 2D API specifies the amount of\r\n   * blur applied to shadows. The default is 0 (no blur).\r\n   *\r\n   * The shadowBlur value is a non-negative float specifying the level of shadow blur, where 0\r\n   * represents no blur and larger numbers represent increasingly more blur. This value doesn't\r\n   * correspond to a number of pixels, and is not affected by the current transformation matrix. The\r\n   * default value is 0. Negative, Infinity, and NaN values are ignored.\r\n   */\r\n  public get shadowBlur(): f64 {\r\n    return this._stack.reference().shadowBlur;\r\n  }\r\n\r\n  public set shadowBlur(value: f64) {\r\n    if (!isFinite(value) || value < 0) return;\r\n    this._stack.reference().shadowBlur = value;\r\n  }\r\n\r\n  /**\r\n   * An internal function that writes the current shadowBlur value on the _shadowBlurStack to the\r\n   * buffer if it currently does not match the last written shadowBlur value.\r\n   */\r\n  @inline\r\n  private _updateShadowBlur(): void {\r\n    var value: f64 = this._stack.reference().shadowBlur;\r\n    if (value != this._currentShadowBlur) {\r\n      this._currentShadowBlur = value;\r\n      super._writeOne(CanvasInstruction.ShadowBlur, value);\r\n    }\r\n  }\r\n  //#endregion SHADOWBLUR\r\n\r\n  //#region SHADOWCOLOR\r\n  /**\r\n   * A private member that contains a single StrokeShadowColorType value that represents the last\r\n   * shadowColor value written by a drawing operation\r\n   */\r\n  private _currentShadowColor: string = defaultShadowColor;\r\n\r\n  /**\r\n   * The CanvasRenderingContext2D.shadowColor property of the Canvas 2D API specifies the current text\r\n   * representing a CSS Color\r\n   */\r\n  public get shadowColor(): string {\r\n    return this._stack.reference().shadowColor;\r\n  }\r\n\r\n  public set shadowColor(value: string) {\r\n    if (value == null) value = defaultShadowColor;\r\n    var stack = this._stack.reference();\r\n    __retain(changetype<usize>(value));\r\n    __release(changetype<usize>(stack.shadowColor));\r\n    stack.shadowColor = value;\r\n  }\r\n\r\n  /**\r\n   * An internal function that writes the current shadowColor value on the _shadowColorStack to the\r\n   * buffer if it currently does not match the last written shadowColor.\r\n   */\r\n  @inline\r\n  private _updateShadowColor(): void {\r\n    var value: string = this._stack.reference().shadowColor;\r\n    if (value != this._currentShadowColor) {\r\n      this._currentFilter = value;\r\n      super._retain(changetype<usize>(value));\r\n      super._writeOne(CanvasInstruction.ShadowColor, changetype<usize>(value));\r\n    }\r\n  }\r\n  //#endregion\r\n\r\n  //#region SHADOWOFFSETX\r\n  /**\r\n   * A private member that contains a single float value that represents the last shadowOffsetX value\r\n   * written by a drawing operation.\r\n   */\r\n  private _currentShadowOffsetX: f64 = 0.0;\r\n\r\n  /**\r\n   * The CanvasRenderingContext2D.shadowOffsetX property of the Canvas 2D API specifies the distance\r\n   * that shadows will be offset horizontally.\r\n   *\r\n   * The value is a f64 specifying the distance that shadows will be offset horizontally. Positive\r\n   * values are to the right, and negative to the left. The default value is 0 (no horizontal\r\n   * offset). Infinity and NaN values are ignored.\r\n   */\r\n  public get shadowOffsetX(): f64 {\r\n    return this._stack.reference().shadowOffsetX;\r\n  }\r\n\r\n  public set shadowOffsetX(value: f64) {\r\n    if (!isFinite(value)) return;\r\n    this._stack.reference().shadowOffsetX = value;\r\n  }\r\n\r\n  /**\r\n   * An internal function that writes the current shadowOffsetX value on the _shadowOffsetXStack to the\r\n   * buffer if it currently does not match the last written shadowOffsetX value.\r\n   */\r\n  @inline\r\n  private _updateShadowOffsetX(): void {\r\n    var value: f64 = this._stack.reference().shadowOffsetX;\r\n    if (value != this._currentShadowOffsetX) {\r\n      this._currentShadowOffsetX = value;\r\n      super._writeOne(CanvasInstruction.ShadowOffsetX, value);\r\n    }\r\n  }\r\n  //#endregion SHADOWOFFSETX\r\n\r\n  //#region SHADOWOFFSETY\r\n  /**\r\n   * A private member that contains a single float value that represents the last shadowOffsetY value\r\n   * written by a drawing operation.\r\n   */\r\n  private _currentShadowOffsetY: f64 = 0.0;\r\n\r\n  /**\r\n   * The CanvasRenderingContext2D.shadowOffsetY property of the Canvas 2D API specifies the distance\r\n   * that shadows will be offset vertically.\r\n   *\r\n   * The value is a f64 specifying the distance that shadows will be offset horizontally. Positive\r\n   * values are down, and negative are up. The default value is 0 (no vertical offset). Infinity and\r\n   * NaN values are ignored\r\n   */\r\n  public get shadowOffsetY(): f64 {\r\n    return this._stack.reference().shadowOffsetY;\r\n  }\r\n\r\n  public set shadowOffsetY(value: f64) {\r\n    if (!isFinite(value)) return;\r\n    this._stack.reference().shadowOffsetY = value;\r\n  }\r\n\r\n  /**\r\n   * An internal function that writes the current shadowOffsetY value on the _shadowOffsetYStack to the\r\n   * buffer if it currently does not match the last written shadowOffsetY value.\r\n   */\r\n  @inline\r\n  private _updateShadowOffsetY(): void {\r\n    var value: f64 = this._stack.reference().shadowOffsetY;\r\n    if (value != this._currentShadowOffsetY) {\r\n      this._currentShadowOffsetY = value;\r\n      super._writeOne(CanvasInstruction.ShadowOffsetY, value);\r\n    }\r\n  }\r\n  //#endregion SHADOWOFFSETY\r\n\r\n\r\n  //#region STROKESTYLE\r\n  /**\r\n   * A private member that contains a single StrokeFillStyleType value that represents the last\r\n   * strokeStyle value written by a drawing operation\r\n   */\r\n  private _currentStrokeStyleType: FillStrokeStyleType = FillStrokeStyleType.String;\r\n\r\n  /**\r\n   * A private member that contains a single pointer or id value that represents the last\r\n   * fillStyle value written by a drawing operation\r\n   */\r\n  private _currentStrokeStyleValue: usize = changetype<usize>(defaultBlack);\r\n\r\n  /**\r\n   * The CanvasRenderingContext2D.strokeStyle property of the Canvas 2D API specifies the current text\r\n   * representing a CSS Color\r\n   */\r\n  public get strokeStyle(): string | null {\r\n    var stack = this._stack.reference();\r\n    return stack.strokeStyleType === FillStrokeStyleType.String\r\n      ? stack.strokeStyleString\r\n      : null;\r\n  }\r\n\r\n  public set strokeStyle(value: string | null) {\r\n    if (value == null) value = defaultBlack;\r\n    let stack = this._stack.reference();\r\n    let currentType = stack.strokeStyleType;\r\n    stack.strokeStyleType = FillStrokeStyleType.String;\r\n    __retain(changetype<usize>(value));\r\n    if (currentType == FillStrokeStyleType.CanvasGradient) {\r\n      __release(changetype<usize>(stack.strokeStyleGradient));\r\n      stack.strokeStyleGradient = null;\r\n    } else if (currentType == FillStrokeStyleType.CanvasPattern) {\r\n      __release(changetype<usize>(stack.strokeStylePattern));\r\n      stack.strokeStylePattern = null;\r\n    } else {\r\n      __release(changetype<usize>(stack.strokeStyleString));\r\n    }\r\n    stack.strokeStyleString = value!;\r\n    stack.strokeStyleValue = changetype<usize>(value);\r\n  }\r\n\r\n  /**\r\n   * An internal function that writes the current strokeStyle value on the _strokeStyleStack to the\r\n   * buffer if it currently does not match the last written strokeStyle.\r\n   */\r\n  @inline\r\n  private _updateStrokeStyle(): void {\r\n    var stack = this._stack.reference();\r\n    var styleType = stack.strokeStyleType;\r\n\r\n    var pointer: usize = 0;\r\n    var value: f64 = 0;\r\n    if (styleType === FillStrokeStyleType.String) {\r\n      pointer = changetype<usize>(stack.strokeStyleString);\r\n      value = pointer;\r\n    } else if (styleType === FillStrokeStyleType.CanvasGradient) {\r\n      pointer = changetype<usize>(stack.strokeStyleGradient);\r\n      value = <f64>load<i32>(pointer, offsetof<CanvasGradient>(\"id\"));\r\n    } else if (styleType === FillStrokeStyleType.CanvasPattern) {\r\n      pointer = changetype<usize>(stack.strokeStylePattern);\r\n      value = <f64>load<i32>(pointer, offsetof<CanvasPattern>(\"id\"));\r\n    }\r\n\r\n    if (styleType != this._currentStrokeStyleType || value != this._currentStrokeStyleValue) {\r\n      var inst: CanvasInstruction;\r\n      if (styleType == FillStrokeStyleType.String) inst = CanvasInstruction.StrokeStyle;\r\n      else if (styleType == FillStrokeStyleType.CanvasGradient) inst = CanvasInstruction.StrokeGradient;\r\n      else inst = CanvasInstruction.StrokePattern;\r\n      super._retain(pointer);\r\n      super._writeOne(inst, <f64>value);\r\n    }\r\n  }\r\n  //#endregion STROKESTYLE\r\n\r\n  //#region STROKEPATTERN\r\n  /**\r\n   * The CanvasRenderingContext2D.strokePattern property of the Canvas 2D API specifies the current\r\n   * strokeStyle pattern\r\n   */\r\n  public get strokePattern(): CanvasPattern | null {\r\n    var stack = this._stack.reference();\r\n    return stack.strokeStyleType === FillStrokeStyleType.CanvasPattern\r\n      ? stack.strokeStylePattern\r\n      : null;\r\n  }\r\n\r\n  public set strokePattern(value: CanvasPattern | null) {\r\n    if (value == null) {\r\n      this.strokeStyle = defaultBlack;\r\n      return;\r\n    }\r\n    __retain(changetype<usize>(value));\r\n    var stack = this._stack.reference();\r\n    __release(changetype<usize>(stack.strokeStylePattern));\r\n    stack.strokeStyleType = FillStrokeStyleType.CanvasPattern;\r\n    stack.strokeStylePattern = value;\r\n    stack.strokeStyleValue = <usize>load<i32>(changetype<usize>(value), offsetof<CanvasPattern>(\"id\"));\r\n  }\r\n  //#endregion STROKEPATTERN\r\n\r\n  //#region STROKEGRADIENT\r\n  /**\r\n   * The CanvasRenderingContext2D.strokeGradient property of the Canvas 2D API specifies the current\r\n   * strokeStyle gradient.\r\n   */\r\n  public get strokeGradient(): CanvasGradient | null {\r\n    var stack = this._stack.reference();\r\n    return stack.strokeStyleType == FillStrokeStyleType.CanvasGradient\r\n      ? stack.strokeStyleGradient\r\n      : null;\r\n  }\r\n\r\n  public set strokeGradient(value: CanvasGradient | null) {\r\n    if (value == null) {\r\n      this.strokeStyle = defaultBlack;\r\n      return;\r\n    }\r\n    __retain(changetype<usize>(value));\r\n    var stack = this._stack.reference();\r\n    stack.strokeStyleType = FillStrokeStyleType.CanvasGradient;\r\n    __release(changetype<usize>(stack.strokeStyleGradient));\r\n    stack.strokeStyleGradient = value;\r\n    stack.strokeStyleValue = <usize>load<i32>(changetype<usize>(value), offsetof<CanvasGradient>(\"id\"));\r\n  }\r\n  //#endregion STROKEGRADIENT\r\n\r\n  //#region TEXTALIGN\r\n  /**\r\n   * A private member that contains a single LineCap value that represents the last\r\n   * lineCap value written by a drawing operation.\r\n   */\r\n  private _currentTextAlign: TextAlign = TextAlign.start;\r\n\r\n  /**\r\n   * The CanvasRenderingContext2D.textAlign property of the Canvas 2D API specifies the current text\r\n   * alignment used when drawing text.\r\n   *\r\n   * The alignment is relative to the x value of the fillText() method. For example, if textAlign is\r\n   * \"center\", then the text's left edge will be at x - (textWidth / 2).\r\n   */\r\n  public get textAlign(): TextAlign {\r\n    return this._stack.reference().textAlign;\r\n  }\r\n\r\n  public set textAlign(value: TextAlign) {\r\n    this._stack.reference().textAlign = value;\r\n  }\r\n\r\n  /**\r\n   * An internal function that writes the current textAlign value on the _textAlignStack to the\r\n   * buffer if it currently does not match the last written textAlign value.\r\n   */\r\n  @inline\r\n  private _updateTextAlign(): void {\r\n    var value: TextAlign = this._stack.reference().textAlign;\r\n    if (value != this._currentTextAlign) {\r\n      this._currentTextAlign = value;\r\n      super._writeOne(CanvasInstruction.TextAlign, <f64>value);\r\n    }\r\n  }\r\n  //#endregion TEXTALIGN\r\n\r\n  //#region TEXTBASELINE\r\n  /**\r\n   * A private member that contains a single TextBaseline value that represents the last\r\n   * TextBaseline value written by a drawing operation.\r\n   */\r\n  private _currentTextBaseline: TextBaseline = TextBaseline.alphabetic;\r\n\r\n  /**\r\n   * The CanvasRenderingContext2D.textBaseline property of the Canvas 2D API specifies the current\r\n   * text baseline used when drawing text.\r\n   */\r\n  public get textBaseline(): TextBaseline {\r\n    return this._stack.reference().textBaseline;\r\n  }\r\n\r\n  public set textBaseline(value: TextBaseline) {\r\n    this._stack.reference().textBaseline = value;\r\n  }\r\n\r\n  /**\r\n   * An internal function that writes the current textBaseline value on the _textBaselineStack to the\r\n   * buffer if it currently does not match the last written textBaseline value.\r\n   */\r\n  @inline\r\n  private _updateTextBaseline(): void {\r\n    var value: TextBaseline = this._stack.reference().textBaseline;\r\n    if (value != this._currentTextBaseline) {\r\n      this._currentTextBaseline = value;\r\n      super._writeOne(CanvasInstruction.TextBaseline, <f64>value);\r\n    }\r\n  }\r\n  //#endregion TEXTBASELINE\r\n\r\n  //#region SAVE\r\n  /**\r\n   * The CanvasRenderingContext2D.save() method of the Canvas 2D API saves the entire state of the\r\n   * canvas by pushing the current state onto a stack.\r\n   *\r\n   * The drawing state that gets saved onto a stack consists of:\r\n   *\r\n   * - The current transformation matrix.\r\n   * - The current clipping region.\r\n   * - The current dash list.\r\n   * - The current values of the following attributes: strokeStyle, fillStyle, globalAlpha, lineWidth, lineCap, lineJoin, miterLimit, lineDashOffset, shadowOffsetX, shadowOffsetY, shadowBlur, shadowColor, globalCompositeOperation, font, textAlign, textBaseline, direction, imageSmoothingEnabled.\r\n   *\r\n   * @param {bool} hard - Tells the context to perform an actual `save()` operation. Default value is false.\r\n   */\r\n  public save(hard: bool = false): void {\r\n    var offset: i32 = <i32>this._stackOffset;\r\n    var nextOffset: i32 = offset + 1;\r\n    if (nextOffset >= <i32>u8.MAX_VALUE) unreachable();\r\n    let stack = this._stack.push();\r\n    this._stack = stack;\r\n    let stackReference = stack.reference();\r\n    // hard saves\r\n    stackReference.save = hard;\r\n\r\n    // fillStyle\r\n    __retain(changetype<usize>(stackReference.fillStyleGradient));\r\n    __retain(changetype<usize>(stackReference.fillStylePattern));\r\n    __retain(changetype<usize>(stackReference.fillStyleString));\r\n\r\n    // filter\r\n    __retain(changetype<usize>(stackReference.filter));\r\n\r\n    // font\r\n    __retain(changetype<usize>(stackReference.font));\r\n\r\n    // lineDash\r\n    __retain(changetype<usize>(stackReference.lineDash));\r\n\r\n    // shadowColor\r\n    __retain(changetype<usize>(stackReference.shadowColor));\r\n\r\n    // strokeStyle\r\n    __retain(changetype<usize>(stackReference.strokeStyleGradient));\r\n    __retain(changetype<usize>(stackReference.strokeStylePattern));\r\n    __retain(changetype<usize>(stackReference.strokeStyleString));\r\n\r\n    if (hard) super._writeZero(CanvasInstruction.Save);\r\n\r\n    this._stackOffset = <u8>nextOffset;\r\n  }\r\n  //#endregion SAVE\r\n\r\n  //#region RESTORE\r\n  /**\r\n   * The CanvasRenderingContext2D.restore() method of the Canvas 2D API restores the most recently\r\n   * saved canvas state by popping the top entry in the drawing state stack. If there is no saved\r\n   * state, this method does nothing.\r\n   *\r\n   * In the case of the hard restore, this function will mirror what the browser does, and modifies\r\n   * the last written values instead of just moving the stack pointer. This ensures that the writer\r\n   * emulates the browser state machine as accurately as possible.\r\n   */\r\n  public restore(): void {\r\n    if (this._stackOffset == <u8>0) return;\r\n    let currentStack = this._stack;\r\n    let nextStack = currentStack.pop();\r\n    this._stack = nextStack;\r\n    let currentStackReference = currentStack.reference();\r\n    let nextStackReference = nextStack.reference();\r\n    // fillStyle\r\n    __release(changetype<usize>(currentStackReference.fillStyleGradient));\r\n    __release(changetype<usize>(currentStackReference.fillStylePattern));\r\n    __release(changetype<usize>(currentStackReference.fillStyleString));\r\n\r\n    // filter\r\n    __release(changetype<usize>(currentStackReference.filter));\r\n\r\n    // font\r\n    __release(changetype<usize>(currentStackReference.font));\r\n\r\n    // lineDash\r\n    __release(changetype<usize>(currentStackReference.lineDash));\r\n\r\n    // shadowColor\r\n    __release(changetype<usize>(currentStackReference.shadowColor));\r\n\r\n    // strokeStyle\r\n    __release(changetype<usize>(currentStackReference.strokeStyleGradient));\r\n    __release(changetype<usize>(currentStackReference.strokeStylePattern));\r\n    __release(changetype<usize>(currentStackReference.strokeStyleString));\r\n\r\n\r\n    if (currentStackReference.save) {\r\n      super._writeZero(CanvasInstruction.Restore);\r\n\r\n      // currentTransform\r\n      memory.copy(\r\n        changetype<usize>(this._currentTransform),\r\n        changetype<usize>(nextStackReference) + offsetof<CanvasStack>(\"a\"),\r\n        48,\r\n      );\r\n\r\n      this._currentDirection = nextStackReference.direction;\r\n\r\n      this._currentFillStyleType = nextStackReference.fillStyleType;\r\n      this._currentFillStyleValue = <usize>nextStackReference.fillStyleValue;\r\n\r\n      this._currentFilter = nextStackReference.filter;\r\n\r\n      this._currentFont = nextStackReference.font;\r\n\r\n      this._currentGlobalAlpha = nextStackReference.globalAlpha;\r\n      this._currentGlobalCompositeOperation = nextStackReference.globalCompositeOperation;\r\n\r\n      this._currentImageSmoothingEnabled = nextStackReference.imageSmoothingEnabled;\r\n      this._currentImageSmoothingQuality = nextStackReference.imageSmoothingQuality;\r\n\r\n      this._currentLineCap = nextStackReference.lineCap;\r\n      this._currentLineDash = nextStackReference.lineDash;\r\n      this._currentLineJoin = nextStackReference.lineJoin;\r\n      this._currentLineWidth = nextStackReference.lineWidth;\r\n      this._currentMiterLimit = nextStackReference.miterLimit;\r\n\r\n      this._currentShadowBlur = nextStackReference.shadowBlur;\r\n      this._currentShadowColor = nextStackReference.shadowColor;\r\n      this._currentShadowOffsetX = nextStackReference.shadowOffsetX;\r\n      this._currentShadowOffsetY = nextStackReference.shadowOffsetY;\r\n\r\n      this._currentStrokeStyleType = nextStackReference.strokeStyleType;\r\n      this._currentStrokeStyleValue = <usize>nextStackReference.strokeStyleValue;\r\n\r\n      this._currentTextAlign = nextStackReference.textAlign;\r\n      this._currentTextBaseline = nextStackReference.textBaseline;\r\n    }\r\n\r\n    this._stackOffset -= <u8>1;\r\n  }\r\n  //#endregion RESTORE\r\n\r\n  //#region PATH\r\n  /**\r\n   * A c like pointer that always points to the next path element to write to.\r\n   */\r\n  private _path: StackPointer<Path2DElement> = createPathElements().increment();\r\n\r\n  /**\r\n   * A reference to the path start for quick path resetting.\r\n   */\r\n  private _pathStart: StackPointer<Path2DElement> = this._path.decrement();\r\n\r\n  /**\r\n   * A pointer that points to the end of the path.\r\n   */\r\n  private _pathEnd: StackPointer<Path2DElement> =\r\n    changetype<StackPointer<Path2DElement>>(changetype<usize>(this._pathStart) + offsetof<Path2DElement>() * 0x1000);\r\n\r\n  /**\r\n   * A reference to the next path item that should be written to the buffer.\r\n   */\r\n  private _pathCurrent: StackPointer<Path2DElement> = this._pathStart;\r\n\r\n  /**\r\n   * An internal function that writes a single path item to the _path.\r\n   *\r\n   * @param {CanvasInstruction} inst - The CanvasInstruction that represents the current pathing\r\n   * operation that should be written to the path buffer.\r\n   * @param {bool} updateTransform - The bool value that determines if the PathElement should store\r\n   * the _currentTransform values.\r\n   * @param {i32} count - The number of parameters for this PathElement's instruction.\r\n   * @param {f64} a - The first parameter for this PathElement's instruction.\r\n   * @param {f64} b - The second parameter for this PathElement's instruction.\r\n   * @param {f64} c - The third parameter for this PathElement's instruction.\r\n   * @param {f64} d - The fourth parameter for this PathElement's instruction.\r\n   * @param {f64} e - The five parameter for this PathElement's instruction.\r\n   * @param {f64} f - The six parameter for this PathElement's instruction.\r\n   * @param {f64} g - The seven parameter for this PathElement's instruction.\r\n   * @param {f64} h - The eighth parameter for this PathElement's instruction.\r\n   */\r\n  @inline\r\n  private _writePath(\r\n    inst: CanvasInstruction,\r\n    updateTransform: bool = false,\r\n    count: i32 = 0,\r\n    a: f64 = 0.0,\r\n    b: f64 = 0.0,\r\n    c: f64 = 0.0,\r\n    d: f64 = 0.0,\r\n    e: f64 = 0.0,\r\n    f: f64 = 0.0,\r\n    g: f64 = 0.0,\r\n    h: f64 = 0.0,\r\n  ): void {\r\n    let _path = this._path;\r\n    let element = _path.reference();\r\n    assert(changetype<usize>(_path) < changetype<usize>(this._pathEnd));\r\n    element.instruction = inst;\r\n    element.updateTransform = updateTransform;\r\n    if (updateTransform) {\r\n      let current = this._stack.reference();\r\n      element.transformA = current.a;\r\n      element.transformB = current.b;\r\n      element.transformC = current.c;\r\n      element.transformD = current.d;\r\n      element.transformE = current.e;\r\n      element.transformF = current.f;\r\n    }\r\n    element.count = count;\r\n    element.a = a;\r\n    element.b = b;\r\n    element.c = c;\r\n    element.d = d;\r\n    element.e = e;\r\n    element.f = f;\r\n    element.g = g;\r\n    element.h = h;\r\n    this._path = _path.increment();\r\n  }\r\n\r\n  /**\r\n   * An internal function that writes the queued up path items to the buffer. It optionally calls\r\n   * setTransform if the transform was modified between path calls.\r\n   */\r\n  @inline\r\n  private _updatePath(): void {\r\n    var nextPath = this._path;\r\n    var el: Path2DElement;\r\n    var a: f64;\r\n    var b: f64;\r\n    var c: f64;\r\n    var d: f64;\r\n    var e: f64;\r\n    var f: f64;\r\n    var currentTransform: usize = changetype<usize>(this._currentTransform);\r\n    var currentPath = this._pathCurrent;\r\n    while (currentPath.dereference() < nextPath.dereference()) {\r\n      el = currentPath.reference();\r\n      if (el.updateTransform) {\r\n        a = el.transformA;\r\n        b = el.transformB;\r\n        c = el.transformC;\r\n        d = el.transformD;\r\n        e = el.transformE;\r\n        f = el.transformF;\r\n\r\n        let diff = memory.compare(\r\n          currentTransform,\r\n          changetype<usize>(el) + offsetof<Path2DElement>(\"transformA\"),\r\n          48,\r\n        );\r\n        if (diff != 0) {\r\n          super._writeSix(CanvasInstruction.SetTransform, a, b, c, d, e, f);\r\n          STORE<f64>(currentTransform, 0, a);\r\n          STORE<f64>(currentTransform, 1, b);\r\n          STORE<f64>(currentTransform, 2, c);\r\n          STORE<f64>(currentTransform, 3, d);\r\n          STORE<f64>(currentTransform, 4, e);\r\n          STORE<f64>(currentTransform, 5, f);\r\n        }\r\n      }\r\n      switch (el.count) {\r\n        case 0: {\r\n          super._writeZero(el.instruction);\r\n          break;\r\n        }\r\n        case 1: {\r\n          super._writeOne(el.instruction, el.a);\r\n          break;\r\n        }\r\n        case 2: {\r\n          super._writeTwo(el.instruction, el.a, el.b);\r\n          break;\r\n        }\r\n        case 4: {\r\n          super._writeFour(el.instruction, el.a, el.b, el.c, el.d);\r\n          break;\r\n        }\r\n        case 5: {\r\n          super._writeFive(el.instruction, el.a, el.b, el.c, el.d, el.e);\r\n          break;\r\n        }\r\n        case 6: {\r\n          super._writeSix(el.instruction, el.a, el.b, el.c, el.d, el.e, el.f);\r\n          break;\r\n        }\r\n        case 8: {\r\n          super._writeEight(el.instruction, el.a, el.b, el.c, el.d, el.e, el.f, el.g, el.h);\r\n        }\r\n      }\r\n      currentPath = currentPath.increment();\r\n    }\r\n    this._pathCurrent = currentPath;\r\n  }\r\n  //#endregion PATH\r\n\r\n  //#region ARC\r\n  /**\r\n   * The CanvasRenderingContext2D.arc() method of the Canvas 2D API adds a circular arc to\r\n   * the current sub-path.\r\n   *\r\n   * @param {f64} x - The x-axis (horizontal) coordinate of the arc's center.\r\n   * @param {f64} y - The y-axis (vertical) coordinate of the arc's center.\r\n   * @param {f64} radius - The arc's radius. Must be non-negative.\r\n   * @param {f64} startAngle - The angle at which the arc starts, measured clockwise from the positive x-axis\r\n   * and expressed in radians.\r\n   * @param {f64} endAngle - The angle at which the arc ends, measured clockwise from the positive x-axis and\r\n   * expressed in radians.\r\n   * @param {bool} anticlockwise - An optional bool which, if true, causes the arc to be drawn\r\n   * counter-clockwise between the start and end angles. The default value is false (clockwise).\r\n   */\r\n  public arc(x: f64, y: f64, radius: f64, startAngle: f64, endAngle: f64 , anticlockwise: bool = false): void {\r\n    if (!isFinite(x + y + radius + startAngle + endAngle) || radius < 0) return;\r\n    this._writePath(CanvasInstruction.Arc, true, 6, x, y, radius, startAngle, endAngle, anticlockwise ? 1.0 : 0.0);\r\n  }\r\n  //#endregion ARC\r\n\r\n  //#region ARCTO\r\n  /**\r\n   * The CanvasRenderingContext2D.arcTo() method of the Canvas 2D API adds a circular arc to the current\r\n   * sub-path, using the given control points and radius. The arc is automatically connected to the\r\n   * path's latest point with a straight line, if necessary for the specified parameters. This method is\r\n   * commonly used for making rounded corners.\r\n   *\r\n   * @param {f64} x1 - The x-axis coordinate of the first control point.\r\n   * @param {f64} y1 - The y-axis coordinate of the first control point.\r\n   * @param {f64} x2 - The x-axis coordinate of the second control point.\r\n   * @param {f64} y2 - The y-axis coordinate of the second control point.\r\n   * @param {f64} radius - The arc's radius. Must be non-negative.\r\n   */\r\n  public arcTo(x1: f64, y1: f64, x2: f64, y2: f64, radius: f64): void {\r\n    if (!isFinite(x1 + y1 + x2 + y2 + radius) || radius < 0) return;\r\n    this._writePath(CanvasInstruction.ArcTo, true, 5, x1, y1, x2, y2, radius);\r\n  }\r\n  //#endregion ARCTO\r\n\r\n  //#region BEGINPATH\r\n  /**\r\n   * The CanvasRenderingContext2D.beginPath() method of the Canvas 2D API starts a new path by\r\n   * emptying the list of sub-paths. Call this method when you want to create a new path.\r\n   */\r\n  public beginPath(): void {\r\n    let start = this._pathStart;\r\n    this._path = start.increment();\r\n    this._pathCurrent = start;\r\n  }\r\n  //#endregion BEGINPATH\r\n\r\n  //#region BEZIERCURVETO\r\n  /**\r\n   * The CanvasRenderingContext2D.bezierCurveTo() method of the Canvas 2D API adds a cubic Bézier\r\n   * curve to the current sub-path. It requires three points: the first two are control points and\r\n   * the third one is the end point. The starting point is the latest point in the current path, which\r\n   * can be changed using moveTo() before creating the Bézier curve.\r\n   *\r\n   * @param {f64} cp1x - The x-axis coordinate of the first control point.\r\n   * @param {f64} cp1y - The y-axis coordinate of the first control point.\r\n   * @param {f64} cp2x - The x-axis coordinate of the second control point.\r\n   * @param {f64} cp2y - The y-axis coordinate of the second control point.\r\n   * @param {f64} x - The x-axis coordinate of the end point.\r\n   * @param {f64} y - The y-axis coordinate of the end point.\r\n   */\r\n  public bezierCurveTo(cp1x: f64, cp1y: f64, cp2x: f64, cp2y: f64, x: f64, y: f64): void {\r\n    if (!isFinite(cp1x + cp1y + cp2x + cp2y + x + y)) return;\r\n    this._writePath(CanvasInstruction.BezierCurveTo, true, 6, cp1x, cp1y, cp2x, cp2y, x, y);\r\n  }\r\n  //#endregion BEZIERCURVETO\r\n\r\n  //#region CLEARRECT\r\n  /**\r\n   * The CanvasRenderingContext2D.clearRect() method of the Canvas 2D API erases the pixels in a\r\n   * rectangular area by setting them to transparent black.\r\n   *\r\n   * @param {f64} x - The x-axis coordinate of the rectangle's starting point.\r\n   * @param {f64} y - The y-axis coordinate of the rectangle's starting point.\r\n   * @param {f64} width - The rectangle's width. Positive values are to the right, and negative to\r\n   * the left.\r\n   * @param {f64} height - The rectangle's height. Positive values are down, and negative are up.\r\n   */\r\n  public clearRect(x: f64, y: f64, width: f64, height: f64): void {\r\n    if (!isFinite(x + y + width + height)) return;\r\n    this._updateTransform();\r\n    super._writeFour(CanvasInstruction.ClearRect, x, y, width, height);\r\n  }\r\n  //#endregion CLEARRECT\r\n\r\n  //#region CLIP\r\n  /**\r\n   * The CanvasRenderingContext2D.clip() method of the Canvas 2D API turns the current or given path\r\n   * into the current clipping region. It replaces any previous clipping region. In the image below,\r\n   * the red outline represents a clipping region shaped like a star. Only those parts of the\r\n   * checkerboard pattern that are within the clipping region get drawn.\r\n   */\r\n  public clip(): void {\r\n    this._updatePath();\r\n    super._writeZero(CanvasInstruction.Clip);\r\n  }\r\n  //#endregion CLIP\r\n\r\n  //#region CLOSEPATH\r\n  /**\r\n   * The CanvasRenderingContext2D.closePath() method of the Canvas 2D API attempts to add a straight\r\n   * line from the current point to the start of the current sub-path. If the shape has already been\r\n   * closed or has only one point, this function does nothing. This method doesn't draw anything to\r\n   * the canvas directly. You can render the path using the stroke() or fill() methods.\r\n   */\r\n  public closePath(): void {\r\n    let previous = this._path.decrement().reference();\r\n    if (i32(previous.instruction == CanvasInstruction.BeginPath) | i32(previous.instruction == CanvasInstruction.ClosePath)) return;\r\n    this._writePath(CanvasInstruction.ClosePath, true, 0);\r\n  }\r\n\r\n  //#endregion CLOSEPATH\r\n\r\n  //#region DRAWIMAGE\r\n  /**\r\n   * The CanvasRenderingContext2D.drawImagePosition() method of the Canvas 2D API provides a simple\r\n   * method for drawing an image onto the canvas at a specific position.\r\n   *\r\n   * @param {Image} image - An element to draw into the context. The specification permits any canvas\r\n   * image source (Image).\r\n   * @param {f64} dx - The x-axis coordinate in the destination canvas at which to place the top-left\r\n   * corner of the source image.\r\n   * @param {f64} dy - The y-axis coordinate in the destination canvas at which to place the top-left\r\n   * corner of the source image.\r\n   */\r\n  public drawImage(image: Image | null, dx: f64, dy: f64): void {\r\n    if (image == null || !isFinite(dx + dy) || !image.loaded) return;\r\n    this._updateFilter();\r\n    this._updateGlobalAlpha();\r\n    this._updateGlobalCompositeOperation();\r\n    this._updateImageSmoothingEnabled();\r\n    this._updateImageSmoothingQuality();\r\n    this._updateShadowBlur();\r\n    this._updateShadowColor();\r\n    this._updateShadowOffsetX();\r\n    this._updateShadowOffsetY();\r\n    this._updateTransform();\r\n    this._writeNine(\r\n      CanvasInstruction.DrawImage,\r\n      <f64>getImageID(image),\r\n      0.0, 0.0, <f64>image.width, <f64>image.height,\r\n      dx, dy, <f64>image.width, <f64>image.height,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * The CanvasRenderingContext2D.drawImageSize() method of the Canvas 2D API provides a simple\r\n   * method for drawing an image onto the canvas at a specific position.\r\n   *\r\n   * @param {Image} image - An element to draw into the context. The specification permits any canvas\r\n   * image source (Image).\r\n   * @param {f64} dx - The x-axis coordinate in the destination canvas at which to place the top-left\r\n   * corner of the source image.\r\n   * @param {f64} dy - The y-axis coordinate in the destination canvas at which to place the top-left\r\n   * corner of the source image.\r\n   * @param {f64} dWidth - The width to draw the image in the destination canvas. This allows scaling\r\n   * of the drawn image. If not specified, the image is not scaled in width when drawn.\r\n   * @param {f64} dHeight - The height to draw the image in the destination canvas. This allows scaling\r\n   * of the drawn image. If not specified, the image is not scaled in height when drawn.\r\n   */\r\n  public drawImageSize(image: Image | null, dx: f64, dy: f64, dWidth: f64, dHeight: f64): void {\r\n    if (image == null || !isFinite(dx + dy + dWidth + dHeight) || !image.loaded) return;\r\n    this._updateFilter();\r\n    this._updateGlobalAlpha();\r\n    this._updateGlobalCompositeOperation();\r\n    this._updateImageSmoothingEnabled();\r\n    this._updateImageSmoothingQuality();\r\n    this._updateShadowBlur();\r\n    this._updateShadowColor();\r\n    this._updateShadowOffsetX();\r\n    this._updateShadowOffsetY();\r\n    this._updateTransform();\r\n    this._writeNine(\r\n      CanvasInstruction.DrawImage,\r\n      <f64>getImageID(image),\r\n      0.0, 0.0, <f64>image.width, <f64>image.height,\r\n      dx, dy, dWidth, dHeight,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * The CanvasRenderingContext2D.drawImageSource() method of the Canvas 2D API provides a simple\r\n   * method for drawing an image onto the canvas at a specific position.\r\n   *\r\n   * @param {Image} image - An element to draw into the context. The specification permits any canvas\r\n   * image source (Image).\r\n   * @param {f64} sx - The x-axis coordinate of the top left corner of the sub-rectangle of the source\r\n   * image to draw into the destination context.\r\n   * @param {f64} sy - The y-axis coordinate of the top left corner of the sub-rectangle of the source\r\n   * image to draw into the destination context.\r\n   * @param {f64} sWidth - The width of the sub-rectangle of the source image to draw into the\r\n   * destination context. If not specified, the entire rectangle from the coordinates specified by sx\r\n   * and sy to the bottom-right corner of the image is used.\r\n   * @param {f64} sHeight - The height of the sub-rectangle of the source image to draw into the\r\n   * destination context.\r\n   * @param {f64} dx - The x-axis coordinate in the destination canvas at which to place the top-left\r\n   * corner of the source image.\r\n   * @param {f64} dy - The y-axis coordinate in the destination canvas at which to place the top-left\r\n   * corner of the source image.\r\n   * @param {f64} dWidth - The width to draw the image in the destination canvas. This allows scaling\r\n   * of the drawn image. If not specified, the image is not scaled in width when drawn.\r\n   * @param {f64} dHeight - The height to draw the image in the destination canvas. This allows scaling\r\n   * of the drawn image. If not specified, the image is not scaled in height when drawn.\r\n   */\r\n  public drawImageSource(image: Image | null, sx: f64, sy: f64, sWidth: f64, sHeight: f64, dx: f64, dy: f64, dWidth: f64, dHeight: f64): void {\r\n    if (image == null || !isFinite(sx + sy + sWidth + sHeight + dx + dy + dWidth + dHeight) || !image.loaded) return;\r\n    this._updateFilter();\r\n    this._updateGlobalAlpha();\r\n    this._updateGlobalCompositeOperation();\r\n    this._updateImageSmoothingEnabled();\r\n    this._updateImageSmoothingQuality();\r\n    this._updateShadowBlur();\r\n    this._updateShadowColor();\r\n    this._updateShadowOffsetX();\r\n    this._updateShadowOffsetY();\r\n    this._updateTransform();\r\n    this._writeNine(\r\n      CanvasInstruction.DrawImage,\r\n      <f64>getImageID(image),\r\n      sx, sy, sWidth, sHeight,\r\n      dx, dy, dWidth, dHeight,\r\n    );\r\n  }\r\n  //#endregion DRAWIMAGE\r\n\r\n  //#region ELLIPSE\r\n  /**\r\n   * The CanvasRenderingContext2D.ellipse() method of the Canvas 2D API adds an elliptical arc to the current sub-path.\r\n   *\r\n   * @param {f64} x - The x-axis (horizontal) coordinate of the ellipse's center.\r\n   * @param {f64} y - The y-axis (vertical) coordinate of the ellipse's center.\r\n   * @param {f64} radiusX - The ellipse's major-axis radius. Must be non-negative.\r\n   * @param {f64} radiusY - The ellipse's minor-axis radius. Must be non-negative.\r\n   * @param {f64} rotation - The rotation of the ellipse, expressed in radians.\r\n   * @param {f64} startAngle - The angle at which the ellipse starts, measured clockwise from the positive x-axis\r\n   * and expressed in radians.\r\n   * @param {f64} endAngle - The angle at which the ellipse ends, measured clockwise from the positive x-axis and\r\n   * expressed in radians.\r\n   * @param {bool} anticlockwise - An optional Boolean which, if true, draws the ellipse anticlockwise\r\n   * (counter-clockwise). The default value is false (clockwise).\r\n   */\r\n  public ellipse(x: f64, y: f64, radiusX: f64, radiusY: f64, rotation: f64, startAngle: f64, endAngle: f64, anticlockwise: bool = false): void {\r\n    if (!isFinite(x + y + radiusX + radiusY + rotation + startAngle + endAngle) || radiusX < 0 || radiusY < 0) return;\r\n    this._writePath(\r\n      CanvasInstruction.Ellipse,\r\n      true, 8,\r\n      x, y, radiusX, radiusY,\r\n      rotation, startAngle, endAngle, anticlockwise ? 1.0 : 0.0,\r\n    );\r\n  }\r\n  //#endregion ELLIPSE\r\n\r\n  //#region FILL\r\n  /**\r\n   * The CanvasRenderingContext2D.fill() method of the Canvas 2D API fills the current or given path\r\n   * with the current fillStyle.\r\n   *\r\n   * @param {FillRule} fillRule - The algorithm by which to determine if a point is inside or\r\n   * outside the filling region.\r\n   *\r\n   * Possible values:\r\n   * - `FillRule.nonzero`: The non-zero winding rule. Default rule.\r\n   * - `FillRule.evenodd`: The even-odd winding rule.\r\n   */\r\n  public fill(fillRule: FillRule = FillRule.nonzero): void {\r\n    /**\r\n     * If there are no items on the path, there is no reason to fill. Index 1 means the path buffer\r\n     * is pointing to a single `beginPath()` operation and it does not matter if fill is called at\r\n     * this point.\r\n     */\r\n    if (this._path == this._pathStart.increment()) return;\r\n    this._updateFillStyle();\r\n    this._updateFilter();\r\n    this._updateGlobalAlpha();\r\n    this._updateGlobalCompositeOperation();\r\n    this._updateImageSmoothingEnabled();\r\n    this._updateImageSmoothingQuality();\r\n\r\n    /**\r\n     * This function must be called *before* _updateTransform(), because both the path operations and the\r\n     * fill operations affect the transform. Each pathing operation has it's own transform, and the\r\n     * transform value when the fill operation occurs might be different.\r\n     */\r\n    this._updatePath();\r\n    this._updateShadowBlur();\r\n    this._updateShadowColor();\r\n    this._updateShadowOffsetX();\r\n    this._updateShadowOffsetY();\r\n    this._updateTransform();\r\n    super._writeOne(CanvasInstruction.Fill, <f64>fillRule);\r\n  }\r\n  //#endregion FILL\r\n\r\n  //#region FILLRECT\r\n  /**\r\n   * The CanvasRenderingContext2D.fillRect() method of the Canvas 2D API draws a rectangle that is\r\n   * filled according to the current fillStyle. This method draws directly to the canvas without\r\n   * modifying the current path, so any subsequent fill() or stroke() calls will have no effect on\r\n   * it.\r\n   *\r\n   * @param x - The x-axis coordinate of the rectangle's starting point.\r\n   * @param y - The y-axis coordinate of the rectangle's starting point.\r\n   * @param width - The rectangle's width. Positive values are to the right, and negative to the\r\n   * left.\r\n   * @param height - The rectangle's height. Positive values are down, and negative are up.\r\n   */\r\n  public fillRect(x: f64, y: f64, width: f64, height: f64): void {\r\n    if (!isFinite(x + y + width + height)) return;\r\n    this._updateFillStyle();\r\n    this._updateFilter();\r\n    this._updateGlobalAlpha();\r\n    this._updateGlobalCompositeOperation();\r\n    this._updateImageSmoothingEnabled();\r\n    this._updateImageSmoothingQuality();\r\n    this._updateShadowBlur();\r\n    this._updateShadowColor();\r\n    this._updateShadowOffsetX();\r\n    this._updateShadowOffsetY();\r\n    this._updateTransform();\r\n    super._writeFour(CanvasInstruction.FillRect, x, y, width, height);\r\n  }\r\n  //#endregion FILLRECT\r\n\r\n  //#region FILLTEXT\r\n  /**\r\n   * The CanvasRenderingContext2D method fillText(), part of the Canvas 2D API, draws a text string\r\n   * at the specified coordinates, filling the string's characters with the current fillStyle. An\r\n   * optional parameter allows specifying a maximum width for the rendered text, which the user\r\n   * agent will achieve by condensing the text or by using a lower font size. This method draws\r\n   * directly to the canvas without modifying the current path, so any subsequent fill() or stroke()\r\n   * calls will have no effect on it. The text is rendered using the font and text layout\r\n   * configuration as defined by the font, textAlign, textBaseline, and direction properties.\r\n   *\r\n   * The fillText function can accept an optional maxWidth property. Use the fillTextWidth function\r\n   * to enable the use of that parameter.\r\n   *\r\n   * @param text - A DOMString specifying the text string to render into the context. The text is\r\n   * rendered using the settings specified by font, textAlign, textBaseline, and direction.\r\n   * @param x - The x-axis coordinate of the point at which to begin drawing the text, in pixels.\r\n   * @param y - The y-axis coordinate of the point at which to begin drawing the text, in pixels.\r\n   */\r\n  public fillText(text: string, x: f64, y: f64): void {\r\n    if (!isFinite(x + y) || text == null || text.length == 0) return;\r\n    this._updateDirection();\r\n    this._updateFillStyle();\r\n    this._updateFilter();\r\n    this._updateFont();\r\n    this._updateGlobalAlpha();\r\n    this._updateGlobalCompositeOperation();\r\n    this._updateImageSmoothingEnabled();\r\n    this._updateImageSmoothingQuality();\r\n    this._updateShadowBlur();\r\n    this._updateShadowColor();\r\n    this._updateShadowOffsetX();\r\n    this._updateShadowOffsetY();\r\n    this._updateTextAlign();\r\n    this._updateTextBaseline();\r\n    this._updateTransform();\r\n    super._retain(changetype<usize>(text));\r\n    super._writeThree(CanvasInstruction.FillText, <f64>changetype<usize>(text), x, y);\r\n  }\r\n\r\n  /**\r\n   * The CanvasRenderingContext2D method fillText(), part of the Canvas 2D API, draws a text string\r\n   * at the specified coordinates, filling the string's characters with the current fillStyle. An\r\n   * optional parameter allows specifying a maximum width for the rendered text, which the user\r\n   * agent will achieve by condensing the text or by using a lower font size. This method draws\r\n   * directly to the canvas without modifying the current path, so any subsequent fill() or stroke()\r\n   * calls will have no effect on it. The text is rendered using the font and text layout\r\n   * configuration as defined by the font, textAlign, textBaseline, and direction properties.\r\n   *\r\n   * The fillText function can accept an optional maxWidth property. Use the fillTextWidth function\r\n   * to enable the use of that parameter.\r\n   *\r\n   * @param text - A DOMString specifying the text string to render into the context. The text is\r\n   * rendered using the settings specified by font, textAlign, textBaseline, and direction.\r\n   * @param x - The x-axis coordinate of the point at which to begin drawing the text, in pixels.\r\n   * @param y - The y-axis coordinate of the point at which to begin drawing the text, in pixels.\r\n   * @param maxWidth - The maximum number of pixels wide the text may be once rendered. If not\r\n   * specified, there is no limit to the width of the text. However, if this value is provided, the\r\n   * user agent will adjust the kerning, select a more horizontally condensed font (if one is available or can be generated without loss of quality), or scale down to a smaller font size in order to fit the text in the specified width.\r\n   */\r\n  public fillTextWidth(text: string, x: f64, y: f64, maxWidth: f64): void {\r\n    if (!isFinite(x + y + maxWidth) || text == null || text.length == 0 || maxWidth < 0) return;\r\n    this._updateDirection();\r\n    this._updateFillStyle();\r\n    this._updateFilter();\r\n    this._updateFont();\r\n    this._updateGlobalAlpha();\r\n    this._updateGlobalCompositeOperation();\r\n    this._updateImageSmoothingEnabled();\r\n    this._updateImageSmoothingQuality();\r\n    this._updateShadowBlur();\r\n    this._updateShadowColor();\r\n    this._updateShadowOffsetX();\r\n    this._updateShadowOffsetY();\r\n    this._updateTextAlign();\r\n    this._updateTextBaseline();\r\n    this._updateTransform();\r\n    super._retain(changetype<usize>(text));\r\n    super._writeFour(CanvasInstruction.FillTextWidth, <f64>changetype<usize>(text), x, y, maxWidth);\r\n  }\r\n  //#endregion FILLTEXT\r\n\r\n  //#region ISPOINTINPATH\r\n  /**\r\n   * The CanvasRenderingContext2D.isPointInPath() method of the Canvas 2D API reports whether or not\r\n   * the specified point is contained in the current path. It forces a commit to flush all the\r\n   * current instructions to the buffer, updates the path, and then performs a pointInPath function\r\n   * call on the canvas.\r\n   *\r\n   * @param {f64} x - The x-axis coordinate of the point to check.\r\n   * @param {f64} y - The y-axis coordinate of the point to check.\r\n   * @param {FillRule} fillRule - The algorithm by which to determine if a point is inside or\r\n   * outside the path.\r\n   *\r\n   * Possible values:\r\n   * - `FillRule.nonzero`: The non-zero winding rule. Default rule.\r\n   * - `FillRule.evenodd`: The even-odd winding rule.\r\n   */\r\n  public isPointInPath(x: f64, y: f64, fillRule: FillRule = FillRule.nonzero): bool {\r\n    if (!isFinite(x + y)) return false;\r\n    this._updatePath();\r\n    this.commit();\r\n    return isPointInPath(this.id, x, y, fillRule);\r\n  }\r\n  //#endregion ISPOINTINPATH\r\n\r\n  //#region ISPOINTINSTROKE\r\n  /**\r\n   * The CanvasRenderingContext2D.isPointInStroke() method of the Canvas 2D API reports whether or\r\n   * not the specified point is inside the area contained by the stroking of a path. It forces a\r\n   * commit to flush all the current instructions to the buffer, updates the path, and then performs\r\n   * a pointInPath function call on the canvas.\r\n   *\r\n   * @param {f64} x - The x-axis coordinate of the point to check.\r\n   * @param {f64} y - The y-axis coordinate of the point to check.\r\n   */\r\n  public isPointInStroke(x: f64, y: f64): bool {\r\n    if (!isFinite(x + y)) return false;\r\n    this._updatePath();\r\n    this.commit();\r\n    return isPointInStroke(this.id, x, y);\r\n  }\r\n  //#endregion ISPOINTINSTROKE\r\n\r\n  //#region LINETO\r\n  /**\r\n   * The CanvasRenderingContext2D method lineTo(), part of the Canvas 2D API, adds a straight line\r\n   * to the current sub-path by connecting the sub-path's last point to the specified (x, y)\r\n   * coordinates. Like other methods that modify the current path, this method does not directly\r\n   * render anything. To draw the path onto a canvas, you can use the fill() or stroke() methods.\r\n   *\r\n   * @param {f64} x - The x-axis coordinate of the line's end point.\r\n   * @param {f64} y - The y-axis coordinate of the line's end point.\r\n   */\r\n  public lineTo(x: f64, y: f64): void {\r\n    if (!isFinite(x + y)) return;\r\n    this._writePath(CanvasInstruction.LineTo, true, 2, x, y);\r\n  }\r\n  //#endregion LINETO\r\n\r\n  //#region MEASURETEXT\r\n  /**\r\n   * The CanvasRenderingContext2D.measureText() method returns a TextMetrics object that contains\r\n   * information about the measured text (such as its width, for example). The as2d implementation\r\n   * only returns the resulting width property value.\r\n   *\r\n   * @param {string} text - The text string to measure.\r\n   */\r\n  public measureText(text: string): f64 {\r\n    this._updateFont();\r\n    this.commit();\r\n    return measureText(this.id, text);\r\n  }\r\n  //#endregion MEASURETEXT\r\n\r\n  //#region MOVETO\r\n  /**\r\n   * The CanvasRenderingContext2D.moveTo() method of the Canvas 2D API begins a new sub-path at the\r\n   * point specified by the given (x, y) coordinates.\r\n   *\r\n   * @param {f64} x - The x-axis (horizontal) coordinate of the point.\r\n   * @param {f64} y - The y-axis (vertical) coordinate of the point.\r\n   */\r\n  public moveTo(x: f64, y: f64): void {\r\n    if (!isFinite(x + y)) return;\r\n    this._writePath(CanvasInstruction.MoveTo, true, 2, x, y);\r\n  }\r\n  //#endregion MOVETO\r\n\r\n  //#region QUADRATICCURVETO\r\n  /**\r\n   * The CanvasRenderingContext2D.quadraticCurveTo() method of the Canvas 2D API adds a quadratic\r\n   * Bézier curve to the current sub-path. It requires two points: the first one is a control point\r\n   * and the second one is the end point. The starting point is the latest point in the current\r\n   * path, which can be changed using moveTo() before creating the quadratic Bézier curve.\r\n   *\r\n   * @param cpx - The x-axis coordinate of the control point.\r\n   * @param cpy - The y-axis coordinate of the control point.\r\n   * @param x - The x-axis coordinate of the end point.\r\n   * @param y - The y-axis coordinate of the end point.\r\n   */\r\n  public quadraticCurveTo(cpx: f64, cpy: f64, x: f64, y: f64): void {\r\n    if (!isFinite(cpx + cpy + x + y)) return;\r\n    this._writePath(CanvasInstruction.QuadraticCurveTo, true, 4, cpx, cpy, x, y);\r\n  }\r\n  //#endregion QUADRATICCURVETO\r\n\r\n  //#region RECT\r\n  /**\r\n   * The CanvasRenderingContext2D.rect() method of the Canvas 2D API adds a rectangle to the current\r\n   * path. Like other methods that modify the current path, this method does not directly render\r\n   * anything. To draw the rectangle onto a canvas, you can use the fill() or stroke() methods.\r\n   *\r\n   * @param {f64} x - The x-axis coordinate of the rectangle's starting point.\r\n   * @param {f64} y - The y-axis coordinate of the rectangle's starting point.\r\n   * @param {f64} width - The rectangle's width. Positive values are to the right, and negative to\r\n   * the left.\r\n   * @param {f64} height - The rectangle's height. Positive values are down, and negative are up.\r\n   */\r\n  public rect(x: f64, y: f64, width: f64, height: f64): void {\r\n    if (!isFinite(x + y + width + height)) return;\r\n    this._writePath(CanvasInstruction.Rect, true, 4, x, y, width, height);\r\n  }\r\n  //#endregion RECT\r\n\r\n  //#region RESETTRANSFORM\r\n  /**\r\n   * The CanvasRenderingContext2D.resetTransform() method of the Canvas 2D API resets the current\r\n   * transform to the identity matrix.\r\n   */\r\n  public resetTransform(): void {\r\n    this.setTransform(1.0, 0.0, 0.0, 1.0, 0.0, 0.0);\r\n  }\r\n  //#endregion RESETTRANSFORM\r\n\r\n  //#region ROTATE\r\n  /**\r\n   * The CanvasRenderingContext2D.rotate() method of the Canvas 2D API adds a rotation to the\r\n   * transformation matrix.\r\n   *\r\n   * @param {f64} angle - The rotation angle, clockwise in radians. You can use\r\n   * `degree * Math.PI / 180` if you want to calculate from a degree value.\r\n   */\r\n  public rotate(angle: f64): void {\r\n    if (!isFinite(angle)) return;\r\n\r\n    NativeMath.sincos(angle);\r\n    var cos: f64 = NativeMath.sincos_cos;\r\n    var sin: f64 = NativeMath.sincos_sin;\r\n\r\n    if (ASC_FEATURE_SIMD) {\r\n      let stack = this._stack.dereference();\r\n      let cossplat = v128.splat<f64>(cos);\r\n      let sinsplat = v128.splat<f64>(sin);\r\n      let ab = v128.load(stack, offsetof<CanvasStack>(\"a\"));\r\n      let cb = v128.load(stack, offsetof<CanvasStack>(\"c\"));\r\n      v128.store(stack,\r\n        v128.add<f64>(\r\n          v128.mul<f64>(ab, cossplat),\r\n          v128.mul<f64>(cb, sinsplat),\r\n        ),\r\n        offsetof<CanvasStack>(\"a\"),\r\n      );\r\n      v128.store(stack,\r\n        v128.sub<f64>(\r\n          v128.mul<f64>(cb, cossplat),\r\n          v128.mul<f64>(ab, sinsplat),\r\n        ),\r\n        offsetof<CanvasStack>(\"c\"),\r\n      );\r\n    } else {\r\n      var stack = this._stack.reference();\r\n      var a = stack.a;\r\n      var b = stack.b;\r\n      var c = stack.c;\r\n      var d = stack.d;\r\n      stack.a = a * cos + c * sin;\r\n      stack.b = b * cos + d * sin;\r\n      stack.c = c * cos - a * sin;\r\n      stack.d = d * cos - b * sin;\r\n    }\r\n  }\r\n  //#endregion ROTATE\r\n\r\n  //#region SCALE\r\n  /**\r\n   * The CanvasRenderingContext2D.scale() method of the Canvas 2D API adds a scaling transformation\r\n   * to the canvas units horizontally and/or vertically. By default, one unit on the canvas is\r\n   * exactly one pixel. A scaling transformation modifies this behavior. For instance, a scaling\r\n   * factor of 0.5 results in a unit size of 0.5 pixels; shapes are thus drawn at half the normal\r\n   * size. Similarly, a scaling factor of 2.0 increases the unit size so that one unit becomes two\r\n   * pixels; shapes are thus drawn at twice the normal size.\r\n   *\r\n   * @param {f64} x - Scaling factor in the horizontal direction. A negative value flips pixels\r\n   * across the vertical axis. A value of 1 results in no horizontal scaling.\r\n   * @param {f64} y - Scaling factor in the vertical direction. A negative value flips pixels across\r\n   * the horizontal axis. A value of 1 results in no vertical scaling.\r\n   */\r\n  public scale(x: f64, y: f64): void {\r\n    if (!isFinite(x + y)) return;\r\n    if (ASC_FEATURE_SIMD) {\r\n      let stack = this._stack.dereference();\r\n      v128.store(stack,\r\n        v128.mul<f64>(\r\n          v128.load(stack, offsetof<CanvasStack>(\"a\")),\r\n          v128.splat<f64>(x),\r\n        ),\r\n        offsetof<CanvasStack>(\"a\"),\r\n      );\r\n      v128.store(stack,\r\n        v128.mul<f64>(\r\n          v128.load(stack, offsetof<CanvasStack>(\"c\")),\r\n          v128.splat<f64>(y),\r\n        ),\r\n        offsetof<CanvasStack>(\"c\"),\r\n      );\r\n    } else {\r\n      let stack = this._stack.reference();\r\n      stack.a *= x;\r\n      stack.b *= x;\r\n      stack.c *= y;\r\n      stack.d *= y;\r\n    }\r\n  }\r\n  //#endregion SCALE\r\n\r\n  //#region SETTRANSFORM\r\n  /**\r\n   * The CanvasRenderingContext2D.setTransform() method of the Canvas 2D API resets (overrides) the\r\n   * current transformation to the identity matrix, and then invokes a transformation described by\r\n   * the arguments of this method. This lets you scale, rotate, translate (move), and skew the\r\n   * context.\r\n   *\r\n   * @param {f64} a - Horizontal scaling. A value of 1 results in no scaling.\r\n   * @param {f64} b - Vertical skewing.\r\n   * @param {f64} c - Horizontal skewing.\r\n   * @param {f64} d - Vertical scaling. A value of 1 results in no scaling.\r\n   * @param {f64} e - Horizontal translation (moving).\r\n   * @param {f64} f - Vertical translation (moving).\r\n   */\r\n  public setTransform(a: f64, b: f64, c: f64, d: f64, e: f64, f: f64): void {\r\n    if (!isFinite(a + b + c + d + e + f)) return ;\r\n    let stack = this._stack.reference();\r\n    stack.a = a;\r\n    stack.b = b;\r\n    stack.c = c;\r\n    stack.d = d;\r\n    stack.e = e;\r\n    stack.f = f;\r\n  }\r\n  //#endregion SETTRANSFORM\r\n\r\n  //#region STROKE\r\n  /**\r\n   * The CanvasRenderingContext2D.stroke() method of the Canvas 2D API strokes (outlines) the\r\n   * current or given path with the current stroke style. Strokes are aligned to the center of a\r\n   * path; in other words, half of the stroke is drawn on the inner side, and half on the outer\r\n   * side. The stroke is drawn using the non-zero winding rule, which means that path intersections\r\n   * will still get filled.\r\n   */\r\n  public stroke(): void {\r\n    /**\r\n     * If there are no items on the path, there is no reason to fill. Index 1 means the path buffer\r\n     * is pointing to a single `beginPath()` operation and it does not matter if fill is called at\r\n     * this point.\r\n     */\r\n    if (this._path == this._pathStart.increment()) return;\r\n\r\n    /**\r\n     * If the lineWidth is zero, there is no line and it does not matter if ctx.stroke() is called.\r\n     */\r\n    if (this._stack.reference().lineWidth <= 0.0) return;\r\n    this._updateFilter();\r\n    this._updateGlobalAlpha();\r\n    this._updateGlobalCompositeOperation();\r\n    this._updateImageSmoothingEnabled();\r\n    this._updateImageSmoothingQuality();\r\n    this._updateLineCap();\r\n    this._updateLineDash();\r\n    this._updateLineDashOffset();\r\n    this._updateLineJoin();\r\n    this._updateLineWidth();\r\n    this._updateMiterLimit();\r\n    this._updatePath();\r\n    this._updateShadowBlur();\r\n    this._updateShadowColor();\r\n    this._updateShadowOffsetX();\r\n    this._updateShadowOffsetY();\r\n    this._updateStrokeStyle();\r\n    this._updateTransform();\r\n    super._writeZero(CanvasInstruction.Stroke);\r\n  }\r\n  //#endregion STROKE\r\n\r\n  //#region STROKERECT\r\n  /**\r\n   * The CanvasRenderingContext2D.strokeRect() method of the Canvas 2D API draws a rectangle that is\r\n   * stroked (outlined) according to the current strokeStyle and other context settings. This method\r\n   * draws directly to the canvas without modifying the current path, so any subsequent fill() or\r\n   * stroke() calls will have no effect on it.\r\n   *\r\n   * @param {f64} x - The x-axis coordinate of the rectangle's starting point.\r\n   * @param {f64} y - The y-axis coordinate of the rectangle's starting point.\r\n   * @param {f64} width - The rectangle's width. Positive values are to the right, and negative to\r\n   * the left.\r\n   * @param {f64} height - The rectangle's height. Positive values are down, and negative are up.\r\n   */\r\n  public strokeRect(x: f64, y: f64, width: f64, height: f64): void {\r\n    /**\r\n     * If the lineWidth is zero, there is no line and it does not matter if ctx.stroke() is called.\r\n     */\r\n    if (this._stack.reference().lineWidth <= 0.0) return;\r\n    this._updateFilter();\r\n    this._updateGlobalAlpha();\r\n    this._updateGlobalCompositeOperation();\r\n    this._updateImageSmoothingEnabled();\r\n    this._updateImageSmoothingQuality();\r\n    this._updateLineCap();\r\n    this._updateLineDash();\r\n    this._updateLineDashOffset();\r\n    this._updateLineJoin();\r\n    this._updateLineWidth();\r\n    this._updateMiterLimit();\r\n    this._updateShadowBlur();\r\n    this._updateShadowColor();\r\n    this._updateShadowOffsetX();\r\n    this._updateShadowOffsetY();\r\n    this._updateStrokeStyle();\r\n    this._updateTransform();\r\n    super._writeFour(CanvasInstruction.StrokeRect, x, y, width, height);\r\n  }\r\n  //#endregion STROKERECT\r\n\r\n  //#region STROKETEXT\r\n  /**\r\n   * The CanvasRenderingContext2D method strokeText(), part of the Canvas 2D API, strokes — that is,\r\n   * draws the outlines of — the characters of a text string at the specified coordinates. An\r\n   * optional parameter allows specifying a maximum width for the rendered text, which the user\r\n   * agent will achieve by condensing the text or by using a lower font size. This method draws\r\n   * directly to the canvas without modifying the current path, so any subsequent fill() or stroke()\r\n   * calls will have no effect on it. To use the maxWidth parameter, use the strokeTextWidth\r\n   * function.\r\n   *\r\n   * @param {string} text - A DOMString specifying the text string to render into the context. The\r\n   * text is rendered using the settings specified by font, textAlign, textBaseline, and direction.\r\n   * @param {f64} x - The x-axis coordinate of the point at which to begin drawing the text.\r\n   * @param {f64} y - The y-axis coordinate of the point at which to begin drawing the text.\r\n   */\r\n  public strokeText(text: string, x: f64, y: f64): void {\r\n    if (!isFinite(x + y) || text == null || text.length == 0) return;\r\n    this._updateDirection();\r\n    this._updateFilter();\r\n    this._updateFont();\r\n    this._updateGlobalAlpha();\r\n    this._updateGlobalCompositeOperation();\r\n    this._updateImageSmoothingEnabled();\r\n    this._updateImageSmoothingQuality();\r\n    this._updateLineCap();\r\n    this._updateLineDash();\r\n    this._updateLineDashOffset();\r\n    this._updateLineJoin();\r\n    this._updateLineWidth();\r\n    this._updateMiterLimit();\r\n    this._updateShadowBlur();\r\n    this._updateShadowColor();\r\n    this._updateShadowOffsetX();\r\n    this._updateShadowOffsetY();\r\n    this._updateStrokeStyle();\r\n    this._updateTextAlign();\r\n    this._updateTextBaseline();\r\n    this._updateTransform();\r\n    super._retain(changetype<usize>(text));\r\n    super._writeThree(CanvasInstruction.StrokeText, <f64>changetype<usize>(text), x, y)\r\n  }\r\n\r\n  /**\r\n   * The CanvasRenderingContext2D method strokeTextWidth(), part of the Canvas 2D API, strokes —\r\n   * that is, draws the outlines of — the characters of a text string at the specified coordinates.\r\n   * An optional parameter allows specifying a maximum width for the rendered text, which the user\r\n   * agent will achieve by condensing the text or by using a lower font size. This method draws\r\n   * directly to the canvas without modifying the current path, so any subsequent fill() or stroke()\r\n   * calls will have no effect on it. To use the maxWidth parameter, use the strokeTextWidth\r\n   * function.\r\n   *\r\n   * @param {string} text - A DOMString specifying the text string to render into the context. The\r\n   * text is rendered using the settings specified by font, textAlign, textBaseline, and direction.\r\n   * @param {f64} x - The x-axis coordinate of the point at which to begin drawing the text.\r\n   * @param {f64} y - The y-axis coordinate of the point at which to begin drawing the text.\r\n   * @param {f64} maxWidth - The maximum width the text may be once rendered. If not specified,\r\n   * there is no limit to the width of the text. However, if this value is provided, the user agent\r\n   * will adjust the kerning, select a more horizontally condensed font (if one is available or can\r\n   * be generated without loss of quality), or scale down to a smaller font size in order to fit the\r\n   * text in the specified width.\r\n   */\r\n  public strokeTextWidth(text: string, x: f64, y: f64, maxWidth: f64): void {\r\n    if (!isFinite(x + y + maxWidth) || text == null || text.length == 0 || maxWidth < 0) return;\r\n    this._updateDirection();\r\n    this._updateFilter();\r\n    this._updateFont();\r\n    this._updateGlobalAlpha();\r\n    this._updateGlobalCompositeOperation();\r\n    this._updateImageSmoothingEnabled();\r\n    this._updateImageSmoothingQuality();\r\n    this._updateLineCap();\r\n    this._updateLineDash();\r\n    this._updateLineDashOffset();\r\n    this._updateLineJoin();\r\n    this._updateLineWidth();\r\n    this._updateMiterLimit();\r\n    this._updateShadowBlur();\r\n    this._updateShadowColor();\r\n    this._updateShadowOffsetX();\r\n    this._updateShadowOffsetY();\r\n    this._updateStrokeStyle();\r\n    this._updateTextAlign();\r\n    this._updateTextBaseline();\r\n    this._updateTransform();\r\n    super._retain(changetype<usize>(text));\r\n    super._writeFour(CanvasInstruction.StrokeTextWidth, <f64>changetype<usize>(text), x, y, maxWidth);\r\n  }\r\n  //#endregion STROKETEXT\r\n\r\n  //#region TRANSFORM\r\n  /**\r\n   * The CanvasRenderingContext2D.transform() method of the Canvas 2D API multiplies the current\r\n   * transformation with the matrix described by the arguments of this method. This lets you scale,\r\n   * rotate, translate (move), and skew the context.\r\n   *\r\n   * @param {f64} a - Horizontal scaling. A value of 1 results in no scaling.\r\n   * @param {f64} b - Vertical skewing.\r\n   * @param {f64} c - Horizontal skewing.\r\n   * @param {f64} d - Vertical scaling. A value of 1 results in no scaling.\r\n   * @param {f64} e - Horizontal translation (moving).\r\n   * @param {f64} f - Vertical translation (moving).\r\n   */\r\n  public transform(a: f64, b: f64, c: f64, d: f64, e: f64, f: f64): void {\r\n    if (!isFinite(a + b + c + d + e + f)) return;\r\n    if (ASC_FEATURE_SIMD) {\r\n      let stack = this._stack.dereference();\r\n      let ab = v128.load(stack, offsetof<CanvasStack>(\"a\"));\r\n      let cd = v128.load(stack, offsetof<CanvasStack>(\"c\"));\r\n      let ef = v128.load(stack, offsetof<CanvasStack>(\"e\"));\r\n      v128.store(\r\n        stack,\r\n        v128.add<f64>(\r\n          v128.mul<f64>(ab, v128.splat<f64>(a)),\r\n          v128.mul<f64>(cd, v128.splat<f64>(b)),\r\n        ),\r\n        offsetof<CanvasStack>(\"a\"),\r\n      );\r\n      v128.store(\r\n        stack,\r\n        v128.add<f64>(\r\n          v128.mul<f64>(ab, v128.splat<f64>(c)),\r\n          v128.mul<f64>(cd, v128.splat<f64>(d)),\r\n        ),\r\n        offsetof<CanvasStack>(\"c\"),\r\n      );\r\n      v128.store(\r\n        stack,\r\n        v128.add<f64>(\r\n          v128.add<f64>(\r\n            v128.mul<f64>(ab, v128.splat<f64>(e)),\r\n            v128.mul<f64>(cd, v128.splat<f64>(f)),\r\n          ),\r\n          ef,\r\n        ),\r\n        offsetof<CanvasStack>(\"e\"),\r\n      );\r\n    } else {\r\n      let stack = this._stack.reference();\r\n      var sa = stack.a;\r\n      var sb = stack.b;\r\n      var sc = stack.c;\r\n      var sd = stack.d;\r\n      var se = stack.e;\r\n      var sf = stack.f;\r\n      stack.a = sa * a + sc * b;\r\n      stack.b = sb * a + sd * b;\r\n      stack.c = sa * c + sc * d;\r\n      stack.d = sb * c + sd * d;\r\n      stack.e = sa * e + sc * f + se;\r\n      stack.f = sb * e + sd * f + sf;\r\n    }\r\n  }\r\n  //#endregion TRANSFORM\r\n\r\n  //#region TRANSLATE\r\n  /**\r\n   * The CanvasRenderingContext2D.translate() method of the Canvas 2D API adds a translation\r\n   * transformation to the current matrix.\r\n   * @param {f64} x - Distance to move in the horizontal direction. Positive values are to the\r\n   * right, and negative to the left.\r\n   * @param {f64} y - Distance to move in the vertical direction. Positive values are down, and\r\n   * negative are up.\r\n   */\r\n  public translate(x: f64, y: f64): void {\r\n    if (!isFinite(x + y)) return;\r\n\r\n    if (ASC_FEATURE_SIMD) {\r\n      let stack = this._stack.dereference();\r\n      v128.store(\r\n        stack,\r\n        v128.add<f64>(\r\n          v128.mul<f64>(\r\n            v128.load(stack, offsetof<CanvasStack>(\"a\")),\r\n            v128.splat<f64>(x),\r\n          ),\r\n          v128.mul<f64>(\r\n            v128.load(stack, offsetof<CanvasStack>(\"c\")),\r\n            v128.splat<f64>(y),\r\n          ),\r\n        ),\r\n        offsetof<CanvasStack>(\"e\"),\r\n      );\r\n    } else {\r\n      let stack = this._stack.reference();\r\n      stack.e += stack.a * x + stack.c * y;\r\n      stack.f += stack.b * x + stack.d * y;\r\n    }\r\n  }\r\n  //#endregion TRANSLATE\r\n\r\n  public commit(): void {\r\n    super._writeZero(CanvasInstruction.Commit);\r\n    render(this.id, changetype<usize>(this._buffer));\r\n    super._resetBuffer();\r\n  }\r\n}\r\n","/// <reference path=\"./rt/index.d.ts\" />\n\nimport { BLOCK, BLOCK_MAXSIZE, BLOCK_OVERHEAD } from \"./rt/common\";\nimport { idof } from \"./builtins\";\nimport { E_INVALIDLENGTH } from \"./util/error\";\n\nexport abstract class ArrayBufferView {\n\n  readonly buffer: ArrayBuffer;\n  @unsafe readonly dataStart: usize;\n  readonly byteLength: i32;\n\n  get byteOffset(): i32 {\n    return <i32>(this.dataStart - changetype<usize>(this.buffer));\n  }\n\n  get length(): i32 {\n    ERROR(\"missing implementation: subclasses must implement ArrayBufferView#length\");\n    return unreachable();\n  }\n\n  protected constructor(length: i32, alignLog2: i32) {\n    if (<u32>length > <u32>BLOCK_MAXSIZE >>> alignLog2) throw new RangeError(E_INVALIDLENGTH);\n    var buffer = __alloc(length = length << alignLog2, idof<ArrayBuffer>());\n    memory.fill(buffer, 0, <usize>length);\n    this.buffer = changetype<ArrayBuffer>(buffer); // retains\n    this.dataStart = buffer;\n    this.byteLength = length;\n  }\n}\n\n@sealed export class ArrayBuffer {\n\n  static isView<T>(value: T): bool {\n    if (isNullable<T>()) {\n      if (value === null) return false;\n    }\n    if (value instanceof Int8Array) return true;\n    if (value instanceof Uint8Array) return true;\n    if (value instanceof Uint8ClampedArray) return true;\n    if (value instanceof Int16Array) return true;\n    if (value instanceof Uint16Array) return true;\n    if (value instanceof Int32Array) return true;\n    if (value instanceof Uint32Array) return true;\n    if (value instanceof Int64Array) return true;\n    if (value instanceof Uint64Array) return true;\n    if (value instanceof Float32Array) return true;\n    if (value instanceof Float64Array) return true;\n    if (value instanceof DataView) return true;\n    return false;\n  }\n\n  constructor(length: i32) {\n    if (<u32>length > <u32>BLOCK_MAXSIZE) throw new RangeError(E_INVALIDLENGTH);\n    var buffer = __alloc(<usize>length, idof<ArrayBuffer>());\n    memory.fill(buffer, 0, <usize>length);\n    return changetype<ArrayBuffer>(buffer); // retains\n  }\n\n  get byteLength(): i32 {\n    return changetype<BLOCK>(changetype<usize>(this) - BLOCK_OVERHEAD).rtSize;\n  }\n\n  slice(begin: i32 = 0, end: i32 = BLOCK_MAXSIZE): ArrayBuffer {\n    var length = this.byteLength;\n    begin = begin < 0 ? max(length + begin, 0) : min(begin, length);\n    end   = end   < 0 ? max(length + end  , 0) : min(end  , length);\n    var outSize = <usize>max(end - begin, 0);\n    var out = __alloc(outSize, idof<ArrayBuffer>());\n    memory.copy(out, changetype<usize>(this) + <usize>begin, outSize);\n    return changetype<ArrayBuffer>(out); // retains\n  }\n\n  toString(): string {\n    return \"[object ArrayBuffer]\";\n  }\n}\n","// Common error messages for use accross the standard library. Keeping error messages compact\n// and reusing them where possible ensures minimal static data in binaries.\n\n// @ts-ignore: decorator\n@lazy @inline\nexport const E_INDEXOUTOFRANGE: string = \"Index out of range\";\n\n// @ts-ignore: decorator\n@lazy @inline\nexport const E_INVALIDLENGTH: string = \"Invalid length\";\n\n// @ts-ignore: decorator\n@lazy @inline\nexport const E_EMPTYARRAY: string = \"Array is empty\";\n\n// @ts-ignore: decorator\n@lazy @inline\nexport const E_HOLEYARRAY: string = \"Element type must be nullable if array is holey\";\n\n// @ts-ignore: decorator\n@lazy @inline\nexport const E_NOTIMPLEMENTED: string = \"Not implemented\";\n\n// @ts-ignore: decorator\n@lazy @inline\nexport const E_KEYNOTFOUND: string = \"Key does not exist\";\n","import { memcmp, memmove, memset } from \"./util/memory\";\nimport { E_NOTIMPLEMENTED } from \"./util/error\";\n\n/** Memory manager interface. */\nexport namespace memory {\n\n  /** Gets the size of the memory in pages. */\n  // @ts-ignore: decorator\n  @builtin\n  export declare function size(): i32;\n\n  /** Grows the memory by the given size in pages and returns the previous size in pages. */\n  // @ts-ignore: decorator\n  @unsafe @builtin\n  export declare function grow(pages: i32): i32;\n\n  /** Fills a section in memory with the specified byte value. */\n  // @ts-ignore: decorator\n  @unsafe @builtin\n  export function fill(dst: usize, c: u8, n: usize): void {\n    memset(dst, c, n); // fallback if \"bulk-memory\" isn't enabled\n  }\n\n  /** Copies a section of memory to another. Has move semantics. */\n  // @ts-ignore: decorator\n  @unsafe @builtin\n  export function copy(dst: usize, src: usize, n: usize): void {\n    memmove(dst, src, n); // fallback if \"bulk-memory\" isn't enabled\n  }\n\n  /** Initializes a memory segment. */\n  // @ts-ignore: decorator\n  @unsafe\n  export function init(segmentIndex: u32, srcOffset: usize, dstOffset: usize, n: usize): void {\n    throw new Error(E_NOTIMPLEMENTED);\n  }\n\n  /** Drops a memory segment. */\n  // @ts-ignore: decorator\n  @unsafe\n  export function drop(segmentIndex: u32): void {\n    throw new Error(E_NOTIMPLEMENTED);\n  }\n\n  /** Repeats a section of memory at a specific address. */\n  // @ts-ignore: decorator\n  @unsafe\n  export function repeat(dst: usize, src: usize, srcLength: usize, count: usize): void {\n    var index: usize = 0;\n    var total = srcLength * count;\n    while (index < total) {\n      memory.copy(dst + index, src, srcLength);\n      index += srcLength;\n    }\n  }\n\n  /** Compares a section of memory to another. */\n  // @ts-ignore: decorator\n  @inline\n  export function compare(vl: usize, vr: usize, n: usize): i32 {\n    return memcmp(vl, vr, n);\n  }\n}\n","export function memcpy(dest: usize, src: usize, n: usize): void { // see: musl/src/string/memcpy.c\n  var w: u32, x: u32;\n\n  // copy 1 byte each until src is aligned to 4 bytes\n  while (n && (src & 3)) {\n    store<u8>(dest++, load<u8>(src++));\n    n--;\n  }\n\n  // if dst is aligned to 4 bytes as well, copy 4 bytes each\n  if ((dest & 3) == 0) {\n    while (n >= 16) {\n      store<u32>(dest     , load<u32>(src     ));\n      store<u32>(dest +  4, load<u32>(src +  4));\n      store<u32>(dest +  8, load<u32>(src +  8));\n      store<u32>(dest + 12, load<u32>(src + 12));\n      src += 16; dest += 16; n -= 16;\n    }\n    if (n & 8) {\n      store<u32>(dest    , load<u32>(src    ));\n      store<u32>(dest + 4, load<u32>(src + 4));\n      dest += 8; src += 8;\n    }\n    if (n & 4) {\n      store<u32>(dest, load<u32>(src));\n      dest += 4; src += 4;\n    }\n    if (n & 2) { // drop to 2 bytes each\n      store<u16>(dest, load<u16>(src));\n      dest += 2; src += 2;\n    }\n    if (n & 1) { // drop to 1 byte\n      store<u8>(dest++, load<u8>(src++));\n    }\n    return;\n  }\n\n  // if dst is not aligned to 4 bytes, use alternating shifts to copy 4 bytes each\n  // doing shifts if faster when copying enough bytes (here: 32 or more)\n  if (n >= 32) {\n    switch (dest & 3) {\n      // known to be != 0\n      case 1: {\n        w = load<u32>(src);\n        store<u8>(dest++, load<u8>(src++));\n        store<u8>(dest++, load<u8>(src++));\n        store<u8>(dest++, load<u8>(src++));\n        n -= 3;\n        while (n >= 17) {\n          x = load<u32>(src + 1);\n          store<u32>(dest, w >> 24 | x << 8);\n          w = load<u32>(src + 5);\n          store<u32>(dest + 4, x >> 24 | w << 8);\n          x = load<u32>(src + 9);\n          store<u32>(dest + 8, w >> 24 | x << 8);\n          w = load<u32>(src + 13);\n          store<u32>(dest + 12, x >> 24 | w << 8);\n          src += 16; dest += 16; n -= 16;\n        }\n        break;\n      }\n      case 2: {\n        w = load<u32>(src);\n        store<u8>(dest++, load<u8>(src++));\n        store<u8>(dest++, load<u8>(src++));\n        n -= 2;\n        while (n >= 18) {\n          x = load<u32>(src + 2);\n          store<u32>(dest, w >> 16 | x << 16);\n          w = load<u32>(src + 6);\n          store<u32>(dest + 4, x >> 16 | w << 16);\n          x = load<u32>(src + 10);\n          store<u32>(dest + 8, w >> 16 | x << 16);\n          w = load<u32>(src + 14);\n          store<u32>(dest + 12, x >> 16 | w << 16);\n          src += 16; dest += 16; n -= 16;\n        }\n        break;\n      }\n      case 3: {\n        w = load<u32>(src);\n        store<u8>(dest++, load<u8>(src++));\n        n -= 1;\n        while (n >= 19) {\n          x = load<u32>(src + 3);\n          store<u32>(dest, w >> 8 | x << 24);\n          w = load<u32>(src + 7);\n          store<u32>(dest + 4, x >> 8 | w << 24);\n          x = load<u32>(src + 11);\n          store<u32>(dest + 8, w >> 8 | x << 24);\n          w = load<u32>(src + 15);\n          store<u32>(dest + 12, x >> 8 | w << 24);\n          src += 16; dest += 16; n -= 16;\n        }\n        break;\n      }\n    }\n  }\n\n  // copy remaining bytes one by one\n  if (n & 16) {\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n  }\n  if (n & 8) {\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n  }\n  if (n & 4) {\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n  }\n  if (n & 2) {\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n  }\n  if (n & 1) {\n    store<u8>(dest++, load<u8>(src++));\n  }\n}\n\n// @ts-ignore: decorator\n@inline\nexport function memmove(dest: usize, src: usize, n: usize): void { // see: musl/src/string/memmove.c\n  if (dest === src) return;\n  if (ASC_SHRINK_LEVEL < 1) {\n    if (src + n <= dest || dest + n <= src) {\n      memcpy(dest, src, n);\n      return;\n    }\n  }\n  if (dest < src) {\n    if (ASC_SHRINK_LEVEL < 2) {\n      if ((src & 7) == (dest & 7)) {\n        while (dest & 7) {\n          if (!n) return;\n          --n;\n          store<u8>(dest++, load<u8>(src++));\n        }\n        while (n >= 8) {\n          store<u64>(dest, load<u64>(src));\n          n    -= 8;\n          dest += 8;\n          src  += 8;\n        }\n      }\n    }\n    while (n) {\n      store<u8>(dest++, load<u8>(src++));\n      --n;\n    }\n  } else {\n    if (ASC_SHRINK_LEVEL < 2) {\n      if ((src & 7) == (dest & 7)) {\n        while ((dest + n) & 7) {\n          if (!n) return;\n          store<u8>(dest + --n, load<u8>(src + n));\n        }\n        while (n >= 8) {\n          n -= 8;\n          store<u64>(dest + n, load<u64>(src + n));\n        }\n      }\n    }\n    while (n) {\n      store<u8>(dest + --n, load<u8>(src + n));\n    }\n  }\n}\n\n// @ts-ignore: decorator\n@inline\nexport function memset(dest: usize, c: u8, n: usize): void { // see: musl/src/string/memset\n  if (ASC_SHRINK_LEVEL > 1) {\n    while (n) {\n      store<u8>(dest++, c);\n      --n;\n    }\n  } else {\n    // fill head and tail with minimal branching\n    if (!n) return;\n    store<u8>(dest, c);\n    store<u8>(dest + n - 1, c);\n    if (n <= 2) return;\n\n    store<u8>(dest + 1, c);\n    store<u8>(dest + 2, c);\n    store<u8>(dest + n - 2, c);\n    store<u8>(dest + n - 3, c);\n    if (n <= 6) return;\n    store<u8>(dest + 3, c);\n    store<u8>(dest + n - 4, c);\n    if (n <= 8) return;\n\n    // advance pointer to align it at 4-byte boundary\n    let k: usize = -dest & 3;\n    dest += k;\n    n -= k;\n    n &= -4;\n\n    let c32: u32 = <u32>-1 / 255 * c;\n\n    // fill head/tail up to 28 bytes each in preparation\n    store<u32>(dest, c32);\n    store<u32>(dest + n - 4, c32);\n    if (n <= 8) return;\n    store<u32>(dest + 4, c32);\n    store<u32>(dest + 8, c32);\n    store<u32>(dest + n - 12, c32);\n    store<u32>(dest + n - 8, c32);\n    if (n <= 24) return;\n    store<u32>(dest + 12, c32);\n    store<u32>(dest + 16, c32);\n    store<u32>(dest + 20, c32);\n    store<u32>(dest + 24, c32);\n    store<u32>(dest + n - 28, c32);\n    store<u32>(dest + n - 24, c32);\n    store<u32>(dest + n - 20, c32);\n    store<u32>(dest + n - 16, c32);\n\n    // align to a multiple of 8\n    k = 24 + (dest & 4);\n    dest += k;\n    n -= k;\n\n    // copy 32 bytes each\n    let c64: u64 = <u64>c32 | (<u64>c32 << 32);\n    while (n >= 32) {\n      store<u64>(dest, c64);\n      store<u64>(dest + 8, c64);\n      store<u64>(dest + 16, c64);\n      store<u64>(dest + 24, c64);\n      n -= 32;\n      dest += 32;\n    }\n  }\n}\n\n// @ts-ignore: decorator\n@inline\nexport function memcmp(vl: usize, vr: usize, n: usize): i32 {\n  if (vl == vr) return 0;\n  if (ASC_SHRINK_LEVEL < 2) {\n    if ((vl & 7) == (vr & 7)) {\n      while (vl & 7) {\n        if (!n) return 0;\n        let a = <i32>load<u8>(vl);\n        let b = <i32>load<u8>(vr);\n        if (a != b) return a - b;\n        n--; vl++; vr++;\n      }\n      while (n >= 8) {\n        if (load<u64>(vl) != load<u64>(vr)) break;\n        vl += 8;\n        vr += 8;\n        n  -= 8;\n      }\n    }\n  }\n  while (n--) {\n    let a = <i32>load<u8>(vl);\n    let b = <i32>load<u8>(vr);\n    if (a != b) return a - b;\n    vl++; vr++;\n  }\n  return 0;\n}\n","/// <reference path=\"../rt/index.d.ts\" />\n\nimport { idof } from \"../builtins\";\nimport { CharCode } from \"./string\";\nimport { ArrayBufferView } from \"../arraybuffer\";\n\n// @ts-ignore: decorator\n@inline\nexport const MAX_DOUBLE_LENGTH = 28;\n\n// @ts-ignore: decorator\n@lazy @inline\nconst POWERS10: u32[] = [\n  1,\n  10,\n  100,\n  1000,\n  10000,\n  100000,\n  1000000,\n  10000000,\n  100000000,\n  1000000000\n];\n\n/*\n  Lookup table for pairwise char codes in range [0-99]\n\n  \"00\", \"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\",\n  \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\",\n  \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\",\n  \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\",\n  \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\",\n  \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\",\n  \"60\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\",\n  \"70\", \"71\", \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\",\n  \"80\", \"81\", \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\",\n  \"90\", \"91\", \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\"\n*/\n// @ts-ignore: decorator\n@lazy @inline\nconst DIGITS: u32[] = [\n  0x00300030, 0x00310030, 0x00320030, 0x00330030, 0x00340030,\n  0x00350030, 0x00360030, 0x00370030, 0x00380030, 0x00390030,\n  0x00300031, 0x00310031, 0x00320031, 0x00330031, 0x00340031,\n  0x00350031, 0x00360031, 0x00370031, 0x00380031, 0x00390031,\n  0x00300032, 0x00310032, 0x00320032, 0x00330032, 0x00340032,\n  0x00350032, 0x00360032, 0x00370032, 0x00380032, 0x00390032,\n  0x00300033, 0x00310033, 0x00320033, 0x00330033, 0x00340033,\n  0x00350033, 0x00360033, 0x00370033, 0x00380033, 0x00390033,\n  0x00300034, 0x00310034, 0x00320034, 0x00330034, 0x00340034,\n  0x00350034, 0x00360034, 0x00370034, 0x00380034, 0x00390034,\n  0x00300035, 0x00310035, 0x00320035, 0x00330035, 0x00340035,\n  0x00350035, 0x00360035, 0x00370035, 0x00380035, 0x00390035,\n  0x00300036, 0x00310036, 0x00320036, 0x00330036, 0x00340036,\n  0x00350036, 0x00360036, 0x00370036, 0x00380036, 0x00390036,\n  0x00300037, 0x00310037, 0x00320037, 0x00330037, 0x00340037,\n  0x00350037, 0x00360037, 0x00370037, 0x00380037, 0x00390037,\n  0x00300038, 0x00310038, 0x00320038, 0x00330038, 0x00340038,\n  0x00350038, 0x00360038, 0x00370038, 0x00380038, 0x00390038,\n  0x00300039, 0x00310039, 0x00320039, 0x00330039, 0x00340039,\n  0x00350039, 0x00360039, 0x00370039, 0x00380039, 0x00390039\n];\n\n// @ts-ignore: decorator\n@lazy @inline\nconst EXP_POWERS: i16[] = [\n  -1220, -1193, -1166, -1140, -1113, -1087, -1060, -1034, -1007,  -980,\n   -954,  -927,  -901,  -874,  -847,  -821,  -794,  -768,  -741,  -715,\n   -688,  -661,  -635,  -608,  -582,  -555,  -529,  -502,  -475,  -449,\n   -422,  -396,  -369,  -343,  -316,  -289,  -263,  -236,  -210,  -183,\n   -157,  -130,  -103,   -77,   -50,   -24,     3,    30,    56,    83,\n    109,   136,   162,   189,   216,   242,   269,   295,   322,   348,\n    375,   402,   428,   455,   481,   508,   534,   561,   588,   614,\n    641,   667,   694,   720,   747,   774,   800,   827,   853,   880,\n    907,   933,   960,   986,  1013,  1039,  1066\n];\n\n// 1e-348, 1e-340, ..., 1e340\n// @ts-ignore: decorator\n@lazy @inline\nconst FRC_POWERS: u64[] = [\n  0xFA8FD5A0081C0288, 0xBAAEE17FA23EBF76, 0x8B16FB203055AC76, 0xCF42894A5DCE35EA,\n  0x9A6BB0AA55653B2D, 0xE61ACF033D1A45DF, 0xAB70FE17C79AC6CA, 0xFF77B1FCBEBCDC4F,\n  0xBE5691EF416BD60C, 0x8DD01FAD907FFC3C, 0xD3515C2831559A83, 0x9D71AC8FADA6C9B5,\n  0xEA9C227723EE8BCB, 0xAECC49914078536D, 0x823C12795DB6CE57, 0xC21094364DFB5637,\n  0x9096EA6F3848984F, 0xD77485CB25823AC7, 0xA086CFCD97BF97F4, 0xEF340A98172AACE5,\n  0xB23867FB2A35B28E, 0x84C8D4DFD2C63F3B, 0xC5DD44271AD3CDBA, 0x936B9FCEBB25C996,\n  0xDBAC6C247D62A584, 0xA3AB66580D5FDAF6, 0xF3E2F893DEC3F126, 0xB5B5ADA8AAFF80B8,\n  0x87625F056C7C4A8B, 0xC9BCFF6034C13053, 0x964E858C91BA2655, 0xDFF9772470297EBD,\n  0xA6DFBD9FB8E5B88F, 0xF8A95FCF88747D94, 0xB94470938FA89BCF, 0x8A08F0F8BF0F156B,\n  0xCDB02555653131B6, 0x993FE2C6D07B7FAC, 0xE45C10C42A2B3B06, 0xAA242499697392D3,\n  0xFD87B5F28300CA0E, 0xBCE5086492111AEB, 0x8CBCCC096F5088CC, 0xD1B71758E219652C,\n  0x9C40000000000000, 0xE8D4A51000000000, 0xAD78EBC5AC620000, 0x813F3978F8940984,\n  0xC097CE7BC90715B3, 0x8F7E32CE7BEA5C70, 0xD5D238A4ABE98068, 0x9F4F2726179A2245,\n  0xED63A231D4C4FB27, 0xB0DE65388CC8ADA8, 0x83C7088E1AAB65DB, 0xC45D1DF942711D9A,\n  0x924D692CA61BE758, 0xDA01EE641A708DEA, 0xA26DA3999AEF774A, 0xF209787BB47D6B85,\n  0xB454E4A179DD1877, 0x865B86925B9BC5C2, 0xC83553C5C8965D3D, 0x952AB45CFA97A0B3,\n  0xDE469FBD99A05FE3, 0xA59BC234DB398C25, 0xF6C69A72A3989F5C, 0xB7DCBF5354E9BECE,\n  0x88FCF317F22241E2, 0xCC20CE9BD35C78A5, 0x98165AF37B2153DF, 0xE2A0B5DC971F303A,\n  0xA8D9D1535CE3B396, 0xFB9B7CD9A4A7443C, 0xBB764C4CA7A44410, 0x8BAB8EEFB6409C1A,\n  0xD01FEF10A657842C, 0x9B10A4E5E9913129, 0xE7109BFBA19C0C9D, 0xAC2820D9623BF429,\n  0x80444B5E7AA7CF85, 0xBF21E44003ACDD2D, 0x8E679C2F5E44FF8F, 0xD433179D9C8CB841,\n  0x9E19DB92B4E31BA9, 0xEB96BF6EBADF77D9, 0xAF87023B9BF0EE6B\n];\n\n// Count number of decimals for u32 values\n// In our case input value always non-zero so we can simplify some parts\nexport function decimalCount32(value: u32): u32 {\n  if (value < 100000) {\n    if (value < 100) {\n      return select<u32>(1, 2, value < 10);\n    } else {\n      let m = select<u32>(4, 5, value < 10000);\n      return select<u32>(3, m, value < 1000);\n    }\n  } else {\n    if (value < 10000000) {\n      return select<u32>(6, 7, value < 1000000);\n    } else {\n      let m = select<u32>(9, 10, value < 1000000000);\n      return select<u32>(8, m, value < 100000000);\n    }\n  }\n}\n\n// Count number of decimals for u64 values\n// In our case input value always greater than 2^32-1 so we can skip some parts\nexport function decimalCount64(value: u64): u32 {\n  if (value < 1000000000000000) {\n    if (value < 1000000000000) {\n      let m = select<u32>(11, 12, value < 100000000000);\n      return select<u32>(10, m, value < 10000000000);\n    } else {\n      let m = select<u32>(14, 15, value < 100000000000000);\n      return select<u32>(13, m, value < 10000000000000);\n    }\n  } else {\n    if (value < 100000000000000000) {\n      return select<u32>(16, 17, value < 10000000000000000);\n    } else {\n      let m = select<u32>(19, 20, value < 10000000000000000000);\n      return select<u32>(18, m, value < 1000000000000000000);\n    }\n  }\n}\n\nfunction utoa32_lut(buffer: usize, num: u32, offset: usize): void {\n  var lut = changetype<ArrayBufferView>(DIGITS).dataStart;\n  while (num >= 10000) {\n    // in most VMs i32/u32 div and modulo by constant can be shared and simplificate\n    let t = num / 10000;\n    let r = num % 10000;\n    num = t;\n\n    let d1 = r / 100;\n    let d2 = r % 100;\n\n    let digits1 = <u64>load<u32>(lut + (<usize>d1 << alignof<u32>()));\n    let digits2 = <u64>load<u32>(lut + (<usize>d2 << alignof<u32>()));\n\n    offset -= 4;\n    store<u64>(buffer + (offset << 1), digits1 | (digits2 << 32));\n  }\n\n  if (num >= 100) {\n    let t  = num / 100;\n    let d1 = num % 100;\n    num = t;\n    offset -= 2;\n    let digits = load<u32>(lut + (<usize>d1 << alignof<u32>()));\n    store<u32>(buffer + (offset << 1), digits);\n  }\n\n  if (num >= 10) {\n    offset -= 2;\n    let digits = load<u32>(lut + (<usize>num << alignof<u32>()));\n    store<u32>(buffer + (offset << 1), digits);\n  } else {\n    offset -= 1;\n    let digit = CharCode._0 + num;\n    store<u16>(buffer + (offset << 1), digit);\n  }\n}\n\nfunction utoa64_lut(buffer: usize, num: u64, offset: usize): void {\n  var lut = changetype<ArrayBufferView>(DIGITS).dataStart;\n  while (num >= 100000000) {\n    let t = num / 100000000;\n    let r = <usize>(num - t * 100000000);\n    num = t;\n\n    let b = r / 10000;\n    let c = r % 10000;\n\n    let b1 = b / 100;\n    let b2 = b % 100;\n    let c1 = c / 100;\n    let c2 = c % 100;\n\n    let digits1 = <u64>load<u32>(lut + (<usize>c1 << alignof<u32>()));\n    let digits2 = <u64>load<u32>(lut + (<usize>c2 << alignof<u32>()));\n\n    offset -= 4;\n    store<u64>(buffer + (offset << 1), digits1 | (digits2 << 32));\n\n    digits1 = <u64>load<u32>(lut + (<usize>b1 << alignof<u32>()));\n    digits2 = <u64>load<u32>(lut + (<usize>b2 << alignof<u32>()));\n\n    offset -= 4;\n    store<u64>(buffer + (offset << 1), digits1 | (digits2 << 32));\n  }\n\n  utoa32_lut(buffer, <u32>num, offset);\n}\n\nfunction utoa_simple<T extends number>(buffer: usize, num: T, offset: usize): void {\n  do {\n    let t = num / 10;\n    let r = <u32>(num % 10);\n    num = changetype<T>(t);\n    offset -= 1;\n    store<u16>(buffer + (offset << 1), CharCode._0 + r);\n  } while (num);\n}\n\n// @ts-ignore: decorator\n@inline\nexport function utoa32_core(buffer: usize, num: u32, offset: u32): void {\n  if (ASC_SHRINK_LEVEL >= 1) {\n    utoa_simple(buffer, num, offset);\n  } else {\n    utoa32_lut(buffer, num, offset);\n  }\n}\n\n// @ts-ignore: decorator\n@inline\nexport function utoa64_core(buffer: usize, num: u64, offset: u32): void {\n  if (ASC_SHRINK_LEVEL >= 1) {\n    utoa_simple(buffer, num, offset);\n  } else {\n    utoa64_lut(buffer, num, offset);\n  }\n}\n\nexport function utoa32(value: u32): String {\n  if (!value) return \"0\";\n\n  var decimals = decimalCount32(value);\n  var out = __alloc(decimals << 1, idof<String>());\n\n  utoa32_core(out, value, decimals);\n  return changetype<String>(out); // retains\n}\n\nexport function itoa32(value: i32): String {\n  if (!value) return \"0\";\n\n  var sign = value < 0;\n  if (sign) value = -value;\n\n  var decimals = decimalCount32(value) + u32(sign);\n  var out = __alloc(decimals << 1, idof<String>());\n\n  utoa32_core(out, value, decimals);\n  if (sign) store<u16>(out, CharCode.MINUS);\n  return changetype<String>(out); // retains\n}\n\nexport function utoa64(value: u64): String {\n  if (!value) return \"0\";\n\n  var out: usize;\n  if (value <= u32.MAX_VALUE) {\n    let val32    = <u32>value;\n    let decimals = decimalCount32(val32);\n    out = __alloc(decimals << 1, idof<String>());\n    utoa32_core(out, val32, decimals);\n  } else {\n    let decimals = decimalCount64(value);\n    out = __alloc(decimals << 1, idof<String>());\n    utoa64_core(out, value, decimals);\n  }\n  return changetype<String>(out); // retains\n}\n\nexport function itoa64(value: i64): String {\n  if (!value) return \"0\";\n\n  var sign = value < 0;\n  if (sign) value = -value;\n\n  var out: usize;\n  if (<u64>value <= <u64>u32.MAX_VALUE) {\n    let val32    = <u32>value;\n    let decimals = decimalCount32(val32) + u32(sign);\n    out = __alloc(decimals << 1, idof<String>());\n    utoa32_core(out, val32, decimals);\n  } else {\n    let decimals = decimalCount64(value) + u32(sign);\n    out = __alloc(decimals << 1, idof<String>());\n    utoa64_core(out, value, decimals);\n  }\n  if (sign) store<u16>(out, CharCode.MINUS);\n\n  return changetype<String>(out); // retains\n}\n\nexport function itoa<T extends number>(value: T): String {\n  if (!isInteger<T>()) ERROR(\"integer type expected\");\n  if (isSigned<T>()) {\n    if (sizeof<T>() <= 4) {\n      return itoa32(<i32>value);\n    } else {\n      return itoa64(<i64>value);\n    }\n  } else {\n    if (sizeof<T>() <= 4) {\n      return utoa32(<u32>value);\n    } else {\n      return utoa64(<u64>value);\n    }\n  }\n}\n\n// @ts-ignore: decorator\n@lazy\nvar _K: i32 = 0;\n\n// // @ts-ignore: decorator\n// @lazy\n// var _frc: u64 = 0;\n\n// @ts-ignore: decorator\n@lazy\nvar _exp: i32 = 0;\n\n// @ts-ignore: decorator\n@lazy\nvar _frc_minus: u64 = 0;\n\n// @ts-ignore: decorator\n@lazy\nvar _frc_plus:  u64 = 0;\n\n// @ts-ignore: decorator\n@lazy\nvar _frc_pow: u64 = 0;\n\n// @ts-ignore: decorator\n@lazy\nvar _exp_pow: i32 = 0;\n\n// @ts-ignore: decorator\n@inline\nfunction umul64f(u: u64, v: u64): u64 {\n  var u0 = u & 0xFFFFFFFF;\n  var v0 = v & 0xFFFFFFFF;\n\n  var u1 = u >> 32;\n  var v1 = v >> 32;\n\n  var l = u0 * v0;\n  var t = u1 * v0 + (l >> 32);\n  var w = u0 * v1 + (t & 0xFFFFFFFF);\n\n  w += 0x7FFFFFFF; // rounding\n\n  t >>= 32;\n  w >>= 32;\n\n  return u1 * v1 + t + w;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction umul64e(e1: i32, e2: i32): i32 {\n  return e1 + e2 + 64; // where 64 is significand size\n}\n\n// @ts-ignore: decorator\n@inline\nfunction normalizedBoundaries(f: u64, e: i32): void {\n  var frc = (f << 1) + 1;\n  var exp = e - 1;\n  var off = <i32>clz<u64>(frc);\n  frc <<= off;\n  exp  -= off;\n\n  var m = 1 + i32(f == 0x0010000000000000);\n\n  _frc_plus  = frc;\n  _frc_minus = ((f << m) - 1) << e - m - exp;\n  _exp = exp;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction grisuRound(buffer: usize, len: i32, delta: u64, rest: u64, ten_kappa: u64, wp_w: u64): void {\n  var lastp = buffer + ((len - 1) << 1);\n  var digit = load<u16>(lastp);\n  while (\n    rest < wp_w &&\n    delta - rest >= ten_kappa && (\n      rest + ten_kappa < wp_w ||\n      wp_w - rest > rest + ten_kappa - wp_w\n    )\n  ) {\n    --digit;\n    rest += ten_kappa;\n  }\n  store<u16>(lastp, digit);\n}\n\n// @ts-ignore: decorator\n@inline\nfunction getCachedPower(minExp: i32): void {\n  const c = reinterpret<f64>(0x3FD34413509F79FE); // 1 / lg(10) = 0.30102999566398114\n  var dk = (-61 - minExp) * c + 347;\t            // dk must be positive, so can do ceiling in positive\n  var k = <i32>dk;\n      k += i32(k != dk); // conversion with ceil\n\n  var index = (k >> 3) + 1;\n  _K = 348 - (index << 3);\t// decimal exponent no need lookup table\n  _frc_pow = unchecked(FRC_POWERS[index]);\n  _exp_pow = unchecked(<i32>EXP_POWERS[index]);\n}\n\n// @ts-ignore: decorator\n@inline\nfunction grisu2(value: f64, buffer: usize, sign: i32): i32 {\n\n  // frexp routine\n  var uv  = reinterpret<u64>(value);\n  var exp = <i32>((uv & 0x7FF0000000000000) >>> 52);\n  var sid = uv & 0x000FFFFFFFFFFFFF;\n  var frc = (u64(exp != 0) << 52) + sid;\n      exp = select<i32>(exp, 1, exp != 0) - (0x3FF + 52);\n\n  normalizedBoundaries(frc, exp);\n  getCachedPower(_exp);\n\n  // normalize\n  var off = <i32>clz<u64>(frc);\n  frc <<= off;\n  exp  -= off;\n\n  var frc_pow = _frc_pow;\n  var exp_pow = _exp_pow;\n\n  var w_frc = umul64f(frc, frc_pow);\n  var w_exp = umul64e(exp, exp_pow);\n\n  var wp_frc = umul64f(_frc_plus, frc_pow) - 1;\n  var wp_exp = umul64e(_exp,      exp_pow);\n\n  var wm_frc = umul64f(_frc_minus, frc_pow) + 1;\n  var delta  = wp_frc - wm_frc;\n\n  return genDigits(buffer, w_frc, w_exp, wp_frc, wp_exp, delta, sign);\n}\n\nfunction genDigits(buffer: usize, w_frc: u64, w_exp: i32, mp_frc: u64, mp_exp: i32, delta: u64, sign: i32): i32 {\n  var one_exp = -mp_exp;\n  var one_frc = (<u64>1) << one_exp;\n  var mask    = one_frc - 1;\n\n  var wp_w_frc = mp_frc - w_frc;\n  var wp_w_exp = mp_exp;\n\n  var p1 = <u32>(mp_frc >> one_exp);\n  var p2 = mp_frc & mask;\n\n  var kappa = <i32>decimalCount32(p1);\n  var len = sign;\n\n  var lut = changetype<ArrayBufferView>(POWERS10).dataStart;\n\n  while (kappa > 0) {\n    let d: u32;\n    switch (kappa) {\n      case 10: { d = p1 / 1000000000; p1 %= 1000000000; break; }\n      case  9: { d = p1 /  100000000; p1 %=  100000000; break; }\n      case  8: { d = p1 /   10000000; p1 %=   10000000; break; }\n      case  7: { d = p1 /    1000000; p1 %=    1000000; break; }\n      case  6: { d = p1 /     100000; p1 %=     100000; break; }\n      case  5: { d = p1 /      10000; p1 %=      10000; break; }\n      case  4: { d = p1 /       1000; p1 %=       1000; break; }\n      case  3: { d = p1 /        100; p1 %=        100; break; }\n      case  2: { d = p1 /         10; p1 %=         10; break; }\n      case  1: { d = p1;              p1 =           0; break; }\n      default: { d = 0; break; }\n    }\n\n    if (d | len) store<u16>(buffer + (len++ << 1), CharCode._0 + <u16>d);\n\n    --kappa;\n    let tmp = ((<u64>p1) << one_exp) + p2;\n    if (tmp <= delta) {\n      _K += kappa;\n      grisuRound(buffer, len, delta, tmp, <u64>load<u32>(lut + (<usize>kappa << alignof<u32>())) << one_exp, wp_w_frc);\n      return len;\n    }\n  }\n\n  while (1) {\n    p2    *= 10;\n    delta *= 10;\n\n    let d = p2 >> one_exp;\n    if (d | len) store<u16>(buffer + (len++ << 1), CharCode._0 + <u16>d);\n\n    p2 &= mask;\n    --kappa;\n    if (p2 < delta) {\n      _K += kappa;\n      wp_w_frc *= <u64>load<u32>(lut + (<usize>-kappa << alignof<u32>()));\n      grisuRound(buffer, len, delta, p2, one_frc, wp_w_frc);\n      return len;\n    }\n  }\n\n  return len;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction genExponent(buffer: usize, k: i32): i32 {\n  var sign = k < 0;\n  if (sign) k = -k;\n  var decimals = decimalCount32(k) + 1;\n  utoa32_core(buffer, k, decimals);\n  store<u16>(buffer, <u16>select<u32>(CharCode.MINUS, CharCode.PLUS, sign));\n  return decimals;\n}\n\nfunction prettify(buffer: usize, length: i32, k: i32): i32 {\n  if (!k) {\n    store<u32>(buffer + (length << 1), CharCode.DOT | (CharCode._0 << 16));\n    return length + 2;\n  }\n\n  var kk = length + k;\n  if (length <= kk && kk <= 21) {\n    // 1234e7 -> 12340000000\n    for (let i = length; i < kk; ++i) {\n      store<u16>(buffer + (i << 1), CharCode._0);\n    }\n    store<u32>(buffer + (kk << 1), CharCode.DOT | (CharCode._0 << 16));\n    return kk + 2;\n  } else if (kk > 0 && kk <= 21) {\n    // 1234e-2 -> 12.34\n    let ptr = buffer + (kk << 1);\n    memory.copy(\n      ptr + 2,\n      ptr,\n      -k << 1\n    );\n    store<u16>(buffer + (kk << 1), CharCode.DOT);\n    return length + 1;\n  } else if (-6 < kk && kk <= 0) {\n    // 1234e-6 -> 0.001234\n    let offset = 2 - kk;\n    memory.copy(\n      buffer + (offset << 1),\n      buffer,\n      length << 1\n    );\n    store<u32>(buffer, CharCode._0 | (CharCode.DOT << 16));\n    for (let i = 2; i < offset; ++i) {\n      store<u16>(buffer + (i << 1), CharCode._0);\n    }\n    return length + offset;\n  } else if (length == 1) {\n    // 1e30\n    store<u16>(buffer, CharCode.e, 2);\n    length = genExponent(buffer + 4, kk - 1);\n    return length + 2;\n  } else {\n    let len = length << 1;\n    memory.copy(\n      buffer + 4,\n      buffer + 2,\n      len - 2\n    );\n    store<u16>(buffer,       CharCode.DOT, 2);\n    store<u16>(buffer + len, CharCode.e,   2);\n    length += genExponent(buffer + len + 4, kk - 1);\n    return length + 2;\n  }\n}\n\nexport function dtoa_core(buffer: usize, value: f64): i32 {\n  var sign = i32(value < 0);\n  if (sign) {\n    value = -value;\n    store<u16>(buffer, CharCode.MINUS);\n  }\n  // assert(value > 0 && value <= 1.7976931348623157e308);\n  var len = grisu2(value, buffer, sign);\n      len = prettify(buffer + (sign << 1), len - sign, _K);\n  return len + sign;\n}\n\nexport function dtoa(value: f64): String {\n  if (value == 0) return \"0.0\";\n  if (!isFinite<f64>(value)) {\n    if (isNaN<f64>(value)) return \"NaN\";\n    return select<String>(\"-Infinity\", \"Infinity\", value < 0);\n  }\n  var buffer = __alloc(MAX_DOUBLE_LENGTH << 1, idof<String>());\n  var length = dtoa_core(buffer, value);\n  if (length == MAX_DOUBLE_LENGTH) return changetype<String>(buffer);\n  var result = changetype<String>(buffer).substring(0, length);\n  __free(buffer);\n  return result;\n}\n\nexport function itoa_stream<T extends number>(buffer: usize, offset: usize, value: T): u32 {\n  buffer += (offset << 1);\n  if (!value) {\n    store<u16>(buffer, CharCode._0);\n    return 1;\n  }\n  var decimals: u32 = 0;\n  if (isSigned<T>()) {\n    let sign = i32(value < 0);\n    if (sign) value = changetype<T>(-value);\n    if (sizeof<T>() <= 4) {\n      decimals = decimalCount32(value) + <u32>sign;\n      utoa32_core(buffer, value, decimals);\n    } else {\n      if (<u64>value <= <u64>u32.MAX_VALUE) {\n        let val32 = <u32>value;\n        decimals = decimalCount32(val32) + <u32>sign;\n        utoa32_core(buffer, val32, decimals);\n      } else {\n        decimals = decimalCount64(value) + <u32>sign;\n        utoa64_core(buffer, value, decimals);\n      }\n    }\n    if (sign) store<u16>(buffer, CharCode.MINUS);\n  } else {\n    if (sizeof<T>() <= 4) {\n      decimals = decimalCount32(value);\n      utoa32_core(buffer, value, decimals);\n    } else {\n      if (<u64>value <= <u64>u32.MAX_VALUE) {\n        let val32 = <u32>value;\n        decimals = decimalCount32(val32);\n        utoa32_core(buffer, val32, decimals);\n      } else {\n        decimals = decimalCount64(value);\n        utoa64_core(buffer, value, decimals);\n      }\n    }\n  }\n  return decimals;\n}\n\nexport function dtoa_stream(buffer: usize, offset: usize, value: f64): u32 {\n  buffer += (offset << 1);\n  if (value == 0.0) {\n    store<u16>(buffer, CharCode._0);\n    store<u16>(buffer, CharCode.DOT, 2);\n    store<u16>(buffer, CharCode._0,  4);\n    return 3;\n  }\n  if (!isFinite<f64>(value)) {\n    if (isNaN<f64>(value)) {\n      store<u16>(buffer, CharCode.N);\n      store<u16>(buffer, CharCode.a, 2);\n      store<u16>(buffer, CharCode.N, 4);\n      return 3;\n    } else {\n      let sign = i32(value < 0);\n      let len  = 8 + sign;\n      memory.copy(buffer, changetype<usize>(select<String>(\"-Infinity\", \"Infinity\", sign)), len << 1);\n      return len;\n    }\n  }\n  return dtoa_core(buffer, value);\n}\n","import { itoa, dtoa, itoa_stream, dtoa_stream, MAX_DOUBLE_LENGTH } from \"./number\";\nimport { ipow32 } from \"../math\";\n\n// @ts-ignore\n@lazy const lowerTable127: u8[] = [\n  0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n  16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,\n  32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,\n  48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,\n  64,\n  97,98,99,100,101,102,103,104,105,106,107,108,109,\n  110,111,112,113,114,115,116,117,118,119,120,121,122,\n  91,92,93,94,95,96,\n  97,98,99,100,101,102,103,104,105,106,107,108,109,\n  110,111,112,113,114,115,116,117,118,119,120,121,122,\n  123,124,125,126,127\n];\n\n// @ts-ignore\n@lazy const upperTable127: u8[] = [\n  0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n  16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,\n  32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,\n  48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,\n  64,\n  65,66,67,68,69,70,71,72,73,74,75,76,77,\n  78,79,80,81,82,83,84,85,86,87,88,89,90,\n  91,92,93,94,95,96,\n  65,66,67,68,69,70,71,72,73,74,75,76,77,\n  78,79,80,81,82,83,84,85,86,87,88,89,90,\n  123,124,125,126,127\n];\n\n// @ts-ignore\n@lazy const lowerTable127Ptr = lowerTable127.dataStart as usize;\n// @ts-ignore\n@lazy const upperTable127Ptr = upperTable127.dataStart as usize;\n\n// @ts-ignore: decorator\n@inline\nexport const enum CharCode {\n  PLUS = 0x2B,\n  MINUS = 0x2D,\n  DOT = 0x2E,\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n  A = 0x41,\n  B = 0x42,\n  E = 0x45,\n  I = 0x49,\n  N = 0x4E,\n  O = 0x4F,\n  X = 0x58,\n  Z = 0x5A,\n  a = 0x61,\n  b = 0x62,\n  e = 0x65,\n  n = 0x6E,\n  o = 0x6F,\n  x = 0x78,\n  z = 0x7A\n}\n\n// 23 * 8 = 184 bytes\n// @ts-ignore: decorator\n@lazy const Powers10: f64[] = [\n  1e00, 1e01, 1e02, 1e03, 1e04, 1e05, 1e06, 1e07, 1e08, 1e09,\n  1e10, 1e11, 1e12, 1e13, 1e14, 1e15, 1e16, 1e17, 1e18, 1e19,\n  1e20, 1e21, 1e22\n];\n\nexport function compareImpl(str1: string, index1: usize, str2: string, index2: usize, len: usize): i32 {\n  var ptr1 = changetype<usize>(str1) + (index1 << 1);\n  var ptr2 = changetype<usize>(str2) + (index2 << 1);\n  if (ASC_SHRINK_LEVEL < 2) {\n    if (len >= 4 && !((ptr1 & 7) | (ptr2 & 7))) {\n      do {\n        if (load<u64>(ptr1) != load<u64>(ptr2)) break;\n        ptr1 += 8;\n        ptr2 += 8;\n        len  -= 4;\n      } while (len >= 4);\n    }\n  }\n  while (len--) {\n    let a = <i32>load<u16>(ptr1);\n    let b = <i32>load<u16>(ptr2);\n    if (a != b) return a - b;\n    ptr1 += 2;\n    ptr2 += 2;\n  }\n  return 0;\n}\n\nexport function isSpace(c: i32): bool {\n  if (c < 0x1680) { // < <LS> (1)\n    // <SP>, <TAB>, <LF>, <VT>, <FF>, <CR> and <NBSP>\n    // (c == 0x20 || c == 0xA0) was optimized to (c | 0x80) == 0xA0\n    // @ts-ignore: cast\n    return ((c | 0x80) == 0xA0) | (u32(c - 0x09) <= 0x0D - 0x09);\n  }\n  if (u32(c - 0x2000) <= 0x200A - 0x2000) return true;\n  switch (c) {\n    case 0x1680: // <LS> (1)\n    case 0x2028: // <LS> (2)\n    case 0x2029: // <PS>\n    case 0x202F: // <NNS>\n    case 0x205F: // <MMSP>\n    case 0x3000: // <IS>\n    case 0xFEFF: return true; // <ZWNBSP>\n  }\n  return false;\n}\n\n/** Parses a string to an integer (usually), using the specified radix. */\nexport function strtol<T>(str: string, radix: i32 = 0): T {\n  var len = str.length;\n  if (!len) {\n    // @ts-ignore: cast\n    if (isFloat<T>()) return <T>NaN;\n    // @ts-ignore: cast\n    return <T>0;\n  }\n\n  var ptr = changetype<usize>(str) /* + HEAD -> offset */;\n  var code = <u32>load<u16>(ptr);\n\n  // determine sign\n  // @ts-ignore: cast\n  var sign: T = 1;\n  // trim white spaces\n  while (isSpace(code)) {\n    code = <u32>load<u16>(ptr += 2);\n    --len;\n  }\n  if (code == CharCode.MINUS) {\n    if (!--len) {\n      // @ts-ignore: cast\n      if (isFloat<T>()) return <T>NaN;\n      // @ts-ignore: cast\n      return <T>0;\n    }\n    code = <u32>load<u16>(ptr += 2);\n    // @ts-ignore: type\n    sign = -1;\n  } else if (code == CharCode.PLUS) {\n    if (!--len) {\n      // @ts-ignore: cast\n      if (isFloat<T>()) return <T>NaN;\n      // @ts-ignore: cast\n      return <T>0;\n    }\n    code = <u32>load<u16>(ptr += 2);\n  }\n\n  // determine radix\n  if (!radix) {\n    if (code == CharCode._0 && len > 2) {\n      switch (<u32>load<u16>(ptr + 2) | 32) {\n        case CharCode.b: {\n          ptr += 4; len -= 2;\n          radix = 2;\n          break;\n        }\n        case CharCode.o: {\n          ptr += 4; len -= 2;\n          radix = 8;\n          break;\n        }\n        case CharCode.x: {\n          ptr += 4; len -= 2;\n          radix = 16;\n          break;\n        }\n        default: radix = 10;\n      }\n    } else radix = 10;\n  } else if (radix < 2 || radix > 36) {\n    // @ts-ignore: cast\n    if (isFloat<T>()) return <T>NaN;\n    // @ts-ignore: cast\n    return <T>0;\n  }\n\n  // calculate value\n  // @ts-ignore: type\n  var num: T = 0;\n  while (len--) {\n    code = <u32>load<u16>(ptr);\n    if (code - CharCode._0 < 10) {\n      code -= CharCode._0;\n    } else if (code - CharCode.A <= <u32>(CharCode.Z - CharCode.A)) {\n      code -= CharCode.A - 10;\n    } else if (code - CharCode.a <= <u32>(CharCode.z - CharCode.a)) {\n      code -= CharCode.a - 10;\n    } else break;\n    if (code >= <u32>radix) break;\n    // @ts-ignore: type\n    num = num * radix + code;\n    ptr += 2;\n  }\n  // @ts-ignore: type\n  return sign * num;\n}\n\nexport function strtod(str: string): f64 {\n  var len = str.length;\n  if (!len) return NaN;\n\n  var ptr  = changetype<usize>(str);\n  var code = <u32>load<u16>(ptr);\n\n  var sign = 1.;\n  // skip white spaces\n  while (len && isSpace(code)) {\n    code = <u32>load<u16>(ptr += 2);\n    --len;\n  }\n  if (!len) return NaN;\n\n  // try parse '-' or '+'\n  if (code == CharCode.MINUS) {\n    if (!--len) return NaN;\n    code = <u32>load<u16>(ptr += 2);\n    sign = -1;\n  } else if (code == CharCode.PLUS) {\n    if (!--len) return NaN;\n    code = <u32>load<u16>(ptr += 2);\n  }\n\n  // try parse Infinity\n  if (len >= 8 && code == CharCode.I) {\n    if (\n      load<u64>(ptr, 0) == 0x690066006E0049 && // ifnI\n      load<u64>(ptr, 8) == 0x7900740069006E    // ytin\n    ) {\n      return copysign<f64>(Infinity, sign);\n    }\n    return NaN;\n  }\n  // validate next symbol\n  if (code != CharCode.DOT && <u32>(code - CharCode._0) >= 10) {\n    return NaN;\n  }\n  var savedPtr = ptr;\n  // skip zeros\n  while (code == CharCode._0) {\n    code = <u32>load<u16>(ptr += 2);\n    --len;\n  }\n  if (len <= 0) return 0;\n  const capacity = 19; // int(64 * 0.3010)\n  var pointed = false;\n  var consumed = 0;\n  var position = 0;\n  var x: u64 = 0;\n  if (code == CharCode.DOT) {\n    let noDigits = !(savedPtr - ptr);\n    ptr += 2; --len;\n    if (!len && noDigits) return NaN;\n    for (pointed = true; (code = <u32>load<u16>(ptr)) == CharCode._0; --position, ptr += 2) --len;\n    if (len <= 0) return 0;\n    if (!position && noDigits && code - CharCode._0 >= 10) return NaN;\n  }\n  for (let digit = code - CharCode._0; digit < 10 || (code == CharCode.DOT && !pointed); digit = code - CharCode._0) {\n    if (digit < 10) {\n      x = consumed < capacity ? 10 * x + digit : x | u64(!!digit);\n      ++consumed;\n    } else {\n      position = consumed;\n      pointed = true;\n    }\n    if (!--len) break;\n    code = <u32>load<u16>(ptr += 2);\n  }\n\n  if (!pointed) position = consumed;\n  return copysign<f64>(scientific(x, position - min(capacity, consumed) + parseExp(ptr, len)), sign);\n}\n\nexport function joinBooleanArray(dataStart: usize, length: i32, separator: string): string {\n  var lastIndex = length - 1;\n  if (lastIndex < 0) return \"\";\n  if (!lastIndex) return select(\"true\", \"false\", load<bool>(dataStart));\n\n  var sepLen = separator.length;\n  var valueLen = 5; // max possible length of element len(\"false\")\n  var estLen = (valueLen + sepLen) * lastIndex + valueLen;\n  var result = changetype<string>(__alloc(estLen << 1, idof<string>())); // retains\n  var offset = 0;\n  var value: bool;\n  for (let i = 0; i < lastIndex; ++i) {\n    value = load<bool>(dataStart + i);\n    valueLen = 4 + i32(!value);\n    memory.copy(\n      changetype<usize>(result) + (<usize>offset << 1),\n      changetype<usize>(select(\"true\", \"false\", value)),\n      <usize>valueLen << 1\n    );\n    offset += valueLen;\n    if (sepLen) {\n      memory.copy(\n        changetype<usize>(result) + (<usize>offset << 1),\n        changetype<usize>(separator),\n        <usize>sepLen << 1\n      );\n      offset += sepLen;\n    }\n  }\n  value = load<bool>(dataStart + <usize>lastIndex);\n  valueLen = 4 + i32(!value);\n  memory.copy(\n    changetype<usize>(result) + (<usize>offset << 1),\n    changetype<usize>(select(\"true\", \"false\", value)),\n    valueLen << 1\n  );\n  offset += valueLen;\n\n  if (estLen > offset) return result.substring(0, offset);\n  return result;\n}\n\nexport function joinIntegerArray<T>(dataStart: usize, length: i32, separator: string): string {\n  var lastIndex = length - 1;\n  if (lastIndex < 0) return \"\";\n  // @ts-ignore: type\n  if (!lastIndex) return changetype<string>(itoa<T>(load<T>(dataStart))); // retains\n\n  var sepLen = separator.length;\n  const valueLen = (sizeof<T>() <= 4 ? 10 : 20) + i32(isSigned<T>());\n  var estLen = (valueLen + sepLen) * lastIndex + valueLen;\n  var result = changetype<string>(__alloc(estLen << 1, idof<string>())); // retains\n  var offset = 0;\n  var value: T;\n  for (let i = 0; i < lastIndex; ++i) {\n    value = load<T>(dataStart + (<usize>i << alignof<T>()));\n    // @ts-ignore: type\n    offset += itoa_stream<T>(changetype<usize>(result), offset, value);\n    if (sepLen) {\n      memory.copy(\n        changetype<usize>(result) + (<usize>offset << 1),\n        changetype<usize>(separator),\n        <usize>sepLen << 1\n      );\n      offset += sepLen;\n    }\n  }\n  value = load<T>(dataStart + (<usize>lastIndex << alignof<T>()));\n  // @ts-ignore: type\n  offset += itoa_stream<T>(changetype<usize>(result), offset, value);\n  if (estLen > offset) return result.substring(0, offset);\n  return result;\n}\n\nexport function joinFloatArray<T>(dataStart: usize, length: i32, separator: string): string {\n  var lastIndex = length - 1;\n  if (lastIndex < 0) return \"\";\n  if (!lastIndex) {\n    return changetype<string>(dtoa(\n      // @ts-ignore: type\n      load<T>(dataStart))\n    ); // retains\n  }\n\n  const valueLen = MAX_DOUBLE_LENGTH;\n  var sepLen = separator.length;\n  var estLen = (valueLen + sepLen) * lastIndex + valueLen;\n  var result = changetype<string>(__alloc(estLen << 1, idof<string>())); // retains\n  var offset = 0;\n  var value: T;\n  for (let i = 0; i < lastIndex; ++i) {\n    value = load<T>(dataStart + (<usize>i << alignof<T>()));\n    offset += dtoa_stream(changetype<usize>(result), offset,\n      // @ts-ignore: type\n      value\n    );\n    if (sepLen) {\n      memory.copy(\n        changetype<usize>(result) + (<usize>offset << 1),\n        changetype<usize>(separator),\n        <usize>sepLen << 1\n      );\n      offset += sepLen;\n    }\n  }\n  value = load<T>(dataStart + (<usize>lastIndex << alignof<T>()));\n  offset += dtoa_stream(changetype<usize>(result), offset,\n    // @ts-ignore: type\n    value\n  );\n  if (estLen > offset) return result.substring(0, offset);\n  return result;\n}\n\nexport function joinStringArray(dataStart: usize, length: i32, separator: string): string {\n  var lastIndex = length - 1;\n  if (lastIndex < 0) return \"\";\n  if (!lastIndex) {\n    // @ts-ignore: type\n    return load<string>(dataStart) || \"\";\n  }\n  var estLen = 0;\n  var value: string;\n  for (let i = 0; i < length; ++i) {\n    value = load<string>(dataStart + (<usize>i << alignof<string>()));\n    // @ts-ignore: type\n    if (value !== null) estLen += value.length;\n  }\n  var offset = 0;\n  var sepLen = separator.length;\n  var result = __alloc((estLen + sepLen * lastIndex) << 1, idof<string>());\n  for (let i = 0; i < lastIndex; ++i) {\n    value = load<string>(dataStart + (<usize>i << alignof<string>()));\n    if (value !== null) {\n      let valueLen = value.length;\n      memory.copy(\n        result + (<usize>offset << 1),\n        changetype<usize>(value),\n        <usize>valueLen << 1\n      );\n      offset += valueLen;\n    }\n    if (sepLen) {\n      memory.copy(\n        result + (<usize>offset << 1),\n        changetype<usize>(separator),\n        <usize>sepLen << 1\n      );\n      offset += sepLen;\n    }\n  }\n  value = load<string>(dataStart + (<usize>lastIndex << alignof<string>()));\n  if (value !== null) {\n    memory.copy(\n      result + (<usize>offset << 1),\n      changetype<usize>(value),\n      <usize>value.length << 1\n    );\n  }\n  return changetype<string>(result); // retains\n}\n\nexport function joinReferenceArray<T>(dataStart: usize, length: i32, separator: string): string {\n  var lastIndex = length - 1;\n  if (lastIndex < 0) return \"\";\n  var value: T;\n  if (!lastIndex) {\n    value = load<T>(dataStart);\n    // @ts-ignore: type\n    return value !== null ? value.toString() : \"\";\n  }\n  var result = \"\";\n  var sepLen = separator.length;\n  for (let i = 0; i < lastIndex; ++i) {\n    value = load<T>(dataStart + (<usize>i << alignof<T>()));\n    // @ts-ignore: type\n    if (value !== null) result += value.toString();\n    if (sepLen) result += separator;\n  }\n  value = load<T>(dataStart + (<usize>lastIndex << alignof<T>()));\n  // @ts-ignore: type\n  if (value !== null) result += value.toString();\n  return result;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction scientific(significand: u64, exp: i32): f64 {\n  if (!significand || exp < -342) return 0;\n  if (exp > 308) return Infinity;\n  // Try use fast path\n  // Use fast path for string-to-double conversion if possible\n  // see http://www.exploringbinary.com/fast-path-decimal-to-floating-point-conversion\n  // Simple integer\n  var significandf = <f64>significand;\n  if (!exp) return significandf;\n  if (exp > 22 && exp <= 22 + 15) {\n    significandf *= pow10(exp - 22);\n    exp = 22;\n  }\n  if (significand <= 9007199254740991 && abs(exp) <= 22) {\n    if (exp > 0) return significandf * pow10(exp);\n    return significandf / pow10(-exp);\n  } else if (exp < 0) {\n    return scaledown(significand, exp);\n  } else {\n    return scaleup(significand, exp);\n  }\n}\n\n// Adopted from metallic lib:\n// https://github.com/jdh8/metallic/blob/master/src/stdlib/parse/scientific.h\n// @ts-ignore: decorator\n@inline\nfunction scaledown(significand: u64, exp: i32): f64 {\n  const denom: u64 = 6103515625; // 1e14 * 0x1p-14\n  const scale = reinterpret<f64>(0x3F06849B86A12B9B); // 1e-14 * 0x1p32\n\n  var shift = clz(significand);\n  significand <<= shift;\n  shift = exp - shift;\n\n  for (; exp <= -14; exp += 14) {\n    let q = significand / denom;\n    let r = significand % denom;\n    let s = clz(q);\n    significand = (q << s) + <u64>nearest(scale * <f64>(r << (s - 18)));\n    shift -= s;\n  }\n  var b = <u64>ipow32(5, -exp);\n  var q = significand / b;\n  var r = significand % b;\n  var s = clz(q);\n  significand = (q << s) + <u64>(reinterpret<f64>(reinterpret<u64>(<f64>r) + (s << 52)) / <f64>b);\n  shift -= s;\n\n  return NativeMath.scalbn(<f64>significand, <i32>shift);\n}\n\n// Adopted from metallic lib:\n// https://github.com/jdh8/metallic/blob/master/src/stdlib/parse/scientific.h\n// @ts-ignore: decorator\n@inline\nfunction scaleup(significand: u64, exp: i32): f64 {\n  const coeff: u32 = 1220703125; // 1e13 * 0x1p-13;\n  var shift = ctz(significand);\n  significand >>= shift;\n  shift += exp;\n\n  __fixmulShift = shift;\n  for (; exp >= 13; exp -= 13) {\n    significand = fixmul(significand, coeff);\n  }\n  significand = fixmul(significand, <u32>ipow32(5, exp));\n  shift = __fixmulShift;\n  return NativeMath.scalbn(<f64>significand, <i32>shift);\n}\n\n// Adopted from metallic lib:\n// https://github.com/jdh8/metallic/blob/master/src/stdlib/parse/scientific.h\n// @ts-ignore: decorator\n@inline\nfunction parseExp(ptr: usize, len: i32): i32 {\n  var sign = 1, magnitude = 0;\n  var code = <u32>load<u16>(ptr);\n  // check code is 'e' or 'E'\n  if ((code | 32) != CharCode.e) return 0;\n\n  code = <u32>load<u16>(ptr += 2);\n  if (code == CharCode.MINUS) {\n    if (!--len) return 0;\n    code = <u32>load<u16>(ptr += 2);\n    sign = -1;\n  } else if (code == CharCode.PLUS) {\n    if (!--len) return 0;\n    code = <u32>load<u16>(ptr += 2);\n  }\n  // skip zeros\n  while (code == CharCode._0) {\n    if (!--len) return 0;\n    code = <u32>load<u16>(ptr += 2);\n  }\n  for (let digit: u32 = code - CharCode._0; len && digit < 10; digit = code - CharCode._0) {\n    if (magnitude >= 3200) return sign * 3200;\n    magnitude = 10 * magnitude + digit;\n    code = <u32>load<u16>(ptr += 2);\n    --len;\n  }\n  return sign * magnitude;\n}\n\n// @ts-ignore: decorator\n@lazy\nvar __fixmulShift: u64 = 0;\n\n// Adopted from metallic lib:\n// https://github.com/jdh8/metallic/blob/master/src/stdlib/parse/scientific.h\n// @ts-ignore: decorator\n@inline\nfunction fixmul(a: u64, b: u32): u64 {\n  var low  = (a & 0xFFFFFFFF) * b;\n  var high = (a >> 32) * b + (low >> 32);\n  var overflow = <u32>(high >> 32);\n  var space = clz(overflow);\n  var revspace: u64 = 32 - space;\n  __fixmulShift += revspace;\n  return (high << space | (low & 0xFFFFFFFF) >> revspace) + (low << space >> 31 & 1);\n}\n\n// @ts-ignore: decorator\n@inline\nfunction pow10(n: i32): f64 {\n  // argument `n` should bounds in [0, 22] range\n  // @ts-ignore: cast\n  return load<f64>(Powers10.dataStart as usize + (n << alignof<f64>()));\n}\n\n// @ts-ignore: decorator\n@inline\nexport function isAscii(c: u32): bool {\n  return !(c & ~0x7F);\n}\n\n// @ts-ignore: decorator\n@inline\nexport function isLower8(c: u32): bool {\n  return c - CharCode.a < 26;\n}\n\n// @ts-ignore: decorator\n@inline\nexport function isUpper8(c: u32): bool {\n  return c - CharCode.A < 26;\n}\n\n// @ts-ignore: decorator\n@inline\nexport function toLower8(c: i32): u32 {\n  if (ASC_SHRINK_LEVEL > 0) {\n    return c | u32(isUpper8(c)) << 5;\n  } else {\n    return <u32>load<u8>(lowerTable127Ptr + c);\n  }\n}\n\n// @ts-ignore: decorator\n@inline\nexport function toUpper8(c: i32): u32 {\n  if (ASC_SHRINK_LEVEL > 0) {\n    return c & ~(u32(isLower8(c)) << 5);\n  } else {\n    return <u32>load<u8>(upperTable127Ptr + c);\n  }\n}\n","import { COMPARATOR, SORT as SORT_IMPL } from \"./util/sort\";\nimport { E_INDEXOUTOFRANGE, E_INVALIDLENGTH, E_NOTIMPLEMENTED } from \"./util/error\";\nimport { joinIntegerArray, joinFloatArray } from \"./util/string\";\nimport { idof } from \"./builtins\";\nimport { ArrayBufferView } from \"./arraybuffer\";\n\nexport class Int8Array extends ArrayBufferView {\n  [key: number]: i8;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly BYTES_PER_ELEMENT: usize = sizeof<i8>();\n\n  constructor(length: i32) {\n    super(length, alignof<i8>());\n  }\n\n  get length(): i32 {\n    return this.byteLength;\n  }\n\n  @operator(\"[]\")\n  private __get(index: i32): i8 {\n    if (<u32>index >= <u32>this.byteLength) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<i8>(this.dataStart + <usize>index);\n  }\n\n  @unsafe @operator(\"{}\")\n  private __uget(index: i32): i8 {\n    return load<i8>(this.dataStart + <usize>index);\n  }\n\n  @operator(\"[]=\")\n  private __set(index: i32, value: native<i8>): void {\n    if (<u32>index >= <u32>this.byteLength) throw new RangeError(E_INDEXOUTOFRANGE);\n    store<i8>(this.dataStart + <usize>index, value);\n  }\n\n  @unsafe @operator(\"{}=\")\n  private __uset(index: i32, value: native<i8>): void {\n    store<i8>(this.dataStart + <usize>index, value);\n  }\n\n  includes(searchElement: i8, fromIndex: i32 = 0): bool {\n    return INCLUDES<Int8Array, i8>(this, searchElement, fromIndex);\n  }\n\n  indexOf(searchElement: i8, fromIndex: i32 = 0): i32 {\n    return INDEX_OF<Int8Array, i8>(this, searchElement, fromIndex);\n  }\n\n  lastIndexOf(searchElement: i8, fromIndex: i32 = this.length): i32 {\n    return LAST_INDEX_OF<Int8Array, i8>(this, searchElement, fromIndex);\n  }\n\n  fill(value: i32, start: i32 = 0, end: i32 = i32.MAX_VALUE): Int8Array {\n    return FILL<Int8Array, i8>(this, value, start, end);\n  }\n\n  sort(comparator: (a: i8, b: i8) => i32 = COMPARATOR<i8>()): Int8Array {\n    return SORT<Int8Array, i8>(this, comparator);\n  }\n\n  slice(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Int8Array {\n    return SLICE<Int8Array, i8>(this, begin, end);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Int8Array {\n    return SUBARRAY<Int8Array, i8>(this, begin, end);\n  }\n\n  copyWithin(target: i32, start: i32, end: i32 = i32.MAX_VALUE): Int8Array {\n    return COPY_WITHIN<Int8Array, i8>(this, target, start, end);\n  }\n\n  reduce<T>(\n    fn: (accumulator: T, value: i8, index: i32, array: Int8Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Int8Array, i8, T>(this, fn, initialValue);\n  }\n\n  reduceRight<T>(\n    fn: (accumulator: T, value: i8, index: i32, array: Int8Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Int8Array, i8, T>(this, fn, initialValue);\n  }\n\n  map(fn: (value: i8, index: i32, self: Int8Array) => i8): Int8Array {\n    return MAP<Int8Array, i8>(this, fn);\n  }\n\n  filter(fn: (value: i8, index: i32, self: Int8Array) => bool): Int8Array {\n    return FILTER<Int8Array, i8>(this, fn);\n  }\n\n  findIndex(fn: (value: i8, index: i32, self: Int8Array) => bool): i32 {\n    return FIND_INDEX<Int8Array, i8>(this, fn);\n  }\n\n  some(fn: (value: i8, index: i32, self: Int8Array) => bool): bool {\n    return SOME<Int8Array, i8>(this, fn);\n  }\n\n  every(fn: (value: i8, index: i32, self: Int8Array) => bool): bool {\n    return EVERY<Int8Array, i8>(this, fn);\n  }\n\n  forEach(fn: (value: i8, index: i32, self: Int8Array) => void): void {\n    FOREACH<Int8Array, i8>(this, fn);\n  }\n\n  reverse(): this {\n    return REVERSE<this, i8>(this);\n  }\n\n  join(separator: string = \",\"): string {\n    return joinIntegerArray<i8>(this.dataStart, this.length, separator);\n  }\n\n  toString(): string {\n    return this.join();\n  }\n\n  set<U extends ArrayBufferView>(source: U, offset: i32 = 0): void {\n    SET<Int8Array, i8, U, valueof<U>>(this, source, offset);\n  }\n\n  static wrap(buffer: ArrayBuffer, byteOffset: i32 = 0, length: i32 = -1): Int8Array {\n    return WRAP<Int8Array, i8>(buffer, byteOffset, length);\n  }\n}\n\nexport class Uint8Array extends ArrayBufferView {\n  [key: number]: u8;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly BYTES_PER_ELEMENT: usize = sizeof<u8>();\n\n  constructor(length: i32) {\n    super(length, alignof<u8>());\n  }\n\n  get length(): i32 {\n    return this.byteLength;\n  }\n\n  @operator(\"[]\")\n  private __get(index: i32): u8 {\n    if (<u32>index >= <u32>this.byteLength) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<u8>(this.dataStart + <usize>index);\n  }\n\n  @unsafe @operator(\"{}\")\n  private __uget(index: i32): u8 {\n    return load<u8>(this.dataStart + <usize>index);\n  }\n\n  @operator(\"[]=\")\n  private __set(index: i32, value: native<u8>): void {\n    if (<u32>index >= <u32>this.byteLength) throw new RangeError(E_INDEXOUTOFRANGE);\n    store<u8>(this.dataStart + <usize>index, value);\n  }\n\n  @unsafe @operator(\"{}=\")\n  private __uset(index: i32, value: native<u8>): void {\n    store<u8>(this.dataStart + <usize>index, value);\n  }\n\n  includes(searchElement: u8, fromIndex: i32 = 0): bool {\n    return INCLUDES<Uint8Array, u8>(this, searchElement, fromIndex);\n  }\n\n  indexOf(searchElement: u8, fromIndex: i32 = 0): i32 {\n    return INDEX_OF<Uint8Array, u8>(this, searchElement, fromIndex);\n  }\n\n  lastIndexOf(searchElement: u8, fromIndex: i32 = this.length): i32 {\n    return LAST_INDEX_OF<Uint8Array, u8>(this, searchElement, fromIndex);\n  }\n\n  fill(value: u32, start: i32 = 0, end: i32 = i32.MAX_VALUE): Uint8Array {\n    return FILL<Uint8Array, u8>(this, value, start, end);\n  }\n\n  sort(comparator: (a: u8, b: u8) => i32 = COMPARATOR<u8>()): Uint8Array {\n    return SORT<Uint8Array, u8>(this, comparator);\n  }\n\n  slice(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Uint8Array {\n    return SLICE<Uint8Array, u8>(this, begin, end);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Uint8Array {\n    return SUBARRAY<Uint8Array, u8>(this, begin, end);\n  }\n\n  copyWithin(target: i32, start: i32, end: i32 = i32.MAX_VALUE): Uint8Array {\n    return COPY_WITHIN<Uint8Array, u8>(this, target, start, end);\n  }\n\n  reduce<T>(\n    fn: (accumulator: T, value: u8, index: i32, array: Uint8Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Uint8Array, u8, T>(this, fn, initialValue);\n  }\n\n  reduceRight<T>(\n    fn: (accumulator: T, value: u8, index: i32, array: Uint8Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Uint8Array, u8, T>(this, fn, initialValue);\n  }\n\n  map(fn: (value: u8, index: i32, self: Uint8Array) => u8): Uint8Array {\n    return MAP<Uint8Array, u8>(this, fn);\n  }\n\n  filter(fn: (value: u8, index: i32, self: Uint8Array) => bool): Uint8Array {\n    return FILTER<Uint8Array, u8>(this, fn);\n  }\n\n  findIndex(fn: (value: u8, index: i32, self: Uint8Array) => bool): i32 {\n    return FIND_INDEX<Uint8Array, u8>(this, fn);\n  }\n\n  some(fn: (value: u8, index: i32, self: Uint8Array) => bool): bool {\n    return SOME<Uint8Array, u8>(this, fn);\n  }\n\n  every(fn: (value: u8, index: i32, self: Uint8Array) => bool): bool {\n    return EVERY<Uint8Array, u8>(this, fn);\n  }\n\n  forEach(fn: (value: u8, index: i32, self: Uint8Array) => void): void {\n    FOREACH<Uint8Array, u8>(this, fn);\n  }\n\n  reverse(): this {\n    return REVERSE<this, u8>(this);\n  }\n\n  join(separator: string = \",\"): string {\n    return joinIntegerArray<u8>(this.dataStart, this.length, separator);\n  }\n\n  set<U extends ArrayBufferView>(source: U, offset: i32 = 0): void {\n    SET<Uint8Array, u8, U, valueof<U>>(this, source, offset);\n  }\n\n  toString(): string {\n    return this.join();\n  }\n\n  static wrap(buffer: ArrayBuffer, byteOffset: i32 = 0, length: i32 = -1): Uint8Array {\n    return WRAP<Uint8Array, u8>(buffer, byteOffset, length);\n  }\n}\n\nexport class Uint8ClampedArray extends ArrayBufferView {\n  [key: number]: u8;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly BYTES_PER_ELEMENT: usize = sizeof<u8>();\n\n  constructor(length: i32) {\n    super(length, alignof<u8>());\n  }\n\n  get length(): i32 {\n    return this.byteLength;\n  }\n\n  @operator(\"[]\")\n  private __get(index: i32): u8 {\n    if (<u32>index >= <u32>this.byteLength) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<u8>(this.dataStart + <usize>index);\n  }\n\n  @unsafe @operator(\"{}\")\n  private __uget(index: i32): u8 {\n    return load<u8>(this.dataStart + <usize>index);\n  }\n\n  @operator(\"[]=\")\n  private __set(index: i32, value: native<u8>): void {\n    if (<u32>index >= <u32>this.byteLength) throw new RangeError(E_INDEXOUTOFRANGE);\n    store<u8>(this.dataStart + <usize>index, ~(<i32>value >> 31) & (((255 - value) >> 31) | value));\n  }\n\n  @unsafe @operator(\"{}=\")\n  private __uset(index: i32, value: native<u8>): void {\n    store<u8>(this.dataStart + <usize>index, ~(<i32>value >> 31) & (((255 - value) >> 31) | value));\n  }\n\n  includes(searchElement: u8, fromIndex: i32 = 0): bool {\n    return INCLUDES<Uint8ClampedArray, u8>(this, searchElement, fromIndex);\n  }\n\n  indexOf(searchElement: u8, fromIndex: i32 = 0): i32 {\n    return INDEX_OF<Uint8ClampedArray, u8>(this, searchElement, fromIndex);\n  }\n\n  lastIndexOf(searchElement: u8, fromIndex: i32 = this.length): i32 {\n    return LAST_INDEX_OF<Uint8ClampedArray, u8>(this, searchElement, fromIndex);\n  }\n\n  fill(value: u32, start: i32 = 0, end: i32 = i32.MAX_VALUE): Uint8ClampedArray {\n    return FILL<Uint8ClampedArray, u8>(this, value, start, end);\n  }\n\n  sort(fn: (a: u8, b: u8) => i32 = COMPARATOR<u8>()): Uint8ClampedArray {\n    return SORT<Uint8ClampedArray, u8>(this, fn);\n  }\n\n  slice(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Uint8ClampedArray {\n    return SLICE<Uint8ClampedArray, u8>(this, begin, end);\n  }\n\n  subarray(start: i32 = 0, end: i32 = i32.MAX_VALUE): Uint8ClampedArray {\n    return SUBARRAY<Uint8ClampedArray, u8>(this, start, end);\n  }\n\n  copyWithin(target: i32, start: i32, end: i32 = i32.MAX_VALUE): Uint8ClampedArray {\n    return COPY_WITHIN<Uint8ClampedArray, u8>(this, target, start, end);\n  }\n\n  reduce<T>(\n    fn: (accumulator: T, value: u8, index: i32, array: Uint8ClampedArray) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Uint8ClampedArray, u8, T>(this, fn, initialValue);\n  }\n\n  reduceRight<T>(\n    fn: (accumulator: T, value: u8, index: i32, array: Uint8ClampedArray) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Uint8ClampedArray, u8, T>(this, fn, initialValue);\n  }\n\n  map(fn: (value: u8, index: i32, self: Uint8ClampedArray) => u8): Uint8ClampedArray {\n    return MAP<Uint8ClampedArray, u8>(this, fn);\n  }\n\n  filter(fn: (value: u8, index: i32, self: Uint8ClampedArray) => bool): Uint8ClampedArray {\n    return FILTER<Uint8ClampedArray, u8>(this, fn);\n  }\n\n  findIndex(fn: (value: u8, index: i32, self: Uint8ClampedArray) => bool): i32 {\n    return FIND_INDEX<Uint8ClampedArray, u8>(this, fn);\n  }\n\n  some(fn: (value: u8, index: i32, self: Uint8ClampedArray) => bool): bool {\n    return SOME<Uint8ClampedArray, u8>(this, fn);\n  }\n\n  every(fn: (value: u8, index: i32, self: Uint8ClampedArray) => bool): bool {\n    return EVERY<Uint8ClampedArray, u8>(this, fn);\n  }\n\n  forEach(fn: (value: u8, index: i32, self: Uint8ClampedArray) => void): void {\n    FOREACH<Uint8ClampedArray, u8>(this, fn);\n  }\n\n  reverse(): this {\n    return REVERSE<this, u8>(this);\n  }\n\n  join(separator: string = \",\"): string {\n    return joinIntegerArray<u8>(this.dataStart, this.length, separator);\n  }\n\n  set<U extends ArrayBufferView>(source: U, offset: i32 = 0): void {\n    SET<Uint8ClampedArray, u8, U, valueof<U>>(this, source, offset);\n  }\n\n  toString(): string {\n    return this.join();\n  }\n\n  static wrap(buffer: ArrayBuffer, byteOffset: i32 = 0, length: i32 = -1): Uint8ClampedArray {\n    return WRAP<Uint8ClampedArray, u8>(buffer, byteOffset, length);\n  }\n}\n\nexport class Int16Array extends ArrayBufferView {\n  [key: number]: i16;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly BYTES_PER_ELEMENT: usize = sizeof<i16>();\n\n  constructor(length: i32) {\n    super(length, alignof<i16>());\n  }\n\n  get length(): i32 {\n    return this.byteLength >>> alignof<i16>();\n  }\n\n  @operator(\"[]\")\n  private __get(index: i32): i16 {\n    if (<u32>index >= <u32>this.byteLength >>> alignof<i16>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<i16>(this.dataStart + (<usize>index << alignof<i16>()));\n  }\n\n  @unsafe @operator(\"{}\")\n  private __uget(index: i32): i16 {\n    return load<i16>(this.dataStart + (<usize>index << alignof<i16>()));\n  }\n\n  @operator(\"[]=\")\n  private __set(index: i32, value: native<i16>): void {\n    if (<u32>index >= <u32>this.byteLength >>> alignof<i16>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    store<i16>(this.dataStart + (<usize>index << alignof<i16>()), value);\n  }\n\n  @unsafe @operator(\"{}=\")\n  private __uset(index: i32, value: native<i16>): void {\n    store<i16>(this.dataStart + (<usize>index << alignof<i16>()), value);\n  }\n\n  includes(searchElement: i16, fromIndex: i32 = 0): bool {\n    return INCLUDES<Int16Array, i16>(this, searchElement, fromIndex);\n  }\n\n  indexOf(searchElement: i16, fromIndex: i32 = 0): i32 {\n    return INDEX_OF<Int16Array, i16>(this, searchElement, fromIndex);\n  }\n\n  lastIndexOf(searchElement: i16, fromIndex: i32 = this.length): i32 {\n    return LAST_INDEX_OF<Int16Array, i16>(this, searchElement, fromIndex);\n  }\n\n  fill(value: i32, start: i32 = 0, end: i32 = i32.MAX_VALUE): Int16Array {\n    return FILL<Int16Array, i16>(this, value, start, end);\n  }\n\n  sort(comparator: (a: i16, b: i16) => i32 = COMPARATOR<i16>()): Int16Array {\n    return SORT<Int16Array, i16>(this, comparator);\n  }\n\n  slice(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Int16Array {\n    return SLICE<Int16Array, i16>(this, begin, end);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Int16Array {\n    return SUBARRAY<Int16Array, i16>(this, begin, end);\n  }\n\n  copyWithin(target: i32, start: i32, end: i32 = i32.MAX_VALUE): Int16Array {\n    return COPY_WITHIN<Int16Array, i16>(this, target, start, end);\n  }\n\n  reduce<T>(\n    fn: (accumulator: T, value: i16, index: i32, array: Int16Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Int16Array, i16, T>(this, fn, initialValue);\n  }\n\n  reduceRight<T>(\n    fn: (accumulator: T, value: i16, index: i32, array: Int16Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Int16Array, i16, T>(this, fn, initialValue);\n  }\n\n  map(fn: (value: i16, index: i32, self: Int16Array) => i16): Int16Array {\n    return MAP<Int16Array, i16>(this, fn);\n  }\n\n  filter(fn: (value: i16, index: i32, self: Int16Array) => bool): Int16Array {\n    return FILTER<Int16Array, i16>(this, fn);\n  }\n\n  findIndex(fn: (value: i16, index: i32, self: Int16Array) => bool): i32 {\n    return FIND_INDEX<Int16Array, i16>(this, fn);\n  }\n\n  some(fn: (value: i16, index: i32, self: Int16Array) => bool): bool {\n    return SOME<Int16Array, i16>(this, fn);\n  }\n\n  every(fn: (value: i16, index: i32, self: Int16Array) => bool): bool {\n    return EVERY<Int16Array, i16>(this, fn);\n  }\n\n  forEach(fn: (value: i16, index: i32, self: Int16Array) => void): void {\n    FOREACH<Int16Array, i16>(this, fn);\n  }\n\n  reverse(): this {\n    return REVERSE<this, i16>(this);\n  }\n\n  join(separator: string = \",\"): string {\n    return joinIntegerArray<i16>(this.dataStart, this.length, separator);\n  }\n\n  set<U extends ArrayBufferView>(source: U, offset: i32 = 0): void {\n    SET<Int16Array, i16, U, valueof<U>>(this, source, offset);\n  }\n\n  toString(): string {\n    return this.join();\n  }\n\n  static wrap(buffer: ArrayBuffer, byteOffset: i32 = 0, length: i32 = -1): Int16Array {\n    return WRAP<Int16Array, i16>(buffer, byteOffset, length);\n  }\n}\n\nexport class Uint16Array extends ArrayBufferView {\n  [key: number]: u16;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly BYTES_PER_ELEMENT: usize = sizeof<u16>();\n\n  constructor(length: i32) {\n    super(length, alignof<u16>());\n  }\n\n  get length(): i32 {\n    return this.byteLength >>> alignof<u16>();\n  }\n\n  @operator(\"[]\")\n  private __get(index: i32): u16 {\n    if (<u32>index >= <u32>this.byteLength >>> alignof<u16>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<u16>(this.dataStart + (<usize>index << alignof<u16>()));\n  }\n\n  @unsafe @operator(\"{}\")\n  private __uget(index: i32): u16 {\n    return load<u16>(this.dataStart + (<usize>index << alignof<u16>()));\n  }\n\n  @operator(\"[]=\")\n  private __set(index: i32, value: native<u16>): void {\n    if (<u32>index >= <u32>this.byteLength >>> alignof<u16>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    store<u16>(this.dataStart + (<usize>index << alignof<u16>()), value);\n  }\n\n  @unsafe @operator(\"{}=\")\n  private __uset(index: i32, value: native<u16>): void {\n    store<u16>(this.dataStart + (<usize>index << alignof<u16>()), value);\n  }\n\n  includes(searchElement: u16, fromIndex: i32 = 0): bool {\n    return INCLUDES<Uint16Array, u16>(this, searchElement, fromIndex);\n  }\n\n  indexOf(searchElement: u16, fromIndex: i32 = 0): i32 {\n    return INDEX_OF<Uint16Array, u16>(this, searchElement, fromIndex);\n  }\n\n  lastIndexOf(searchElement: u16, fromIndex: i32 = this.length): i32 {\n    return LAST_INDEX_OF<Uint16Array, u16>(this, searchElement, fromIndex);\n  }\n\n  fill(value: u32, start: i32 = 0, end: i32 = i32.MAX_VALUE): Uint16Array {\n    return FILL<Uint16Array, u16>(this, value, start, end);\n  }\n\n  sort(comparator: (a: u16, b: u16) => i32 = COMPARATOR<u16>()): Uint16Array {\n    return SORT<Uint16Array, u16>(this, comparator);\n  }\n\n  slice(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Uint16Array {\n    return SLICE<Uint16Array, u16>(this, begin, end);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Uint16Array {\n    return SUBARRAY<Uint16Array, u16>(this, begin, end);\n  }\n\n  copyWithin(target: i32, start: i32, end: i32 = i32.MAX_VALUE): Uint16Array {\n    return COPY_WITHIN<Uint16Array, u16>(this, target, start, end);\n  }\n\n  reduce<T>(\n    fn: (accumulator: T, value: u16, index: i32, array: Uint16Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Uint16Array, u16, T>(this, fn, initialValue);\n  }\n\n  reduceRight<T>(\n    fn: (accumulator: T, value: u16, index: i32, array: Uint16Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Uint16Array, u16, T>(this, fn, initialValue);\n  }\n\n  map(fn: (value: u16, index: i32, self: Uint16Array) => u16): Uint16Array {\n    return MAP<Uint16Array, u16>(this, fn);\n  }\n\n  filter(fn: (value: u16, index: i32, self: Uint16Array) => bool): Uint16Array {\n    return FILTER<Uint16Array, u16>(this, fn);\n  }\n\n  findIndex(fn: (value: u16, index: i32, self: Uint16Array) => bool): i32 {\n    return FIND_INDEX<Uint16Array, u16>(this, fn);\n  }\n\n  some(fn: (value: u16, index: i32, self: Uint16Array) => bool): bool {\n    return SOME<Uint16Array, u16>(this, fn);\n  }\n\n  every(fn: (value: u16, index: i32, self: Uint16Array) => bool): bool {\n    return EVERY<Uint16Array, u16>(this, fn);\n  }\n\n  forEach(fn: (value: u16, index: i32, self: Uint16Array) => void): void {\n    FOREACH<Uint16Array, u16>(this, fn);\n  }\n\n  reverse(): this {\n    return REVERSE<this, u16>(this);\n  }\n\n  join(separator: string = \",\"): string {\n    return joinIntegerArray<u16>(this.dataStart, this.length, separator);\n  }\n\n  set<U extends ArrayBufferView>(source: U, offset: i32 = 0): void {\n    SET<Uint16Array, u16, U, valueof<U>>(this, source, offset);\n  }\n\n  toString(): string {\n    return this.join();\n  }\n\n  static wrap(buffer: ArrayBuffer, byteOffset: i32 = 0, length: i32 = -1): Uint16Array {\n    return WRAP<Uint16Array, u16>(buffer, byteOffset, length);\n  }\n}\n\nexport class Int32Array extends ArrayBufferView {\n  [key: number]: i32;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly BYTES_PER_ELEMENT: usize = sizeof<i32>();\n\n  constructor(length: i32) {\n    super(length, alignof<i32>());\n  }\n\n  get length(): i32 {\n    return this.byteLength >>> alignof<i32>();\n  }\n\n  @operator(\"[]\")\n  private __get(index: i32): i32 {\n    if (<u32>index >= <u32>this.byteLength >>> alignof<i32>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<i32>(this.dataStart + (<usize>index << alignof<i32>()));\n  }\n\n  @unsafe @operator(\"{}\")\n  private __uget(index: i32): i32 {\n    return load<i32>(this.dataStart + (<usize>index << alignof<i32>()));\n  }\n\n  @operator(\"[]=\")\n  private __set(index: i32, value: i32): void {\n    if (<u32>index >= <u32>this.byteLength >>> alignof<i32>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    store<i32>(this.dataStart + (<usize>index << alignof<i32>()), value);\n  }\n\n  @unsafe @operator(\"{}=\")\n  private __uset(index: i32, value: i32): void {\n    store<i32>(this.dataStart + (<usize>index << alignof<i32>()), value);\n  }\n\n  includes(searchElement: i32, fromIndex: i32 = 0): bool {\n    return INCLUDES<Int32Array, i32>(this, searchElement, fromIndex);\n  }\n\n  indexOf(searchElement: i32, fromIndex: i32 = 0): i32 {\n    return INDEX_OF<Int32Array, i32>(this, searchElement, fromIndex);\n  }\n\n  lastIndexOf(searchElement: i32, fromIndex: i32 = this.length): i32 {\n    return LAST_INDEX_OF<Int32Array, i32>(this, searchElement, fromIndex);\n  }\n\n  fill(value: i32, start: i32 = 0, end: i32 = i32.MAX_VALUE): Int32Array {\n    return FILL<Int32Array, i32>(this, value, start, end);\n  }\n\n  sort(comparator: (a: i32, b: i32) => i32 = COMPARATOR<i32>()): Int32Array {\n    return SORT<Int32Array, i32>(this, comparator);\n  }\n\n  slice(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Int32Array {\n    return SLICE<Int32Array, i32>(this, begin, end);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Int32Array {\n    return SUBARRAY<Int32Array, i32>(this, begin, end);\n  }\n\n  copyWithin(target: i32, start: i32, end: i32 = i32.MAX_VALUE): Int32Array {\n    return COPY_WITHIN<Int32Array, i32>(this, target, start, end);\n  }\n\n  reduce<T>(\n    fn: (accumulator: T, value: i32, index: i32, array: Int32Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Int32Array, i32, T>(this, fn, initialValue);\n  }\n\n  reduceRight<T>(\n    fn: (accumulator: T, value: i32, index: i32, array: Int32Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Int32Array, i32, T>(this, fn, initialValue);\n  }\n\n  map(fn: (value: i32, index: i32, self: Int32Array) => i32): Int32Array {\n    return MAP<Int32Array, i32>(this, fn);\n  }\n\n  filter(fn: (value: i32, index: i32, self: Int32Array) => bool): Int32Array {\n    return FILTER<Int32Array, i32>(this, fn);\n  }\n\n  findIndex(fn: (value: i32, index: i32, self: Int32Array) => bool): i32 {\n    return FIND_INDEX<Int32Array, i32>(this, fn);\n  }\n\n  some(fn: (value: i32, index: i32, self: Int32Array) => bool): bool {\n    return SOME<Int32Array, i32>(this, fn);\n  }\n\n  every(fn: (value: i32, index: i32, self: Int32Array) => bool): bool {\n    return EVERY<Int32Array, i32>(this, fn);\n  }\n\n  forEach(fn: (value: i32, index: i32, self: Int32Array) => void): void {\n    FOREACH<Int32Array, i32>(this, fn);\n  }\n\n  reverse(): this {\n    return REVERSE<this, i32>(this);\n  }\n\n  join(separator: string = \",\"): string {\n    return joinIntegerArray<i32>(this.dataStart, this.length, separator);\n  }\n\n  set<U extends ArrayBufferView>(source: U, offset: i32 = 0): void {\n    SET<Int32Array, i32, U, valueof<U>>(this, source, offset);\n  }\n\n  toString(): string {\n    return this.join();\n  }\n\n  static wrap(buffer: ArrayBuffer, byteOffset: i32 = 0, length: i32 = -1): Int32Array {\n    return WRAP<Int32Array, i32>(buffer, byteOffset, length);\n  }\n}\n\nexport class Uint32Array extends ArrayBufferView {\n  [key: number]: u32;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly BYTES_PER_ELEMENT: usize = sizeof<u32>();\n\n  constructor(length: i32) {\n    super(length, alignof<u32>());\n  }\n\n  get length(): i32 {\n    return this.byteLength >>> alignof<u32>();\n  }\n\n  @operator(\"[]\")\n  private __get(index: i32): u32 {\n    if (<u32>index >= <u32>this.byteLength >>> alignof<u32>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<u32>(this.dataStart + (<usize>index << alignof<u32>()));\n  }\n\n  @unsafe @operator(\"{}\")\n  private __uget(index: i32): u32 {\n    return load<u32>(this.dataStart + (<usize>index << alignof<u32>()));\n  }\n\n  @operator(\"[]=\")\n  private __set(index: i32, value: u32): void {\n    if (<u32>index >= <u32>this.byteLength >>> alignof<u32>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    store<u32>(this.dataStart + (<usize>index << alignof<u32>()), value);\n  }\n\n  @unsafe @operator(\"{}=\")\n  private __uset(index: i32, value: u32): void {\n    store<u32>(this.dataStart + (<usize>index << alignof<u32>()), value);\n  }\n\n  includes(searchElement: u32, fromIndex: i32 = 0): bool {\n    return INCLUDES<Uint32Array, u32>(this, searchElement, fromIndex);\n  }\n\n  indexOf(searchElement: u32, fromIndex: i32 = 0): i32 {\n    return INDEX_OF<Uint32Array, u32>(this, searchElement, fromIndex);\n  }\n\n  lastIndexOf(searchElement: u32, fromIndex: i32 = this.length): i32 {\n    return LAST_INDEX_OF<Uint32Array, u32>(this, searchElement, fromIndex);\n  }\n\n  fill(value: u32, start: i32 = 0, end: i32 = i32.MAX_VALUE): Uint32Array {\n    return FILL<Uint32Array, u32>(this, value, start, end);\n  }\n\n  sort(comparator: (a: u32, b: u32) => i32 = COMPARATOR<u32>()): Uint32Array {\n    return SORT<Uint32Array, u32>(this, comparator);\n  }\n\n  slice(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Uint32Array {\n    return SLICE<Uint32Array, u32>(this, begin, end);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Uint32Array {\n    return SUBARRAY<Uint32Array, u32>(this, begin, end);\n  }\n\n  copyWithin(target: i32, start: i32, end: i32 = i32.MAX_VALUE): Uint32Array {\n    return COPY_WITHIN<Uint32Array, u32>(this, target, start, end);\n  }\n\n  reduce<T>(\n    fn: (accumulator: T, value: u32, index: i32, array: Uint32Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Uint32Array, u32, T>(this, fn, initialValue);\n  }\n\n  reduceRight<T>(\n    fn: (accumulator: T, value: u32, index: i32, array: Uint32Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Uint32Array, u32, T>(this, fn, initialValue);\n  }\n\n  map(fn: (value: u32, index: i32, self: Uint32Array) => u32): Uint32Array {\n    return MAP<Uint32Array, u32>(this, fn);\n  }\n\n  filter(fn: (value: u32, index: i32, self: Uint32Array) => bool): Uint32Array {\n    return FILTER<Uint32Array, u32>(this, fn);\n  }\n\n  findIndex(fn: (value: u32, index: i32, self: Uint32Array) => bool): i32 {\n    return FIND_INDEX<Uint32Array, u32>(this, fn);\n  }\n\n  some(fn: (value: u32, index: i32, self: Uint32Array) => bool): bool {\n    return SOME<Uint32Array, u32>(this, fn);\n  }\n\n  every(fn: (value: u32, index: i32, self: Uint32Array) => bool): bool {\n    return EVERY<Uint32Array, u32>(this, fn);\n  }\n\n  forEach(fn: (value: u32, index: i32, self: Uint32Array) => void): void {\n    FOREACH<Uint32Array, u32>(this, fn);\n  }\n\n  reverse(): this {\n    return REVERSE<this, u32>(this);\n  }\n\n  join(separator: string = \",\"): string {\n    return joinIntegerArray<u32>(this.dataStart, this.length, separator);\n  }\n\n  set<U extends ArrayBufferView>(source: U, offset: i32 = 0): void {\n    SET<Uint32Array, u32, U, valueof<U>>(this, source, offset);\n  }\n\n  toString(): string {\n    return this.join();\n  }\n\n  static wrap(buffer: ArrayBuffer, byteOffset: i32 = 0, length: i32 = -1): Uint32Array {\n    return WRAP<Uint32Array, u32>(buffer, byteOffset, length);\n  }\n}\n\nexport class Int64Array extends ArrayBufferView {\n  [key: number]: i64;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly BYTES_PER_ELEMENT: usize = sizeof<i64>();\n\n  constructor(length: i32) {\n    super(length, alignof<i64>());\n  }\n\n  get length(): i32 {\n    return this.byteLength >>> alignof<i64>();\n  }\n\n  @operator(\"[]\")\n  private __get(index: i32): i64 {\n    if (<u32>index >= <u32>this.byteLength >>> alignof<i64>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<i64>(this.dataStart + (<usize>index << alignof<i64>()));\n  }\n\n  @unsafe @operator(\"{}\")\n  private __uget(index: i32): i64 {\n    return load<i64>(this.dataStart + (<usize>index << alignof<i64>()));\n  }\n\n  @operator(\"[]=\")\n  private __set(index: i32, value: i64): void {\n    if (<u32>index >= <u32>this.byteLength >>> alignof<i64>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    store<i64>(this.dataStart + (<usize>index << alignof<i64>()), value);\n  }\n\n  @unsafe @operator(\"{}=\")\n  private __uset(index: i32, value: i64): void {\n    store<i64>(this.dataStart + (<usize>index << alignof<i64>()), value);\n  }\n\n  includes(searchElement: i64, fromIndex: i32 = 0): bool {\n    return INCLUDES<Int64Array, i64>(this, searchElement, fromIndex);\n  }\n\n  indexOf(searchElement: i64, fromIndex: i32 = 0): i32 {\n    return INDEX_OF<Int64Array, i64>(this, searchElement, fromIndex);\n  }\n\n  lastIndexOf(searchElement: i64, fromIndex: i32 = this.length): i32 {\n    return LAST_INDEX_OF<Int64Array, i64>(this, searchElement, fromIndex);\n  }\n\n  fill(value: i64, start: i32 = 0, end: i32 = i32.MAX_VALUE): Int64Array {\n    return FILL<Int64Array, i64>(this, value, start, end);\n  }\n\n  sort(comparator: (a: i64, b: i64) => i32 = COMPARATOR<i64>()): Int64Array {\n    return SORT<Int64Array, i64>(this, comparator);\n  }\n\n  slice(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Int64Array {\n    return SLICE<Int64Array, i64>(this, begin, end);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Int64Array {\n    return SUBARRAY<Int64Array, i64>(this, begin, end);\n  }\n\n  copyWithin(target: i32, start: i32, end: i32 = i32.MAX_VALUE): Int64Array {\n    return COPY_WITHIN<Int64Array, i64>(this, target, start, end);\n  }\n\n  reduce<T>(\n    fn: (accumulator: T, value: i64, index: i32, array: Int64Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Int64Array, i64, T>(this, fn, initialValue);\n  }\n\n  reduceRight<T>(\n    fn: (accumulator: T, value: i64, index: i32, array: Int64Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Int64Array, i64, T>(this, fn, initialValue);\n  }\n\n  map(fn: (value: i64, index: i32, self: Int64Array) => i64): Int64Array {\n    return MAP<Int64Array, i64>(this, fn);\n  }\n\n  filter(fn: (value: i64, index: i32, self: Int64Array) => bool): Int64Array {\n    return FILTER<Int64Array, i64>(this, fn);\n  }\n\n  findIndex(fn: (value: i64, index: i32, self: Int64Array) => bool): i32 {\n    return FIND_INDEX<Int64Array, i64>(this, fn);\n  }\n\n  some(fn: (value: i64, index: i32, self: Int64Array) => bool): bool {\n    return SOME<Int64Array, i64>(this, fn);\n  }\n\n  every(fn: (value: i64, index: i32, self: Int64Array) => bool): bool {\n    return EVERY<Int64Array, i64>(this, fn);\n  }\n\n  forEach(fn: (value: i64, index: i32, self: Int64Array) => void): void {\n    FOREACH<Int64Array, i64>(this, fn);\n  }\n\n  reverse(): this {\n    return REVERSE<this, i64>(this);\n  }\n\n  join(separator: string = \",\"): string {\n    return joinIntegerArray<i64>(this.dataStart, this.length, separator);\n  }\n\n  set<U extends ArrayBufferView>(source: U, offset: i32 = 0): void {\n    SET<Int64Array, i64, U, valueof<U>>(this, source, offset);\n  }\n\n  toString(): string {\n    return this.join();\n  }\n\n  static wrap(buffer: ArrayBuffer, byteOffset: i32 = 0, length: i32 = -1): Int64Array {\n    return WRAP<Int64Array, i64>(buffer, byteOffset, length);\n  }\n}\n\nexport class Uint64Array extends ArrayBufferView {\n  [key: number]: u64;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly BYTES_PER_ELEMENT: usize = sizeof<u64>();\n\n  constructor(length: i32) {\n    super(length, alignof<u64>());\n  }\n\n  get length(): i32 {\n    return this.byteLength >>> alignof<u64>();\n  }\n\n  @operator(\"[]\")\n  private __get(index: i32): u64 {\n    if (<u32>index >= <u32>this.byteLength >>> alignof<u64>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<u64>(this.dataStart + (<usize>index << alignof<u64>()));\n  }\n\n  @unsafe @operator(\"{}\")\n  private __uget(index: i32): u64 {\n    return load<u64>(this.dataStart + (<usize>index << alignof<u64>()));\n  }\n\n  @operator(\"[]=\")\n  private __set(index: i32, value: u64): void {\n    if (<u32>index >= <u32>this.byteLength >>> alignof<u64>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    store<u64>(this.dataStart + (<usize>index << alignof<u64>()), value);\n  }\n\n  @unsafe @operator(\"{}=\")\n  private __uset(index: i32, value: u64): void {\n    store<u64>(this.dataStart + (<usize>index << alignof<u64>()), value);\n  }\n\n  includes(searchElement: u64, fromIndex: i32 = 0): bool {\n    return INCLUDES<Uint64Array, u64>(this, searchElement, fromIndex);\n  }\n\n  indexOf(searchElement: u64, fromIndex: i32 = 0): i32 {\n    return INDEX_OF<Uint64Array, u64>(this, searchElement, fromIndex);\n  }\n\n  lastIndexOf(searchElement: u64, fromIndex: i32 = this.length): i32 {\n    return LAST_INDEX_OF<Uint64Array, u64>(this, searchElement, fromIndex);\n  }\n\n  fill(value: u64, start: i32 = 0, end: i32 = i32.MAX_VALUE): Uint64Array {\n    return FILL<Uint64Array, u64>(this, value, start, end);\n  }\n\n  sort(comparator: (a: u64, b: u64) => i32 = COMPARATOR<u64>()): Uint64Array {\n    return SORT<Uint64Array, u64>(this, comparator);\n  }\n\n  slice(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Uint64Array {\n    return SLICE<Uint64Array, u64>(this, begin, end);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Uint64Array {\n    return SUBARRAY<Uint64Array, u64>(this, begin, end);\n  }\n\n  copyWithin(target: i32, start: i32, end: i32 = i32.MAX_VALUE): Uint64Array {\n    return COPY_WITHIN<Uint64Array, u64>(this, target, start, end);\n  }\n\n  reduce<T>(\n    fn: (accumulator: T, value: u64, index: i32, array: Uint64Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Uint64Array, u64, T>(this, fn, initialValue);\n  }\n\n  reduceRight<T>(\n    fn: (accumulator: T, value: u64, index: i32, array: Uint64Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Uint64Array, u64, T>(this, fn, initialValue);\n  }\n\n  map(fn: (value: u64, index: i32, self: Uint64Array) => u64): Uint64Array {\n    return MAP<Uint64Array, u64>(this, fn);\n  }\n\n  filter(fn: (value: u64, index: i32, self: Uint64Array) => bool): Uint64Array {\n    return FILTER<Uint64Array, u64>(this, fn);\n  }\n\n  findIndex(fn: (value: u64, index: i32, self: Uint64Array) => bool): i32 {\n    return FIND_INDEX<Uint64Array, u64>(this, fn);\n  }\n\n  some(fn: (value: u64, index: i32, self: Uint64Array) => bool): bool {\n    return SOME<Uint64Array, u64>(this, fn);\n  }\n\n  every(fn: (value: u64, index: i32, self: Uint64Array) => bool): bool {\n    return EVERY<Uint64Array, u64>(this, fn);\n  }\n\n  forEach(fn: (value: u64, index: i32, self: Uint64Array) => void): void {\n    FOREACH<Uint64Array, u64>(this, fn);\n  }\n\n  reverse(): this {\n    return REVERSE<this, u64>(this);\n  }\n\n  join(separator: string = \",\"): string {\n    return joinIntegerArray<u64>(this.dataStart, this.length, separator);\n  }\n\n  set<U extends ArrayBufferView>(source: U, offset: i32 = 0): void {\n    SET<Uint64Array, u64, U, valueof<U>>(this, source, offset);\n  }\n\n  toString(): string {\n    return this.join();\n  }\n\n  static wrap(buffer: ArrayBuffer, byteOffset: i32 = 0, length: i32 = -1): Uint64Array {\n    return WRAP<Uint64Array, u64>(buffer, byteOffset, length);\n  }\n}\n\nexport class Float32Array extends ArrayBufferView {\n  [key: number]: f32;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly BYTES_PER_ELEMENT: usize = sizeof<f32>();\n\n  constructor(length: i32) {\n    super(length, alignof<f32>());\n  }\n\n  get length(): i32 {\n    return this.byteLength >>> alignof<f32>();\n  }\n\n  @operator(\"[]\")\n  private __get(index: i32): f32 {\n    if (<u32>index >= <u32>this.byteLength >>> alignof<f32>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<f32>(this.dataStart + (<usize>index << alignof<f32>()));\n  }\n\n  @unsafe @operator(\"{}\")\n  private __uget(index: i32): f32 {\n    return load<f32>(this.dataStart + (<usize>index << alignof<f32>()));\n  }\n\n  @operator(\"[]=\")\n  private __set(index: i32, value: f32): void {\n    if (<u32>index >= <u32>this.byteLength >>> alignof<f32>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    store<f32>(this.dataStart + (<usize>index << alignof<f32>()), value);\n  }\n\n  @unsafe @operator(\"{}=\")\n  private __uset(index: i32, value: f32): void {\n    store<f32>(this.dataStart + (<usize>index << alignof<f32>()), value);\n  }\n\n  includes(searchElement: f32, fromIndex: i32 = 0): bool {\n    return INCLUDES<Float32Array, f32>(this, searchElement, fromIndex);\n  }\n\n  indexOf(searchElement: f32, fromIndex: i32 = 0): i32 {\n    return INDEX_OF<Float32Array, f32>(this, searchElement, fromIndex);\n  }\n\n  lastIndexOf(searchElement: f32, fromIndex: i32 = this.length): i32 {\n    return LAST_INDEX_OF<Float32Array, f32>(this, searchElement, fromIndex);\n  }\n\n  fill(value: f32, start: i32 = 0, end: i32 = i32.MAX_VALUE): Float32Array {\n    return FILL<Float32Array, f32>(this, value, start, end);\n  }\n\n  sort(comparator: (a: f32, b: f32) => i32 = COMPARATOR<f32>()): Float32Array {\n    return SORT<Float32Array, f32>(this, comparator);\n  }\n\n  slice(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Float32Array {\n    return SLICE<Float32Array, f32>(this, begin, end);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Float32Array {\n    return SUBARRAY<Float32Array, f32>(this, begin, end);\n  }\n\n  copyWithin(target: i32, start: i32, end: i32 = i32.MAX_VALUE): Float32Array {\n    return COPY_WITHIN<Float32Array, f32>(this, target, start, end);\n  }\n\n  reduce<T>(\n    fn: (accumulator: T, value: f32, index: i32, array: Float32Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Float32Array, f32, T>(this, fn, initialValue);\n  }\n\n  reduceRight<T>(\n    fn: (accumulator: T, value: f32, index: i32, array: Float32Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Float32Array, f32, T>(this, fn, initialValue);\n  }\n\n  map(fn: (value: f32, index: i32, self: Float32Array) => f32): Float32Array {\n    return MAP<Float32Array, f32>(this, fn);\n  }\n\n  filter(fn: (value: f32, index: i32, self: Float32Array) => bool): Float32Array {\n    return FILTER<Float32Array, f32>(this, fn);\n  }\n\n  findIndex(fn: (value: f32, index: i32, self: Float32Array) => bool): i32 {\n    return FIND_INDEX<Float32Array, f32>(this, fn);\n  }\n\n  some(fn: (value: f32, index: i32, self: Float32Array) => bool): bool {\n    return SOME<Float32Array, f32>(this, fn);\n  }\n\n  every(fn: (value: f32, index: i32, self: Float32Array) => bool): bool {\n    return EVERY<Float32Array, f32>(this, fn);\n  }\n\n  forEach(fn: (value: f32, index: i32, self: Float32Array) => void): void {\n    FOREACH<Float32Array, f32>(this, fn);\n  }\n\n  reverse(): this {\n    return REVERSE<this, f32>(this);\n  }\n\n  join(separator: string = \",\"): string {\n    return joinFloatArray<f32>(this.dataStart, this.length, separator);\n  }\n\n  set<U extends ArrayBufferView>(source: U, offset: i32 = 0): void {\n    SET<Float32Array, f32, U, valueof<U>>(this, source, offset);\n  }\n\n  toString(): string {\n    return this.join();\n  }\n\n  static wrap(buffer: ArrayBuffer, byteOffset: i32 = 0, length: i32 = -1): Float32Array {\n    return WRAP<Float32Array, f32>(buffer, byteOffset, length);\n  }\n}\n\nexport class Float64Array extends ArrayBufferView {\n  [key: number]: f64;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly BYTES_PER_ELEMENT: usize = sizeof<f64>();\n\n  constructor(length: i32) {\n    super(length, alignof<f64>());\n  }\n\n  get length(): i32 {\n    return this.byteLength >>> alignof<f64>();\n  }\n\n  @operator(\"[]\")\n  private __get(index: i32): f64 {\n    if (<u32>index >= <u32>this.byteLength >>> alignof<f64>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<f64>(this.dataStart + (<usize>index << alignof<f64>()));\n  }\n\n  @unsafe @operator(\"{}\")\n  private __uget(index: i32): f64 {\n    return load<f64>(this.dataStart + (<usize>index << alignof<f64>()));\n  }\n\n  @operator(\"[]=\")\n  private __set(index: i32, value: f64): void {\n    if (<u32>index >= <u32>this.byteLength >>> alignof<f64>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    store<f64>(this.dataStart + (<usize>index << alignof<f64>()), value);\n  }\n\n  @unsafe @operator(\"{}=\")\n  private __uset(index: i32, value: f64): void {\n    store<f64>(this.dataStart + (<usize>index << alignof<f64>()), value);\n  }\n\n  includes(searchElement: f64, fromIndex: i32 = 0): bool {\n    return INCLUDES<Float64Array, f64>(this, searchElement, fromIndex);\n  }\n\n  indexOf(searchElement: f64, fromIndex: i32 = 0): i32 {\n    return INDEX_OF<Float64Array, f64>(this, searchElement, fromIndex);\n  }\n\n  lastIndexOf(searchElement: f64, fromIndex: i32 = this.length): i32 {\n    return LAST_INDEX_OF<Float64Array, f64>(this, searchElement, fromIndex);\n  }\n\n  fill(value: f64, start: i32 = 0, end: i32 = i32.MAX_VALUE): Float64Array {\n    return FILL<Float64Array, f64>(this, value, start, end);\n  }\n\n  sort(comparator: (a: f64, b: f64) => i32 = COMPARATOR<f64>()): Float64Array {\n    return SORT<Float64Array, f64>(this, comparator);\n  }\n\n  slice(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Float64Array {\n    return SLICE<Float64Array, f64>(this, begin, end);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Float64Array {\n    return SUBARRAY<Float64Array, f64>(this, begin, end);\n  }\n\n  copyWithin(target: i32, start: i32, end: i32 = i32.MAX_VALUE): Float64Array {\n    return COPY_WITHIN<Float64Array, f64>(this, target, start, end);\n  }\n\n  reduce<T>(\n    fn: (accumulator: T, value: f64, index: i32, array: Float64Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Float64Array, f64, T>(this, fn, initialValue);\n  }\n\n  reduceRight<T>(\n    fn: (accumulator: T, value: f64, index: i32, array: Float64Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Float64Array, f64, T>(this, fn, initialValue);\n  }\n\n  map(fn: (value: f64, index: i32, self: Float64Array) => f64): Float64Array {\n    return MAP<Float64Array, f64>(this, fn);\n  }\n\n  filter(fn: (value: f64, index: i32, self: Float64Array) => bool): Float64Array {\n    return FILTER<Float64Array, f64>(this, fn);\n  }\n\n  findIndex(fn: (value: f64, index: i32, self: Float64Array) => bool): i32 {\n    return FIND_INDEX<Float64Array, f64>(this, fn);\n  }\n\n  some(fn: (value: f64, index: i32, self: Float64Array) => bool): bool {\n    return SOME<Float64Array, f64>(this, fn);\n  }\n\n  every(fn: (value: f64, index: i32, self: Float64Array) => bool): bool {\n    return EVERY<Float64Array, f64>(this, fn);\n  }\n\n  forEach(fn: (value: f64, index: i32, self: Float64Array) => void): void {\n    FOREACH<Float64Array, f64>(this, fn);\n  }\n\n  reverse(): this {\n    return REVERSE<this, f64>(this);\n  }\n\n  join(separator: string = \",\"): string {\n    return joinFloatArray<f64>(this.dataStart, this.length, separator);\n  }\n\n  set<U extends ArrayBufferView>(source: U, offset: i32 = 0): void {\n    SET<Float64Array, f64, U, valueof<U>>(this, source, offset);\n  }\n\n  toString(): string {\n    return this.join();\n  }\n\n  static wrap(buffer: ArrayBuffer, byteOffset: i32 = 0, length: i32 = -1): Float64Array {\n    return WRAP<Float64Array, f64>(buffer, byteOffset, length);\n  }\n}\n\n// @ts-ignore: decorator\n@inline\nfunction FILL<TArray extends ArrayBufferView, T extends number>(\n  array: TArray,\n  value: native<T>,\n  start: i32,\n  end: i32\n): TArray {\n  var dataStart = array.dataStart;\n  var len = array.length;\n  start = start < 0 ? max(len + start, 0) : min(start, len);\n  end   = end   < 0 ? max(len + end,   0) : min(end,   len);\n  if (sizeof<T>() == 1) {\n    if (start < end) memory.fill(dataStart + <usize>start, <u8>value, <usize>(end - start));\n  } else {\n    for (; start < end; ++start) {\n      store<T>(dataStart + (<usize>start << alignof<T>()), value);\n    }\n  }\n  return array;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction SORT<TArray extends ArrayBufferView, T>(\n  array: TArray,\n  comparator: (a: T, b: T) => i32\n): TArray {\n  var len = array.length;\n  if (len <= 1) return array;\n  var base = array.dataStart;\n  if (len == 2) {\n    let a: T = load<T>(base, sizeof<T>()); // a = arr[1]\n    let b: T = load<T>(base); // b = arr[0]\n    if (comparator(a, b) < 0) {\n      store<T>(base, b, sizeof<T>()); // arr[1] = b\n      store<T>(base, a); // arr[0] = a\n    }\n    return array;\n  }\n  SORT_IMPL<T>(base, len, comparator);\n  return array;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction SLICE<TArray extends ArrayBufferView, T>(\n  array: TArray,\n  start: i32,\n  end: i32\n): TArray {\n  var len = array.length;\n  start  = start < 0 ? max(start + len, 0) : min(start, len);\n  end    = end   < 0 ? max(end   + len, 0) : min(end  , len);\n  len = max(end - start, 0);\n  var slice = instantiate<TArray>(len);\n  memory.copy(\n    slice.dataStart,\n    array.dataStart + (<usize>start << alignof<T>()),\n    <usize>len << alignof<T>()\n  );\n  return slice;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction SUBARRAY<TArray extends ArrayBufferView, T>(\n  array: TArray,\n  begin: i32,\n  end: i32\n): TArray {\n  var len = array.length;\n  begin = begin < 0 ? max(len + begin, 0) : min(begin, len);\n  end   = end   < 0 ? max(len + end,   0) : min(end,   len);\n  end   = max(end, begin);\n\n  var out = __alloc(offsetof<TArray>(), idof<TArray>());\n  store<usize>(out, __retain(changetype<usize>(array.buffer)), offsetof<TArray>(\"buffer\"));\n  store<usize>(out, array.dataStart + (<usize>begin << alignof<T>()), offsetof<TArray>(\"dataStart\"));\n  store<u32>(out, (end - begin) << alignof<T>(), offsetof<TArray>(\"byteLength\"));\n  return changetype<TArray>(out); // retains\n}\n\n// @ts-ignore: decorator\n@inline\nfunction COPY_WITHIN<TArray extends ArrayBufferView, T>(\n  array: TArray,\n  target: i32,\n  start: i32,\n  end: i32\n): TArray {\n  var len = array.length;\n  var dataStart = array.dataStart;\n\n      end   = min<i32>(end, len);\n  var to    = target < 0 ? max(len + target, 0) : min(target, len);\n  var from  = start < 0 ? max(len + start, 0) : min(start, len);\n  var last  = end < 0 ? max(len + end, 0) : min(end, len);\n  var count = min(last - from, len - to);\n\n  memory.copy(\n    dataStart + (<usize>to << alignof<T>()),\n    dataStart + (<usize>from << alignof<T>()),\n    <usize>count << alignof<T>()\n  );\n  return array;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction REDUCE<TArray extends ArrayBufferView, T, TRet>(\n  array: TArray,\n  fn: (accumulator: TRet, value: T, index: i32, array: TArray) => TRet,\n  initialValue: TRet\n): TRet {\n  var dataStart = array.dataStart;\n  for (let i = 0, k = array.length; i < k; i++) {\n    initialValue = fn(initialValue, load<T>(dataStart + (<usize>i << alignof<T>())), i, array);\n  }\n  return initialValue;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction REDUCE_RIGHT<TArray extends ArrayBufferView, T, TRet>(\n  array: TArray,\n  fn: (accumulator: TRet, value: T, index: i32, array: TArray) => TRet,\n  initialValue: TRet\n): TRet {\n  var dataStart = array.dataStart;\n  for (let i = array.length - 1; i >= 0; i--) {\n    initialValue = fn(initialValue, load<T>(dataStart + (<usize>i << alignof<T>())), i, array);\n  }\n  return initialValue;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction MAP<TArray extends ArrayBufferView, T>(\n  array: TArray,\n  fn: (value: T, index: i32, self: TArray) => T,\n): TArray {\n  var len = array.length;\n  var dataStart = array.dataStart;\n\n  var byteLength = len << alignof<T>();\n  var out = __alloc(offsetof<TArray>(), idof<TArray>());\n  var buffer = __alloc(byteLength, idof<ArrayBuffer>());\n  for (let i = 0; i < len; i++) {\n    store<T>(\n      buffer + (<usize>i << alignof<T>()),\n      fn(load<T>(dataStart + (<usize>i << alignof<T>())), i, array)\n    );\n  }\n  store<usize>(out, __retain(buffer), offsetof<TArray>(\"buffer\"));\n  store<usize>(out, buffer, offsetof<TArray>(\"dataStart\"));\n  store<u32>(out, byteLength, offsetof<TArray>(\"byteLength\"));\n  return changetype<TArray>(out); // retains\n}\n\n// @ts-ignore: decorator\n@inline\nfunction FILTER<TArray extends ArrayBufferView, T>(\n  array: TArray,\n  fn: (value: T, index: i32, self: TArray) => bool,\n): TArray {\n  var len = array.length;\n  var out = __alloc(offsetof<TArray>(), idof<TArray>());\n  var buffer = __alloc(len << alignof<T>(), idof<ArrayBuffer>());\n  var dataStart  = array.dataStart;\n  var j: usize = 0;\n  for (let i = 0; i < len; i++) {\n    let value = load<T>(dataStart + (<usize>i << alignof<T>()));\n    if (fn(value, i, array)) {\n      store<T>(\n        buffer + (j++ << alignof<T>()),\n        value\n      );\n    }\n  }\n  // shrink output buffer\n  var byteLength = j << alignof<T>();\n  var data = __realloc(buffer, byteLength);\n  store<usize>(out, __retain(data), offsetof<TArray>(\"buffer\"));\n  store<u32>(out, byteLength, offsetof<TArray>(\"byteLength\"));\n  store<usize>(out, data, offsetof<TArray>(\"dataStart\"));\n  return changetype<TArray>(out); // retains\n}\n\n// @ts-ignore: decorator\n@inline\nfunction FIND_INDEX<TArray extends ArrayBufferView, T>(\n  array: TArray,\n  fn: (value: T, index: i32, array: TArray) => bool,\n): i32 {\n  var dataStart = array.dataStart;\n  for (let i = 0, k = array.length; i < k; i++) {\n    if (fn(load<T>(dataStart + (<usize>i << alignof<T>())), i, array)) return i;\n  }\n  return -1;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction INCLUDES<TArray extends ArrayBufferView, T>(\n  array: TArray,\n  searchElement: T,\n  fromIndex: i32,\n): bool {\n  if (isFloat<T>()) {\n    let index: isize = fromIndex;\n    let length: isize = array.length;\n    if (length == 0 || index >= length) return false;\n    if (index < 0) index = max(length + index, 0);\n    let dataStart = array.dataStart;\n    while (index < length) {\n      let elem = load<T>(dataStart + (index << alignof<T>()));\n      // @ts-ignore\n      if (elem == searchElement || isNaN(elem) & isNaN(searchElement)) return true;\n      ++index;\n    }\n    return false;\n  } else {\n    return INDEX_OF<TArray, T>(array, searchElement, fromIndex) >= 0;\n  }\n}\n\n// @ts-ignore: decorator\n@inline\nfunction INDEX_OF<TArray extends ArrayBufferView, T>(\n  array: TArray,\n  searchElement: T,\n  fromIndex: i32,\n): i32 {\n  var index: isize = fromIndex;\n  var length: isize = array.length;\n  if (length == 0 || index >= length) return -1;\n  if (index < 0) index = max(length + index, 0);\n  var dataStart = array.dataStart;\n  while (index < length) {\n    if (load<T>(dataStart + (index << alignof<T>())) == searchElement) return <i32>index;\n    ++index;\n  }\n  return -1;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction LAST_INDEX_OF<TArray extends ArrayBufferView, T>(\n  array: TArray,\n  searchElement: T,\n  fromIndex: i32,\n): i32 {\n  var index: isize = fromIndex;\n  var length: isize = array.length;\n  if (length == 0) return -1;\n  if (index < 0) index = length + index; // no need to clamp\n  else if (index >= length) index = length - 1;\n  var dataStart = array.dataStart;\n  while (index >= 0) {\n    if (load<T>(dataStart + (index << alignof<T>())) == searchElement) return <i32>index;\n    --index;\n  }\n  return -1;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction SOME<TArray extends ArrayBufferView, T>(\n  array: TArray,\n  fn: (value: T, index: i32, array: TArray) => bool,\n): bool {\n  var dataStart = array.dataStart;\n  for (let i = 0, k = array.length; i < k; i++) {\n    if (fn(load<T>(dataStart + (<usize>i << alignof<T>())), i, array)) return true;\n  }\n  return false;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction EVERY<TArray extends ArrayBufferView, T>(\n  array: TArray,\n  fn: (value: T, index: i32, array: TArray) => bool,\n): bool {\n  var dataStart = array.dataStart;\n  for (let i = 0, k = array.length; i < k; i++) {\n    if (fn(load<T>(dataStart + (<usize>i << alignof<T>())), i, array)) continue;\n    return false;\n  }\n  return true;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction FOREACH<TArray extends ArrayBufferView, T>(\n  array: TArray,\n  fn: (value: T, index: i32, array: TArray) => void,\n): void {\n  var dataStart = array.dataStart;\n  for (let i = 0, k = array.length; i < k; i++) {\n    fn(load<T>(dataStart + (<usize>i << alignof<T>())), i, array);\n  }\n}\n\n// @ts-ignore: decorator\n@inline\nfunction REVERSE<TArray extends ArrayBufferView, T>(array: TArray): TArray {\n  var dataStart = array.dataStart;\n  for (let front: usize = 0, back: usize = array.length - 1; front < back; ++front, --back) {\n    let frontPtr = dataStart + (front << alignof<T>());\n    let backPtr = dataStart + (back << alignof<T>());\n    let temp = load<T>(frontPtr);\n    store<T>(frontPtr, load<T>(backPtr));\n    store<T>(backPtr, temp);\n  }\n  return array;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction WRAP<TArray extends ArrayBufferView, T>(buffer: ArrayBuffer, byteOffset: i32 = 0, length: i32 = -1): TArray {\n  var byteLength: i32;\n  var bufferByteLength = buffer.byteLength;\n  const mask = sizeof<T>() - 1;\n  if (i32(<u32>byteOffset > <u32>bufferByteLength) | (byteOffset & mask)) {\n    throw new RangeError(E_INDEXOUTOFRANGE);\n  }\n  if (length < 0) {\n    if (length == -1) {\n      if (bufferByteLength & mask) {\n        throw new RangeError(E_INVALIDLENGTH);\n      }\n      byteLength = bufferByteLength - byteOffset;\n    } else {\n      throw new RangeError(E_INVALIDLENGTH);\n    }\n  } else {\n    byteLength = length << alignof<T>();\n    if (byteOffset + byteLength > bufferByteLength) {\n      throw new RangeError(E_INVALIDLENGTH);\n    }\n  }\n  var out = __alloc(offsetof<TArray>(), idof<TArray>());\n  store<usize>(out, __retain(changetype<usize>(buffer)), offsetof<TArray>(\"buffer\"));\n  store<u32>(out, byteLength, offsetof<TArray>(\"byteLength\"));\n  store<usize>(out, changetype<usize>(buffer) + <usize>byteOffset, offsetof<TArray>(\"dataStart\"));\n  return changetype<TArray>(out); // retains\n}\n\n// @ts-ignore: decorator\n@inline\nfunction SET<TArray extends ArrayBufferView, T, UArray extends ArrayBufferView, U>(target: TArray, source: UArray, offset: i32 = 0): void {\n  // need to assert at compile time that U is not a reference or a function\n  if (isReference<U>()) {\n    ERROR(E_NOTIMPLEMENTED);\n  }\n\n  // Uncaught RangeError: offset is out of bounds\n  if (offset < 0) throw new RangeError(E_INDEXOUTOFRANGE);\n  if (source.length + offset > target.length) throw new RangeError(E_INDEXOUTOFRANGE);\n\n  // if the types align and match, use memory.copy() instead of manual loop\n  if (isInteger<T>() == isInteger<U>() && alignof<T>() == alignof<U>() &&\n    !(target instanceof Uint8ClampedArray && isSigned<U>())) {\n    memory.copy(\n      target.dataStart + (<usize>offset << alignof<T>()),\n      source.dataStart,\n      source.byteLength\n    );\n  } else {\n    let targetDataStart = target.dataStart + (<usize>offset << alignof<T>());\n    let sourceDataStart = source.dataStart;\n    let count = source.length;\n    for (let i = 0; i < count; i++) {\n      // if TArray is Uint8ClampedArray, then values must be clamped\n      if (target instanceof Uint8ClampedArray) {\n        if (isFloat<U>()) {\n          let value = load<U>(sourceDataStart + (<usize>i << alignof<U>()));\n          store<T>(\n            targetDataStart + (<usize>i << alignof<T>()),\n            isFinite<U>(value) ? <T>max<U>(0, min<U>(255, value)) : 0\n          );\n        } else {\n          let value = load<U>(sourceDataStart + (<usize>i << alignof<U>()));\n          if (!isSigned<U>()) {\n            store<T>(\n              targetDataStart + (<usize>i << alignof<T>()),\n              // @ts-ignore: cast to T is valid for numeric types here\n              min<U>(255, value)\n            );\n          } else if (sizeof<T>() <= 4) {\n            store<T>(\n              targetDataStart + (<usize>i << alignof<T>()),\n              // @ts-ignore: cast to T is valid for numeric types here\n              ~(<i32>value >> 31) & (((255 - <i32>value) >> 31) | value)\n            );\n          } else {\n            store<T>(\n              targetDataStart + (<usize>i << alignof<T>()),\n              // @ts-ignore: cast to T is valid for numeric types here\n              ~(<i64>value >> 63) & (((255 - <i64>value) >> 63) | value)\n            );\n          }\n        }\n        // if U is a float, then casting float to int must include a finite check\n      } else if (isFloat<U>() && !isFloat<T>()) {\n        let value = load<U>(sourceDataStart + (<usize>i << alignof<U>()));\n        // @ts-ignore: cast to T is valid for numeric types here\n        store<T>(targetDataStart + (<usize>i << alignof<T>()), isFinite<U>(value) ? <T>value : 0);\n      } else if (isFloat<T>() && !isFloat<U>()) {\n        // @ts-ignore: In this case the <T> conversion is required\n        store<T>(targetDataStart + (<usize>i << alignof<T>()), <T>load<U>(sourceDataStart + (<usize>i << alignof<U>())));\n      } else {\n        store<T>(targetDataStart + (<usize>i << alignof<T>()), load<U>(sourceDataStart + (<usize>i << alignof<U>())));\n      }\n    }\n  }\n}\n","/// <reference path=\"./rt/index.d.ts\" />\n\nimport { HASH } from \"./util/hash\";\nimport { E_KEYNOTFOUND } from \"util/error\";\n\n// A deterministic hash map based on CloseTable from https://github.com/jorendorff/dht\n\n// @ts-ignore: decorator\n@inline\nconst INITIAL_CAPACITY = 4;\n\n// @ts-ignore: decorator\n@inline\nconst FILL_FACTOR_N = 8;\n\n// @ts-ignore: decorator\n@inline\nconst FILL_FACTOR_D = 3;\n\n// @ts-ignore: decorator\n@inline\nconst FREE_FACTOR_N = 3;\n\n// @ts-ignore: decorator\n@inline\nconst FREE_FACTOR_D = 4;\n\n/** Structure of a map entry. */\n@unmanaged class MapEntry<K,V> {\n  key: K;\n  value: V;\n  taggedNext: usize; // LSB=1 indicates EMPTY\n}\n\n/** Empty bit. */\n// @ts-ignore: decorator\n@inline\nconst EMPTY: usize = 1 << 0;\n\n/** Size of a bucket. */\n// @ts-ignore: decorator\n@inline\nconst BUCKET_SIZE = sizeof<usize>();\n\n/** Computes the alignment of an entry. */\n// @ts-ignore: decorator\n@inline\nfunction ENTRY_ALIGN<K,V>(): usize {\n  // can align to 4 instead of 8 if 32-bit and K/V is <= 32-bits\n  const maxkv = sizeof<K>() > sizeof<V>() ? sizeof<K>() : sizeof<V>();\n  const align = (maxkv > sizeof<usize>() ? maxkv : sizeof<usize>()) - 1;\n  return align;\n}\n\n/** Computes the aligned size of an entry. */\n// @ts-ignore: decorator\n@inline\nfunction ENTRY_SIZE<K,V>(): usize {\n  const align = ENTRY_ALIGN<K,V>();\n  const size = (offsetof<MapEntry<K,V>>() + align) & ~align;\n  return size;\n}\n\nexport class Map<K,V> {\n\n  // buckets holding references to the respective first entry within\n  private buckets: ArrayBuffer; // usize[bucketsMask + 1]\n  private bucketsMask: u32;\n\n  // entries in insertion order\n  private entries: ArrayBuffer; // MapEntry<K,V>[entriesCapacity]\n  private entriesCapacity: i32;\n  private entriesOffset: i32;\n  private entriesCount: i32;\n\n  get size(): i32 { return this.entriesCount; }\n\n  constructor() {\n    this.clear();\n  }\n\n  clear(): void {\n    const bucketsSize = INITIAL_CAPACITY * <i32>BUCKET_SIZE;\n    this.buckets = new ArrayBuffer(bucketsSize);\n    this.bucketsMask = INITIAL_CAPACITY - 1;\n    const entriesSize = INITIAL_CAPACITY * <i32>ENTRY_SIZE<K,V>();\n    this.entries = new ArrayBuffer(entriesSize);\n    this.entriesCapacity = INITIAL_CAPACITY;\n    this.entriesOffset = 0;\n    this.entriesCount = 0;\n  }\n\n  private find(key: K, hashCode: u32): MapEntry<K,V> | null {\n    var entry = load<MapEntry<K,V>>( // unmanaged!\n      changetype<usize>(this.buckets) + <usize>(hashCode & this.bucketsMask) * BUCKET_SIZE\n    );\n    while (entry) {\n      if (!(entry.taggedNext & EMPTY) && entry.key == key) return entry;\n      entry = changetype<MapEntry<K,V>>(entry.taggedNext & ~EMPTY);\n    }\n    return null;\n  }\n\n  has(key: K): bool {\n    return this.find(key, HASH<K>(key)) !== null;\n  }\n\n  @operator(\"[]\")\n  get(key: K): V {\n    var entry = this.find(key, HASH<K>(key));\n    if (!entry) throw new Error(E_KEYNOTFOUND); // cannot represent `undefined`\n    return entry.value;\n  }\n\n  @operator(\"[]=\")\n  set(key: K, value: V): this {\n    var hashCode = HASH<K>(key);\n    var entry = this.find(key, hashCode); // unmanaged!\n    if (entry) {\n      if (isManaged<V>()) {\n        let oldRef = changetype<usize>(entry.value);\n        if (changetype<usize>(value) != oldRef) {\n          entry.value = changetype<V>(__retain(changetype<usize>(value)));\n          __release(oldRef);\n        }\n      } else {\n        entry.value = value;\n      }\n    } else {\n      // check if rehashing is necessary\n      if (this.entriesOffset == this.entriesCapacity) {\n        this.rehash(\n          this.entriesCount < this.entriesCapacity * FREE_FACTOR_N / FREE_FACTOR_D\n            ?  this.bucketsMask           // just rehash if 1/4+ entries are empty\n            : (this.bucketsMask << 1) | 1 // grow capacity to next 2^N\n        );\n      }\n      // append new entry\n      let entries = this.entries;\n      entry = changetype<MapEntry<K,V>>(changetype<usize>(entries) + this.entriesOffset++ * ENTRY_SIZE<K,V>());\n      // link with the map\n      entry.key = isManaged<K>()\n        ? changetype<K>(__retain(changetype<usize>(key)))\n        : key;\n      entry.value = isManaged<V>()\n        ? changetype<V>(__retain(changetype<usize>(value)))\n        : value;\n      ++this.entriesCount;\n      // link with previous entry in bucket\n      let bucketPtrBase = changetype<usize>(this.buckets) + <usize>(hashCode & this.bucketsMask) * BUCKET_SIZE;\n      entry.taggedNext = load<usize>(bucketPtrBase);\n      store<usize>(bucketPtrBase, changetype<usize>(entry));\n    }\n    return this;\n  }\n\n  delete(key: K): bool {\n    var entry = this.find(key, HASH<K>(key));\n    if (!entry) return false;\n    if (isManaged<K>()) __release(changetype<usize>(entry.key));\n    if (isManaged<V>()) __release(changetype<usize>(entry.value));\n    entry.taggedNext |= EMPTY;\n    --this.entriesCount;\n    // check if rehashing is appropriate\n    var halfBucketsMask = this.bucketsMask >> 1;\n    if (\n      halfBucketsMask + 1 >= max<u32>(INITIAL_CAPACITY, this.entriesCount) &&\n      this.entriesCount < this.entriesCapacity * FREE_FACTOR_N / FREE_FACTOR_D\n    ) this.rehash(halfBucketsMask);\n    return true;\n  }\n\n  private rehash(newBucketsMask: u32): void {\n    var newBucketsCapacity = <i32>(newBucketsMask + 1);\n    var newBuckets = new ArrayBuffer(newBucketsCapacity * <i32>BUCKET_SIZE);\n    var newEntriesCapacity = newBucketsCapacity * FILL_FACTOR_N / FILL_FACTOR_D;\n    var newEntries = new ArrayBuffer(newEntriesCapacity * <i32>ENTRY_SIZE<K,V>());\n\n    // copy old entries to new entries\n    var oldPtr = changetype<usize>(this.entries);\n    var oldEnd = oldPtr + <usize>this.entriesOffset * ENTRY_SIZE<K,V>();\n    var newPtr = changetype<usize>(newEntries);\n    while (oldPtr != oldEnd) {\n      let oldEntry = changetype<MapEntry<K,V>>(oldPtr);\n      if (!(oldEntry.taggedNext & EMPTY)) {\n        let newEntry = changetype<MapEntry<K,V>>(newPtr);\n        newEntry.key = oldEntry.key;\n        newEntry.value = oldEntry.value;\n        let newBucketIndex = HASH<K>(oldEntry.key) & newBucketsMask;\n        let newBucketPtrBase = changetype<usize>(newBuckets) + <usize>newBucketIndex * BUCKET_SIZE;\n        newEntry.taggedNext = load<usize>(newBucketPtrBase);\n        store<usize>(newBucketPtrBase, newPtr);\n        newPtr += ENTRY_SIZE<K,V>();\n      }\n      oldPtr += ENTRY_SIZE<K,V>();\n    }\n\n    this.buckets = newBuckets;\n    this.bucketsMask = newBucketsMask;\n    this.entries = newEntries;\n    this.entriesCapacity = newEntriesCapacity;\n    this.entriesOffset = this.entriesCount;\n  }\n\n  keys(): K[] {\n    // FIXME: this is preliminary, needs iterators/closures\n    var start = changetype<usize>(this.entries);\n    var size = this.entriesOffset;\n    var keys = new Array<K>(size);\n    var length = 0;\n    for (let i = 0; i < size; ++i) {\n      let entry = changetype<MapEntry<K,V>>(start + <usize>i * ENTRY_SIZE<K,V>());\n      if (!(entry.taggedNext & EMPTY)) {\n        keys[length++] = entry.key;\n      }\n    }\n    keys.length = length;\n    return keys;\n  }\n\n  values(): V[] {\n    // FIXME: this is preliminary, needs iterators/closures\n    var start = changetype<usize>(this.entries);\n    var size = this.entriesOffset;\n    var values = new Array<V>(size);\n    var length = 0;\n    for (let i = 0; i < size; ++i) {\n      let entry = changetype<MapEntry<K,V>>(start + <usize>i * ENTRY_SIZE<K,V>());\n      if (!(entry.taggedNext & EMPTY)) {\n        values[length++] = entry.value;\n      }\n    }\n    values.length = length;\n    return values;\n  }\n\n  toString(): string {\n    return \"[object Map]\";\n  }\n\n  // RT integration\n\n  @unsafe private __visit_impl(cookie: u32): void {\n    __visit(changetype<usize>(this.buckets), cookie);\n    var entries = changetype<usize>(this.entries);\n    if (isManaged<K>() || isManaged<V>()) {\n      let cur = entries;\n      let end = cur + <usize>this.entriesOffset * ENTRY_SIZE<K,V>();\n      while (cur < end) {\n        let entry = changetype<MapEntry<K,V>>(cur);\n        if (!(entry.taggedNext & EMPTY)) {\n          if (isManaged<K>()) {\n            let val = changetype<usize>(entry.key);\n            if (isNullable<K>()) {\n              if (val) __visit(val, cookie);\n            } else __visit(val, cookie);\n          }\n          if (isManaged<V>()) {\n            let val = changetype<usize>(entry.value);\n            if (isNullable<V>()) {\n              if (val) __visit(val, cookie);\n            } else __visit(val, cookie);\n          }\n        }\n        cur += ENTRY_SIZE<K,V>();\n      }\n    }\n    __visit(entries, cookie);\n  }\n}\n","// @ts-ignore: decorator\n@inline\nexport function HASH<T>(key: T): u32 {\n  if (isString<T>()) {\n    return hashStr(changetype<string>(key));\n  } else if (isReference<T>()) {\n    if (sizeof<T>() == 4) return hash32(changetype<u32>(key));\n    if (sizeof<T>() == 8) return hash64(changetype<u64>(key));\n  } else if (isFloat<T>()) {\n    if (sizeof<T>() == 4) return hash32(reinterpret<u32>(f32(key)));\n    if (sizeof<T>() == 8) return hash64(reinterpret<u64>(f64(key)));\n  } else {\n    if (sizeof<T>() == 1) return hash8 (u32(key));\n    if (sizeof<T>() == 2) return hash16(u32(key));\n    if (sizeof<T>() == 4) return hash32(u32(key));\n    if (sizeof<T>() == 8) return hash64(u64(key));\n  }\n  return unreachable();\n}\n\n// FNV-1a 32-bit as a starting point, see: http://isthe.com/chongo/tech/comp/fnv/\n\n// @ts-ignore: decorator\n@inline\nconst FNV_OFFSET: u32 = 2166136261;\n\n// @ts-ignore: decorator\n@inline\nconst FNV_PRIME: u32 = 16777619;\n\nfunction hash8(key: u32): u32 {\n  return (FNV_OFFSET ^ key) * FNV_PRIME;\n}\n\nfunction hash16(key: u32): u32 {\n  var v = FNV_OFFSET;\n  v = (v ^ ( key        & 0xff)) * FNV_PRIME;\n  v = (v ^ ( key >>  8        )) * FNV_PRIME;\n  return v;\n}\n\nfunction hash32(key: u32): u32 {\n  var v = FNV_OFFSET;\n  v = (v ^ ( key        & 0xff)) * FNV_PRIME;\n  v = (v ^ ((key >>  8) & 0xff)) * FNV_PRIME;\n  v = (v ^ ((key >> 16) & 0xff)) * FNV_PRIME;\n  v = (v ^ ( key >> 24        )) * FNV_PRIME;\n  return v;\n}\n\nfunction hash64(key: u64): u32 {\n  var l = <u32> key;\n  var h = <u32>(key >>> 32);\n  var v = FNV_OFFSET;\n  v = (v ^ ( l        & 0xff)) * FNV_PRIME;\n  v = (v ^ ((l >>  8) & 0xff)) * FNV_PRIME;\n  v = (v ^ ((l >> 16) & 0xff)) * FNV_PRIME;\n  v = (v ^ ( l >> 24        )) * FNV_PRIME;\n  v = (v ^ ( h        & 0xff)) * FNV_PRIME;\n  v = (v ^ ((h >>  8) & 0xff)) * FNV_PRIME;\n  v = (v ^ ((h >> 16) & 0xff)) * FNV_PRIME;\n  v = (v ^ ( h >> 24        )) * FNV_PRIME;\n  return v;\n}\n\nfunction hashStr(key: string): u32 {\n  var v = FNV_OFFSET;\n  if (key !== null) {\n    for (let i: usize = 0, k: usize = key.length << 1; i < k; ++i) {\n      v = (v ^ <u32>load<u8>(changetype<usize>(key) + i)) * FNV_PRIME;\n    }\n  }\n  return v;\n}\n","import { CanvasRenderingContext2D } from \"../renderer/CanvasRenderingContext2D\";\r\n\r\nlet map = new Map<string, CanvasRenderingContext2D>();\r\n\r\n/**\r\n * This internal function is exported via the `./assembly/glue.ts` file. It receives an id from the\r\n * host, and a name. It's responsible for creating a new CanvasRenderingContext2D object, then\r\n * stores it on the map object by it's name. This allows developers to call `getContextById(name)`\r\n * to obtain the created reference to the canvas context.\r\n *\r\n * @param {string} name - The name of the CanvasRenderingContext2D object\r\n * @param {i32} id - The unique objectid created by the browser that identifies the context.\r\n */\r\nexport function __use_context(name: string, id: i32): void {\r\n  var result = new CanvasRenderingContext2D();\r\n  store<i32>(changetype<usize>(result) + offsetof<CanvasRenderingContext2D>(\"id\"), id);\r\n  map.set(name, result);\r\n}\r\n\r\n/**\r\n * This function is the only way to obtain a named canvas provided by the JavaScript host.\r\n *\r\n * @param {string} name - This is the name of the provided context.\r\n */\r\nexport function getContextById(name: string): CanvasRenderingContext2D {\r\n  if (!map.has(name)) throw new Error(\"Cannot find context with name: \" + name);\r\n  return map.get(name);\r\n}\r\n","@unmanaged\r\nclass Writer {\r\n  inst: f64;\r\n  next: f64;\r\n  a: f64;\r\n  b: f64;\r\n  c: f64;\r\n  d: f64;\r\n  e: f64;\r\n  f: f64;\r\n  g: f64;\r\n  h: f64;\r\n  i: f64;\r\n}\r\n\r\n\r\n/**\r\n * The Buffer class is an ArrayBuffer backed data writer that utilizes the internal STORE function\r\n * provided by AssemblyScript to write data as fast as possible to memory. The generic type\r\n * parameter represents an enum indicating the instruction type values coupled with the memory\r\n * writes. Each instruction write results in the following values written to the buffer:\r\n *\r\n * 1. [instruction] `T` - This value is the instruction type cast to a `f64`\r\n * 2. [nextIndex] `i32` - This value is the pointer to the next instruction index\r\n * 3. [...args] `f64[]` - These values are the argument values for the instruction\r\n */\r\nexport class Buffer<T extends i32> {\r\n  /**\r\n   * The buffer property is a reference to an allocated block of memory that contains all the\r\n   * currently written values to the buffer. The browser eventually should obtain a pointer to this\r\n   * block and read the values from it to perform actions.\r\n   */\r\n  protected _buffer: ArrayBuffer = new ArrayBuffer(0x10000 * sizeof<f64>());\r\n\r\n  /**\r\n   * The set of retained pointers that need to be cleaned up after a commit().\r\n   */\r\n  protected _retained: ArrayBuffer = new ArrayBuffer(0x10000 << alignof<usize>());\r\n\r\n  /**\r\n   * The offset into the _retained pointer list.\r\n   */\r\n  protected _retainedOffset: i32 = 0;\r\n\r\n  /**\r\n   * The offset property is a pointer to the next index that will receive a written value.\r\n   */\r\n  private _offset: i32 = 0;\r\n\r\n  /**\r\n   * Write a single instruction to the buffer without any parameters. This results in two values\r\n   * written to the buffer.\r\n   *\r\n   * @param {T} inst - The instruction type to be written to the buffer.\r\n   */\r\n  @inline\r\n  protected _writeZero(inst: T): void {\r\n    var buffer = changetype<usize>(this._buffer);\r\n    var index = this._offset;\r\n    var writer = changetype<Writer>(buffer + <usize>index << alignof<f64>());\r\n    writer.inst = <f64>inst;\r\n    writer.next = <f64>(this._offset = index + 2);\r\n  }\r\n\r\n  /**\r\n   * Write a single instruction to the buffer with a single parameter. This results in three values\r\n   * written to the buffer.\r\n   *\r\n   * @param {T} inst - The instruction type to be written to the buffer.\r\n   * @param {f64} a - The first parameter for the instruction to be written to the buffer.\r\n   */\r\n  @inline\r\n  protected _writeOne(inst: T, a: f64): void {\r\n    var buffer = changetype<usize>(this._buffer);\r\n    var index = this._offset;\r\n    var writer = changetype<Writer>(buffer + <usize>index << alignof<f64>());\r\n    writer.inst = <f64>inst;\r\n    writer.next = <f64>(this._offset = index + 3);\r\n    writer.a = a;\r\n  }\r\n\r\n  /**\r\n   * Write a single instruction to the buffer with two parameters. This results in four values\r\n   * written to the buffer.\r\n   *\r\n   * @param {T} inst - The instruction type to be written to the buffer.\r\n   * @param {f64} a - The first parameter for the instruction to be written to the buffer.\r\n   * @param {f64} b - The second parameter for the instruction to be written to the buffer.\r\n   */\r\n  @inline\r\n  protected _writeTwo(inst: T, a: f64, b: f64): void {\r\n    var buffer = changetype<usize>(this._buffer);\r\n    var index = this._offset;\r\n    var writer = changetype<Writer>(buffer + <usize>index << alignof<f64>());\r\n    writer.inst = <f64>inst;\r\n    writer.next = <f64>(this._offset = index + 4);\r\n    writer.a = a;\r\n    writer.b = b;\r\n  }\r\n\r\n  /**\r\n   * Write a single instruction to the buffer with three parameters. This results in five values\r\n   * written to the buffer.\r\n   *\r\n   * @param {T} inst - The instruction type to be written to the buffer.\r\n   * @param {f64} a - The first parameter for the instruction to be written to the buffer.\r\n   * @param {f64} b - The second parameter for the instruction to be written to the buffer.\r\n   * @param {f64} c - The third parameter for the instruction to be written to the buffer.\r\n   */\r\n  @inline\r\n  protected _writeThree(inst: T, a: f64, b: f64, c: f64): void {\r\n    var buffer = changetype<usize>(this._buffer);\r\n    var index = this._offset;\r\n    var writer = changetype<Writer>(buffer + <usize>index << alignof<f64>());\r\n    writer.inst = <f64>inst;\r\n    writer.next = <f64>(this._offset = index + 5);\r\n    writer.a = a;\r\n    writer.b = b;\r\n    writer.c = c;\r\n  }\r\n\r\n  /**\r\n   * Write a single instruction to the buffer with four parameters. This results in six values\r\n   * written to the buffer.\r\n   *\r\n   * @param {T} inst - The instruction type to be written to the buffer.\r\n   * @param {f64} a - The first parameter for the instruction to be written to the buffer.\r\n   * @param {f64} b - The second parameter for the instruction to be written to the buffer.\r\n   * @param {f64} c - The third parameter for the instruction to be written to the buffer.\r\n   * @param {f64} d - The fourth parameter for the instruction to be written to the buffer.\r\n   */\r\n  @inline\r\n  protected _writeFour(inst: T, a: f64, b: f64, c: f64, d: f64): void {\r\n    var buffer = changetype<usize>(this._buffer);\r\n    var index = this._offset;\r\n    var writer = changetype<Writer>(buffer + <usize>index << alignof<f64>());\r\n    writer.inst = <f64>inst;\r\n    writer.next = <f64>(this._offset = index + 6);\r\n    writer.a = a;\r\n    writer.b = b;\r\n    writer.c = c;\r\n    writer.d = d;\r\n  }\r\n\r\n  /**\r\n   * Write a single instruction to the buffer with five parameters. This results in seven values\r\n   * written to the buffer.\r\n   *\r\n   * @param {T} inst - The instruction type to be written to the buffer.\r\n   * @param {f64} a - The first parameter for the instruction to be written to the buffer.\r\n   * @param {f64} b - The second parameter for the instruction to be written to the buffer.\r\n   * @param {f64} c - The third parameter for the instruction to be written to the buffer.\r\n   * @param {f64} d - The fourth parameter for the instruction to be written to the buffer.\r\n   * @param {f64} e - The fifth parameter for the instruction to be written to the buffer.\r\n   */\r\n  @inline\r\n  protected _writeFive(inst: T, a: f64, b: f64, c: f64, d: f64, e: f64): void {\r\n    var buffer = changetype<usize>(this._buffer);\r\n    var index = this._offset;\r\n    var writer = changetype<Writer>(buffer + <usize>index << alignof<f64>());\r\n    writer.inst = <f64>inst;\r\n    writer.next = <f64>(this._offset = index + 7);\r\n    writer.a = a;\r\n    writer.b = b;\r\n    writer.c = c;\r\n    writer.d = d;\r\n    writer.e = e;\r\n  }\r\n\r\n  /**\r\n   * Write a single instruction to the buffer with six parameters. This results in eight values\r\n   * written to the buffer.\r\n   *\r\n   * @param {T} inst - The instruction type to be written to the buffer.\r\n   * @param {f64} a - The first parameter for the instruction to be written to the buffer.\r\n   * @param {f64} b - The second parameter for the instruction to be written to the buffer.\r\n   * @param {f64} c - The third parameter for the instruction to be written to the buffer.\r\n   * @param {f64} d - The fourth parameter for the instruction to be written to the buffer.\r\n   * @param {f64} e - The fifth parameter for the instruction to be written to the buffer.\r\n   * @param {f64} f - The sixth parameter for the instruction to be written to the buffer.\r\n   */\r\n  @inline\r\n  protected _writeSix(inst: T, a: f64, b: f64, c: f64, d: f64, e: f64, f: f64): void {\r\n    var buffer = changetype<usize>(this._buffer);\r\n    var index = this._offset;\r\n    var writer = changetype<Writer>(buffer + <usize>index << alignof<f64>());\r\n    writer.inst = <f64>inst;\r\n    writer.next = <f64>(this._offset = index + 8);\r\n    writer.a = a;\r\n    writer.b = b;\r\n    writer.c = c;\r\n    writer.d = d;\r\n    writer.e = e;\r\n    writer.f = f;\r\n  }\r\n\r\n  /**\r\n   * Write a single instruction to the buffer with eight parameters. This results in ten values\r\n   * written to the buffer.\r\n   *\r\n   * @param {T} inst - The instruction type to be written to the buffer.\r\n   * @param {f64} a - The first parameter for the instruction to be written to the buffer.\r\n   * @param {f64} b - The second parameter for the instruction to be written to the buffer.\r\n   * @param {f64} c - The third parameter for the instruction to be written to the buffer.\r\n   * @param {f64} d - The fourth parameter for the instruction to be written to the buffer.\r\n   * @param {f64} e - The fifth parameter for the instruction to be written to the buffer.\r\n   * @param {f64} f - The sixth parameter for the instruction to be written to the buffer.\r\n   * @param {f64} g - The seventh parameter for the instruction to be written to the buffer.\r\n   * @param {f64} h - The eighth parameter for the instruction to be written to the buffer.\r\n   */\r\n  @inline\r\n  protected _writeEight(inst: T, a: f64, b: f64, c: f64, d: f64, e: f64, f: f64, g: f64, h: f64): void {\r\n    var buffer = changetype<usize>(this._buffer);\r\n    var index = this._offset;\r\n    var writer = changetype<Writer>(buffer + <usize>index << alignof<f64>());\r\n    writer.inst = <f64>inst;\r\n    writer.next = <f64>(this._offset = index + 10);\r\n    writer.a = a;\r\n    writer.b = b;\r\n    writer.c = c;\r\n    writer.d = d;\r\n    writer.e = e;\r\n    writer.f = f;\r\n    writer.g = g;\r\n    writer.h = h;\r\n  }\r\n\r\n  /**\r\n   * Write a single instruction to the buffer with nine parameters. This results in eleven values\r\n   * written to the buffer.\r\n   *\r\n   * @param {T} inst - The instruction type to be written to the buffer.\r\n   * @param {f64} a - The first parameter for the instruction to be written to the buffer.\r\n   * @param {f64} b - The second parameter for the instruction to be written to the buffer.\r\n   * @param {f64} c - The third parameter for the instruction to be written to the buffer.\r\n   * @param {f64} d - The fourth parameter for the instruction to be written to the buffer.\r\n   * @param {f64} e - The fifth parameter for the instruction to be written to the buffer.\r\n   * @param {f64} f - The sixth parameter for the instruction to be written to the buffer.\r\n   * @param {f64} g - The seventh parameter for the instruction to be written to the buffer.\r\n   * @param {f64} h - The eighth parameter for the instruction to be written to the buffer.\r\n   * @param {f64} i - The ninth parameter for the instruction to be written to the buffer.\r\n   */\r\n  @inline\r\n  protected _writeNine(inst: T, a: f64, b: f64, c: f64, d: f64, e: f64, f: f64, g: f64, h: f64, i: f64): void {\r\n    var buffer = changetype<usize>(this._buffer);\r\n    var index = this._offset;\r\n    var writer = changetype<Writer>(buffer + <usize>index << alignof<f64>());\r\n    writer.inst = <f64>inst;\r\n    writer.next = <f64>(this._offset = index + 11);\r\n    writer.a = a;\r\n    writer.b = b;\r\n    writer.c = c;\r\n    writer.d = d;\r\n    writer.e = e;\r\n    writer.f = f;\r\n    writer.g = g;\r\n    writer.h = h;\r\n    writer.i = i;\r\n  }\r\n\r\n  /**\r\n   * Reset the buffer back to position 0.\r\n   */\r\n  @inline\r\n  protected _resetBuffer(): void {\r\n    this._offset = 0;\r\n    let length = this._retainedOffset;\r\n    let pointer = changetype<usize>(this._retained);\r\n    for (let i = 0; i < length; i++) {\r\n      __release(load<usize>(pointer + (<usize>i << alignof<usize>())));\r\n    }\r\n    // all the pointers are released\r\n    this._retainedOffset = 0;\r\n  }\r\n\r\n  /**\r\n   * Retain a pointer in the buffer for later use.\r\n   *\r\n   * @param {usize} pointer - The pointer to be retained and released after the buffer is reset.\r\n   */\r\n  protected _retain(pointer: usize): void {\r\n    __retain(pointer);\r\n    var retained = changetype<usize>(this._retained);\r\n    var index = this._retainedOffset;\r\n    store<usize>(retained + (index << alignof<usize>()), pointer);\r\n    this._retainedOffset = index + 1;\r\n  }\r\n}\r\n","\r\n@unmanaged\r\nexport class StackPointer<T> {\r\n  static create<T>(count: i32): StackPointer<T> {\r\n    assert(!isManaged<T>());\r\n    assert(isReference<T>());\r\n    assert(count > 0);\r\n    let length = offsetof<T>() * count;\r\n    let ptr = __alloc(length, idof<ArrayBuffer>());\r\n    memory.fill(ptr, 0, length);\r\n    return changetype<StackPointer<T>>(ptr);\r\n  }\r\n\r\n  @inline\r\n  push(): StackPointer<T> {\r\n    let current = changetype<usize>(this);\r\n    let next = current + offsetof<T>();\r\n    memory.copy(next, current, offsetof<T>());\r\n    return changetype<StackPointer<T>>(next);\r\n  }\r\n\r\n  @inline @operator.prefix(\"++\")\r\n  increment(): StackPointer<T> {\r\n    return changetype<StackPointer<T>>(changetype<usize>(this) + offsetof<T>());\r\n  }\r\n\r\n  @inline @operator.prefix(\"--\")\r\n  decrement(): StackPointer<T> {\r\n    return changetype<StackPointer<T>>(changetype<usize>(this) - offsetof<T>());\r\n  }\r\n\r\n  @inline\r\n  pop(): StackPointer<T> {\r\n    return changetype<StackPointer<T>>(changetype<usize>(this) - offsetof<T>());\r\n  }\r\n\r\n  reference(): T {\r\n    return changetype<T>(this);\r\n  }\r\n\r\n  dereference(): usize {\r\n    return changetype<usize>(this);\r\n  }\r\n}\r\n","@inline\r\nexport function arraysEqual(left: Float64Array, right: Float64Array): bool {\r\n  var len: i32 = left.length;\r\n  var valid = true;\r\n  if (len == right.length) {\r\n    for (var i = 0; i < len; i++) {\r\n      if (unchecked(left[i]) != unchecked(right[i])) {\r\n        valid = false;\r\n        break;\r\n      }\r\n    }\r\n  } else {\r\n    valid = false;\r\n  }\r\n  return valid;\r\n}\r\n\r\n@inline\r\nexport function checkDoubleArray(value: Float64Array): Float64Array {\r\n  var len: i32 = value.length;\r\n  var double: bool = <bool>(len & 1);\r\n  var result: Float64Array = new Float64Array(double ? len * 2 : len);\r\n  var doublelen: i32;\r\n  var i: i32 = 0;\r\n  for (;i < len; ++i) {\r\n    unchecked(result[i] = value[i]);\r\n  }\r\n  if (double) {\r\n    doublelen = len << 1;\r\n    for(;i < doublelen; i++) {\r\n      unchecked(result[i] = value[i - len]);\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n// @ts-ignore: decorators *are* valid here\r\n@inline\r\nexport function STORE<T>(pointer: usize, index: i32, value: T): void {\r\n  store<T>(pointer + (index << alignof<T>()), value);\r\n}\r\n\r\n// @ts-ignore: decorators *are* valid here\r\n@inline\r\nexport function LOAD<T>(pointer: usize, index: i32): T {\r\n  return load<T>(pointer + (index << alignof<T>()));\r\n}\r\n","/// <reference path=\"./rt/index.d.ts\" />\n\nimport { BLOCK, BLOCK_OVERHEAD, BLOCK_MAXSIZE } from \"./rt/common\";\nimport { compareImpl, strtol, strtod, isSpace, isAscii, toLower8, toUpper8 } from \"./util/string\";\nimport { specialsUpper, casemap, bsearch } from \"./util/casemap\";\nimport { E_INVALIDLENGTH } from \"./util/error\";\nimport { ArrayBufferView } from \"./arraybuffer\";\nimport { idof } from \"./builtins\";\n\n@sealed export abstract class String {\n\n  @lazy static readonly MAX_LENGTH: i32 = BLOCK_MAXSIZE >>> alignof<u16>();\n\n  static fromCharCode(unit: i32, surr: i32 = -1): String {\n    var hasSur = surr > 0;\n    var out = __alloc(2 << i32(hasSur), idof<String>());\n    store<u16>(out, <u16>unit);\n    if (hasSur) store<u16>(out, <u16>surr, 2);\n    return changetype<String>(out); // retains\n  }\n\n  static fromCodePoint(code: i32): String {\n    assert(<u32>code <= 0x10FFFF);\n    var hasSur = code > 0xFFFF;\n    var out = __alloc(2 << i32(hasSur), idof<String>());\n    if (!hasSur) {\n      store<u16>(out, <u16>code);\n    } else {\n      code -= 0x10000;\n      let hi = (code & 0x03FF) | 0xDC00;\n      let lo = (code >>> 10) | 0xD800;\n      store<u32>(out, lo | (hi << 16));\n    }\n    return changetype<String>(out); // retains\n  }\n\n  get length(): i32 {\n    return changetype<BLOCK>(changetype<usize>(this) - BLOCK_OVERHEAD).rtSize >> 1;\n  }\n\n  @operator(\"[]\") charAt(pos: i32): String {\n    if (<u32>pos >= <u32>this.length) return changetype<String>(\"\");\n    var out = __alloc(2, idof<String>());\n    store<u16>(out, load<u16>(changetype<usize>(this) + (<usize>pos << 1)));\n    return changetype<String>(out); // retains\n  }\n\n  charCodeAt(pos: i32): i32 {\n    if (<u32>pos >= <u32>this.length) return -1; // (NaN)\n    return load<u16>(changetype<usize>(this) + (<usize>pos << 1));\n  }\n\n  codePointAt(pos: i32): i32 {\n    var len = this.length;\n    if (<u32>pos >= <u32>len) return -1; // (undefined)\n    var first = <i32>load<u16>(changetype<usize>(this) + (<usize>pos << 1));\n    if ((first & 0xFC00) != 0xD800 || pos + 1 == len) return first;\n    var second = <i32>load<u16>(changetype<usize>(this) + ((<usize>pos + 1) << 1));\n    if ((second & 0xFC00) != 0xDC00) return first;\n    return (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;\n  }\n\n  @operator(\"+\") private static __concat(left: String, right: String): String {\n    return select<String>(left, changetype<String>(\"null\"), left !== null).concat(right);\n  }\n\n  concat(other: String): String {\n    if (other === null) other = changetype<String>(\"null\");\n    var thisSize: isize = this.length << 1;\n    var otherSize: isize = other.length << 1;\n    var outSize: usize = thisSize + otherSize;\n    if (outSize == 0) return changetype<String>(\"\");\n    var out = changetype<String>(__alloc(outSize, idof<String>())); // retains\n    memory.copy(changetype<usize>(out), changetype<usize>(this), thisSize);\n    memory.copy(changetype<usize>(out) + thisSize, changetype<usize>(other), otherSize);\n    return out;\n  }\n\n  endsWith(search: String, end: i32 = String.MAX_LENGTH): bool {\n    if (search === null) return false;\n    end = min(max(end, 0), this.length);\n    var searchLength = <isize>search.length;\n    var searchStart = <isize>end - searchLength;\n    if (searchStart < 0) return false;\n    // @ts-ignore: string <-> String\n    return !compareImpl(this, searchStart, search, 0, searchLength);\n  }\n\n  @operator(\"==\") private static __eq(left: String | null, right: String | null): bool {\n    if (left === right) return true;\n    if (left === null || right === null) return false;\n    var leftLength = left.length;\n    if (leftLength != right.length) return false;\n    // @ts-ignore: string <-> String\n    return !compareImpl(left, 0, right, 0, leftLength);\n  }\n\n  @operator.prefix(\"!\")\n  private static __not(str: String | null): bool {\n    return str === null || !str.length;\n  }\n\n  @operator(\"!=\")\n  private static __ne(left: String | null, right: String | null): bool {\n    return !this.__eq(left, right);\n  }\n\n  @operator(\">\") private static __gt(left: String | null, right: String | null): bool {\n    if (left === right || left === null || right === null) return false;\n    var leftLength  = left.length;\n    if (!leftLength) return false;\n    var rightLength = right.length;\n    if (!rightLength) return true;\n    // @ts-ignore: string <-> String\n    return compareImpl(left, 0, right, 0, min(leftLength, rightLength)) > 0;\n  }\n\n  @operator(\">=\") private static __gte(left: String, right: String): bool {\n    return !this.__lt(left, right);\n  }\n\n  @operator(\"<\") private static __lt(left: String, right: String): bool {\n    if (left === right || left === null || right === null) return false;\n    var rightLength = right.length;\n    if (!rightLength) return false;\n    var leftLength  = left.length;\n    if (!leftLength) return true;\n    // @ts-ignore: string <-> String\n    return compareImpl(left, 0, right, 0, min(leftLength, rightLength)) < 0;\n  }\n\n  @operator(\"<=\") private static __lte(left: String, right: String): bool {\n    return !this.__gt(left, right);\n  }\n\n  includes(search: String, start: i32 = 0): bool {\n    return this.indexOf(search, start) != -1;\n  }\n\n  indexOf(search: String, start: i32 = 0): i32 {\n    var searchLen = <isize>search.length;\n    if (!searchLen) return 0;\n    var len = <isize>this.length;\n    if (!len) return -1;\n    var searchStart = min(max(<isize>start, 0), len);\n    for (len -= searchLen; searchStart <= len; ++searchStart) {\n      // @ts-ignore: string <-> String\n      if (!compareImpl(this, searchStart, search, 0, searchLen)) return <i32>searchStart;\n    }\n    return -1;\n  }\n\n  lastIndexOf(search: String, start: i32 = i32.MAX_VALUE): i32 {\n    var searchLen = <isize>search.length;\n    if (!searchLen) return this.length;\n    var len = this.length;\n    if (!len) return -1;\n    var searchStart = min(max(<isize>start, 0), <isize>len - searchLen);\n    for (; searchStart >= 0; --searchStart) {\n      // @ts-ignore: string <-> String\n      if (!compareImpl(this, searchStart, search, 0, searchLen)) return <i32>searchStart;\n    }\n    return -1;\n  }\n\n  // TODO: implement full locale comparison with locales and Collator options\n  localeCompare(other: String): i32 {\n    if (other === this) return 0; // compare pointers\n    var len: isize = this.length;\n    var otherLen: isize = other.length;\n    if (otherLen != len) return select(1, -1, len > otherLen);\n    if (!otherLen) return 0; // \"\" == \"\"\n    // @ts-ignore: string <-> String\n    return compareImpl(this, 0, other, 0, otherLen);\n  }\n\n  startsWith(search: String, start: i32 = 0): bool {\n    if (search === null) search = changetype<String>(\"null\");\n    var len = <isize>this.length;\n    var searchStart = min(max(<isize>start, 0), len);\n    var searchLength = <isize>search.length;\n    if (searchLength + searchStart > len) return false;\n    // @ts-ignore: string <-> String\n    return !compareImpl(this, searchStart, search, 0, searchLength);\n  }\n\n  substr(start: i32, length: i32 = i32.MAX_VALUE): String { // legacy\n    var intStart: isize = start;\n    var end: isize = length;\n    var len: isize = this.length;\n    if (intStart < 0) intStart = max(len + intStart, 0);\n    var size = min(max(end, 0), len - intStart) << 1;\n    if (size <= 0) return changetype<String>(\"\");\n    var out = __alloc(size, idof<String>());\n    memory.copy(out, changetype<usize>(this) + (intStart << 1), size);\n    return changetype<String>(out); // retains\n  }\n\n  substring(start: i32, end: i32 = i32.MAX_VALUE): String {\n    var len: isize = this.length;\n    var finalStart = min<isize>(max(start, 0), len);\n    var finalEnd = min<isize>(max(end, 0), len);\n    var fromPos = min<isize>(finalStart, finalEnd) << 1;\n    var toPos = max<isize>(finalStart, finalEnd) << 1;\n    var size = toPos - fromPos;\n    if (!size) return changetype<String>(\"\");\n    if (!fromPos && toPos == len << 1) return this;\n    var out = __alloc(size, idof<String>());\n    memory.copy(out, changetype<usize>(this) + fromPos, size);\n    return changetype<String>(out); // retains\n  }\n\n  trim(): String {\n    var len = this.length;\n    var size: usize = len << 1;\n    while (size && isSpace(load<u16>(changetype<usize>(this) + size - 2))) {\n      size -= 2;\n    }\n    var offset: usize = 0;\n    while (offset < size && isSpace(load<u16>(changetype<usize>(this) + offset))) {\n      offset += 2; size -= 2;\n    }\n    if (!size) return changetype<String>(\"\");\n    if (!offset && size == len << 1) return this;\n    var out = __alloc(size, idof<String>());\n    memory.copy(out, changetype<usize>(this) + offset, size);\n    return changetype<String>(out); // retains\n  }\n\n  @inline\n  trimLeft(): String {\n    return this.trimStart();\n  }\n\n  @inline\n  trimRight(): String {\n    return this.trimEnd();\n  }\n\n  trimStart(): String {\n    var size = <usize>this.length << 1;\n    var offset: usize = 0;\n    while (offset < size && isSpace(load<u16>(changetype<usize>(this) + offset))) {\n      offset += 2;\n    }\n    if (!offset) return this;\n    size -= offset;\n    if (!size) return changetype<String>(\"\");\n    var out = __alloc(size, idof<String>());\n    memory.copy(out, changetype<usize>(this) + offset, size);\n    return changetype<String>(out); // retains\n  }\n\n  trimEnd(): String {\n    var originalSize = <usize>this.length << 1;\n    var size = originalSize;\n    while (size && isSpace(load<u16>(changetype<usize>(this) + size - 2))) {\n      size -= 2;\n    }\n    if (!size) return changetype<String>(\"\");\n    if (size == originalSize) return this;\n    var out = __alloc(size, idof<String>());\n    memory.copy(out, changetype<usize>(this), size);\n    return changetype<String>(out); // retains\n  }\n\n  padStart(length: i32, pad: string = \" \"): String {\n    var thisSize = <usize>this.length << 1;\n    var targetSize = <usize>length << 1;\n    var padSize = <usize>pad.length << 1;\n    if (targetSize < thisSize || !padSize) return this;\n    var prependSize = targetSize - thisSize;\n    var out = __alloc(targetSize, idof<String>());\n    if (prependSize > padSize) {\n      let repeatCount = (prependSize - 2) / padSize;\n      let restBase = repeatCount * padSize;\n      let restSize = prependSize - restBase;\n      memory.repeat(out, changetype<usize>(pad), padSize, repeatCount);\n      memory.copy(out + restBase, changetype<usize>(pad), restSize);\n    } else {\n      memory.copy(out, changetype<usize>(pad), prependSize);\n    }\n    memory.copy(out + prependSize, changetype<usize>(this), thisSize);\n    return changetype<String>(out); //  retains\n  }\n\n  padEnd(length: i32, pad: string = \" \"): String {\n    var thisSize = <usize>this.length << 1;\n    var targetSize = <usize>length << 1;\n    var padSize = <usize>pad.length << 1;\n    if (targetSize < thisSize || !padSize) return this;\n    var appendSize = targetSize - thisSize;\n    var out = __alloc(targetSize, idof<String>());\n    memory.copy(out, changetype<usize>(this), thisSize);\n    if (appendSize > padSize) {\n      let repeatCount = (appendSize - 2) / padSize;\n      let restBase = repeatCount * padSize;\n      let restSize = appendSize - restBase;\n      memory.repeat(out + thisSize, changetype<usize>(pad), padSize, repeatCount);\n      memory.copy(out + thisSize + restBase, changetype<usize>(pad), restSize);\n    } else {\n      memory.copy(out + thisSize, changetype<usize>(pad), appendSize);\n    }\n    return changetype<String>(out); // retains\n  }\n\n  repeat(count: i32 = 0): String {\n    var length = this.length;\n\n    // Most browsers can't handle strings 1 << 28 chars or longer\n    if (count < 0 || <u64>length * count > (1 << 28)) {\n      throw new RangeError(E_INVALIDLENGTH);\n    }\n\n    if (count == 0 || !length) return changetype<String>(\"\");\n    if (count == 1) return this;\n    var out = __alloc((length * count) << 1, idof<String>());\n    memory.repeat(out, changetype<usize>(this), <usize>length << 1, count);\n    return changetype<String>(out); // retains\n  }\n\n  replace(search: String, replacement: String): String {\n    var len: usize = this.length;\n    var slen: usize = search.length;\n    if (len <= slen) {\n      return len < slen ? this : select<String>(replacement, this, search == this);\n    }\n    var index: isize = this.indexOf(search);\n    if (~index) {\n      let rlen: usize = replacement.length;\n      len -= slen;\n      let olen = len + rlen;\n      if (olen) {\n        let out = __alloc(olen << 1, idof<String>());\n        memory.copy(out, changetype<usize>(this), index << 1);\n        memory.copy(\n          out + (index << 1),\n          changetype<usize>(replacement),\n          rlen << 1\n        );\n        memory.copy(\n          out + ((index + rlen) << 1),\n          changetype<usize>(this) + ((index + slen) << 1),\n          (len - index) << 1\n        );\n        return changetype<String>(out);\n      }\n    }\n    return this;\n  }\n\n  replaceAll(search: String, replacement: String): String {\n    var len: usize = this.length;\n    var slen: usize = search.length;\n    if (len <= slen) {\n      return len < slen ? this : select<String>(replacement, this, search == this);\n    }\n    var rlen: usize = replacement.length;\n    if (!slen) {\n      if (!rlen) return this;\n      // Special case: 'abc'.replaceAll('', '-') -> '-a-b-c-'\n      let out = __alloc((len + (len + 1) * rlen) << 1, idof<String>());\n      memory.copy(out, changetype<usize>(replacement), rlen << 1);\n      let offset = rlen;\n      for (let i: usize = 0; i < len; ++i) {\n        store<u16>(\n          changetype<usize>(out) + (offset++ << 1),\n          load<u16>(changetype<usize>(this) + (i << 1))\n        );\n        memory.copy(\n          out + (offset << 1),\n          changetype<usize>(replacement),\n          rlen << 1\n        );\n        offset += rlen;\n      }\n      return changetype<String>(out);\n    }\n    var prev: isize = 0, next: isize = 0;\n    if (slen == rlen) {\n      // Fast path when search and replacement have same length\n      let size = len << 1;\n      let out = __alloc(size, idof<String>());\n      memory.copy(out, changetype<usize>(this), size);\n      while (~(next = <isize>this.indexOf(search, <i32>prev))) {\n        memory.copy(out + (next << 1), changetype<usize>(replacement), rlen << 1);\n        prev = next + slen;\n      }\n      return changetype<String>(out);\n    }\n    var out: usize = 0, offset: usize = 0, resLen = len;\n    while (~(next = <isize>this.indexOf(search, <i32>prev))) {\n      if (!out) out = __alloc(len << 1, idof<String>());\n      if (offset > resLen) {\n        let newLength = resLen << 1;\n        out = __realloc(out, newLength << 1);\n        resLen = newLength;\n      }\n      let chunk = next - prev;\n      memory.copy(\n        out + (offset << 1),\n        changetype<usize>(this) + (prev << 1),\n        chunk << 1\n      );\n      offset += chunk;\n      memory.copy(\n        out + (offset << 1),\n        changetype<usize>(replacement),\n        rlen << 1\n      );\n      offset += rlen;\n      prev = next + slen;\n    }\n    if (offset) {\n      if (offset > resLen) {\n        let newLength = resLen << 1;\n        out = __realloc(out, newLength << 1);\n        resLen = newLength;\n      }\n      let rest = len - prev;\n      if (rest) {\n        memory.copy(\n          out + (offset << 1),\n          changetype<usize>(this) + (prev << 1),\n          rest << 1\n        );\n      }\n      rest += offset;\n      if (resLen > rest) out = __realloc(out, rest << 1);\n      return changetype<String>(out);\n    }\n    return this;\n  }\n\n  slice(start: i32, end: i32 = i32.MAX_VALUE): String {\n    var len = this.length;\n    start = start < 0 ? max(start + len, 0) : min(start, len);\n    end   = end   < 0 ? max(end   + len, 0) : min(end,   len);\n    len   = end - start;\n    if (len <= 0) return changetype<String>(\"\");\n    var out = __alloc(len << 1, idof<String>());\n    memory.copy(out, changetype<usize>(this) + (<usize>start << 1), <usize>len << 1);\n    return changetype<String>(out); // retains\n  }\n\n  split(separator: String | null = null, limit: i32 = i32.MAX_VALUE): String[] {\n    if (!limit) return changetype<Array<String>>(__allocArray(0, alignof<String>(), idof<Array<String>>())); // retains\n    if (separator === null) return [this];\n    var length: isize = this.length;\n    var sepLen: isize = separator.length;\n    if (limit < 0) limit = i32.MAX_VALUE;\n    if (!sepLen) {\n      if (!length) return changetype<Array<String>>(__allocArray(0, alignof<String>(), idof<Array<String>>()));  // retains\n      // split by chars\n      length = min<isize>(length, <isize>limit);\n      let result = changetype<Array<String>>(__allocArray(length, alignof<String>(), idof<Array<String>>())); // retains\n      // @ts-ignore: cast\n      let resultStart = result.dataStart as usize;\n      for (let i: isize = 0; i < length; ++i) {\n        let charStr = __alloc(2, idof<String>());\n        store<u16>(charStr, load<u16>(changetype<usize>(this) + (<usize>i << 1)));\n        store<usize>(resultStart + (<usize>i << alignof<usize>()), charStr); // result[i] = charStr\n        if (isManaged<String>()) __retain(charStr);\n      }\n      return result;\n    } else if (!length) {\n      let result = changetype<Array<String>>(__allocArray(1, alignof<String>(), idof<Array<String>>())); // retains\n      // @ts-ignore: cast\n      store<usize>(result.dataStart as usize, changetype<usize>(\"\")); // static \"\"\n      return result;\n    }\n    var result = changetype<Array<String>>(__allocArray(0, alignof<String>(), idof<Array<String>>())); // retains\n    var end = 0, start = 0, i = 0;\n    while (~(end = this.indexOf(separator, start))) {\n      let len = end - start;\n      if (len > 0) {\n        let out = __alloc(<usize>len << 1, idof<String>());\n        memory.copy(out, changetype<usize>(this) + (<usize>start << 1), <usize>len << 1);\n        result.push(changetype<String>(out));\n      } else {\n        result.push(changetype<String>(\"\"));\n      }\n      if (++i == limit) return result;\n      start = end + sepLen;\n    }\n    if (!start) { // also means: loop above didn't do anything\n      result.push(this);\n      return result;\n    }\n    var len = length - start;\n    if (len > 0) {\n      let out = __alloc(<usize>len << 1, idof<String>());\n      memory.copy(out, changetype<usize>(this) + (<usize>start << 1), <usize>len << 1);\n      result.push(changetype<String>(out)); // retains\n    } else {\n      result.push(changetype<String>(\"\")); // static \"\"\n    }\n    return result;\n  }\n\n  toLowerCase(): String {\n    var len = <usize>this.length;\n    if (!len) return this;\n    var codes = __alloc(len * 2 * 2, idof<String>());\n    var j: usize = 0;\n    for (let i: usize = 0; i < len; ++i, ++j) {\n      let c = <u32>load<u16>(changetype<usize>(this) + (i << 1));\n      if (isAscii(c)) {\n        store<u16>(codes + (j << 1), toLower8(c));\n      } else {\n        // check and read surrogate pair\n        if ((c - 0xD7FF < 0xDC00 - 0xD7FF) && i < len - 1) {\n          let c1 = <u32>load<u16>(changetype<usize>(this) + (i << 1), 2);\n          if (c1 - 0xDBFF < 0xE000 - 0xDBFF) {\n            let c0 = c;\n            c = (((c & 0x03FF) << 10) | (c1 & 0x03FF)) + 0x10000;\n            ++i;\n            if (c >= 0x20000) {\n              store<u32>(codes + (j << 1), c0 | (c1 << 16));\n              ++j;\n              continue;\n            }\n          }\n        }\n        // check special casing for lower table. It has one ently so instead lookup we just inline this.\n        if (c == 0x0130) {\n          // 0x0130 -> [0x0069, 0x0307]\n          store<u32>(codes + (j << 1), (0x0307 << 16) | 0x0069);\n          ++j;\n        } else if (c - 0x24B6 <= 0x24CF - 0x24B6) {\n          // Range 0x24B6 <= c <= 0x24CF not covered by casemap and require special early handling\n          store<u16>(codes + (j << 1), c + 26);\n        } else {\n          let code = casemap(c, 0) & 0x1FFFFF;\n          if (code < 0x10000) {\n            store<u16>(codes + (j << 1), code);\n          } else {\n            // store as surrogare pair\n            code -= 0x10000;\n            let lo = (code >>> 10) | 0xD800;\n            let hi = (code & 0x03FF) | 0xDC00;\n            store<u32>(codes + (j << 1), lo | (hi << 16));\n            ++j;\n          }\n        }\n      }\n    }\n    codes = __realloc(codes, j << 1);\n    return changetype<String>(codes); // retains\n  }\n\n  toUpperCase(): String {\n    var len = <usize>this.length;\n    if (!len) return this;\n    var codes = __alloc(len * 3 * 2, idof<String>());\n    // @ts-ignore: cast\n    var specialsUpperPtr = specialsUpper.dataStart as usize;\n    var specialsUpperLen = specialsUpper.length;\n    var j: usize = 0;\n    for (let i: usize = 0; i < len; ++i, ++j) {\n      let c = <u32>load<u16>(changetype<usize>(this) + (i << 1));\n      if (isAscii(c)) {\n        store<u16>(codes + (j << 1), toUpper8(c));\n      } else {\n        // check and read surrogate pair\n        if ((c - 0xD7FF < 0xDC00 - 0xD7FF) && i < len - 1) {\n          let c1 = <u32>load<u16>(changetype<usize>(this) + (i << 1), 2);\n          if (c1 - 0xDBFF < 0xE000 - 0xDBFF) {\n            let c0 = c;\n            c = (((c & 0x03FF) << 10) | (c1 & 0x03FF)) + 0x10000;\n            ++i;\n            if (c >= 0x20000) {\n              store<u32>(codes + (j << 1), c0 | (c1 << 16));\n              ++j;\n              continue;\n            }\n          }\n        }\n        // Range 0x24D0 <= c <= 0x24E9 not covered by casemap and require special early handling\n        if (c - 0x24D0 <= 0x24E9 - 0x24D0) {\n          // monkey patch\n          store<u16>(codes + (j << 1), c - 26);\n        } else {\n          let index = -1;\n          // Fast range check. See first and last rows in specialsUpper table\n          if (c - 0x00DF <= 0xFB17 - 0x00DF) {\n            index = <usize>bsearch(c, specialsUpperPtr, specialsUpperLen);\n          }\n          if (~index) {\n            // load next 3 code points from row with `index` offset for specialsUpper table\n            let ab = load<u32>(specialsUpperPtr + (index << 1), 2);\n            let cc = load<u16>(specialsUpperPtr + (index << 1), 6);\n            store<u32>(codes + (j << 1), ab, 0);\n            store<u16>(codes + (j << 1), cc, 4);\n            j += 1 + usize(cc != 0);\n          } else {\n            let code = casemap(c, 1) & 0x1FFFFF;\n            if (code < 0x10000) {\n              store<u16>(codes + (j << 1), code);\n            } else {\n              // store as surrogare pair\n              code -= 0x10000;\n              let lo = (code >>> 10) | 0xD800;\n              let hi = (code & 0x03FF) | 0xDC00;\n              store<u32>(codes + (j << 1), lo | (hi << 16));\n              ++j;\n            }\n          }\n        }\n      }\n    }\n    codes = __realloc(codes, j << 1);\n    return changetype<String>(codes); // retains\n  }\n\n  toString(): String {\n    return this;\n  }\n}\n\n// @ts-ignore: nolib\nexport type string = String;\n\nexport function parseInt(str: string, radix: i32 = 0): f64 {\n  return strtol<f64>(str, radix);\n}\n\nexport function parseFloat(str: string): f64 {\n  return strtod(str);\n}\n\n// Encoding helpers\nexport namespace String {\n\n  export namespace UTF8 {\n\n    export function byteLength(str: string, nullTerminated: bool = false): i32 {\n      var strOff = changetype<usize>(str);\n      var strEnd = strOff + <usize>changetype<BLOCK>(changetype<usize>(str) - BLOCK_OVERHEAD).rtSize;\n      var bufLen = i32(nullTerminated);\n      while (strOff < strEnd) {\n        let c1 = <u32>load<u16>(strOff);\n        if (c1 < 128) {\n          // @ts-ignore: cast\n          if (nullTerminated & !c1) break;\n          bufLen += 1;\n        } else if (c1 < 2048) {\n          bufLen += 2;\n        } else {\n          if ((c1 & 0xFC00) == 0xD800 && strOff + 2 < strEnd) {\n            if ((<u32>load<u16>(strOff, 2) & 0xFC00) == 0xDC00) {\n              bufLen += 4; strOff += 4;\n              continue;\n            }\n          }\n          bufLen += 3;\n        }\n        strOff += 2;\n      }\n      return bufLen;\n    }\n\n    export function encode(str: string, nullTerminated: bool = false): ArrayBuffer {\n      var strOff = changetype<usize>(str);\n      var strEnd = changetype<usize>(str) + <usize>changetype<BLOCK>(changetype<usize>(str) - BLOCK_OVERHEAD).rtSize;\n      var bufLen = <usize>UTF8.byteLength(str, nullTerminated);\n      var buf = __alloc(bufLen, idof<ArrayBuffer>());\n      var bufEnd = buf + bufLen - usize(nullTerminated);\n      var bufOff = buf;\n      while (bufOff < bufEnd) {\n        let c1 = <u32>load<u16>(strOff);\n        if (c1 < 128) {\n          store<u8>(bufOff, c1);\n          bufOff++;\n        } else if (c1 < 2048) {\n          let b0 = c1 >> 6 | 192;\n          let b1 = c1 & 63 | 128;\n          store<u16>(bufOff, b1 << 8 | b0);\n          bufOff += 2;\n        } else {\n          if ((c1 & 0xFC00) == 0xD800 && strOff + 2 < strEnd) {\n            let c2 = <u32>load<u16>(strOff, 2);\n            if ((c2 & 0xFC00) == 0xDC00) {\n              c1 = 0x10000 + ((c1 & 0x03FF) << 10) | (c2 & 0x03FF);\n              let b0 = c1 >> 18 | 240;\n              let b1 = c1 >> 12 & 63 | 128;\n              let b2 = c1 >> 6  & 63 | 128;\n              let b3 = c1       & 63 | 128;\n              store<u32>(bufOff, b3 << 24 | b2 << 16 | b1 << 8 | b0);\n              bufOff += 4; strOff += 4;\n              continue;\n            }\n          }\n          let b0 = c1 >> 12 | 224;\n          let b1 = c1 >> 6  & 63 | 128;\n          let b2 = c1       & 63 | 128;\n          store<u16>(bufOff, b1 << 8 | b0);\n          store<u8>(bufOff, b2, 2);\n          bufOff += 3;\n        }\n        strOff += 2;\n      }\n      assert(strOff <= strEnd);\n      if (nullTerminated) {\n        store<u8>(bufOff, 0);\n      }\n      return changetype<ArrayBuffer>(buf); // retains\n    }\n\n    export function decode(buf: ArrayBuffer, nullTerminated: bool = false): String {\n      return decodeUnsafe(changetype<usize>(buf), buf.byteLength, nullTerminated);\n    }\n\n    // @ts-ignore: decorator\n    @unsafe\n    export function decodeUnsafe(buf: usize, len: usize, nullTerminated: bool = false): String {\n      var bufOff = buf;\n      var bufEnd = buf + len;\n      assert(bufEnd >= bufOff); // guard wraparound\n      var str = __alloc(len << 1, idof<String>()); // max is one u16 char per u8 byte\n      var strOff = str;\n      while (bufOff < bufEnd) {\n        let u0 = <u32>load<u8>(bufOff); ++bufOff;\n        if (!(u0 & 128)) {\n          // @ts-ignore: cast\n          if (nullTerminated & !u0) break;\n          store<u16>(strOff, u0);\n        } else {\n          if (bufEnd == bufOff) break;\n          let u1 = <u32>load<u8>(bufOff) & 63; ++bufOff;\n          if ((u0 & 224) == 192) {\n            store<u16>(strOff, (u0 & 31) << 6 | u1);\n          } else {\n            if (bufEnd == bufOff) break;\n            let u2 = <u32>load<u8>(bufOff) & 63; ++bufOff;\n            if ((u0 & 240) == 224) {\n              u0 = (u0 & 15) << 12 | u1 << 6 | u2;\n            } else {\n              if (bufEnd == bufOff) break;\n              u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | <u32>load<u8>(bufOff) & 63;\n              ++bufOff;\n            }\n            if (u0 < 0x10000) {\n              store<u16>(strOff, u0);\n            } else {\n              u0 -= 0x10000;\n              let lo = u0 >> 10 | 0xD800;\n              let hi = (u0 & 0x03FF) | 0xDC00;\n              store<u32>(strOff, lo | (hi << 16));\n              strOff += 2;\n            }\n          }\n        }\n        strOff += 2;\n      }\n      return changetype<String>(__realloc(str, strOff - str)); // retains\n    }\n  }\n\n  export namespace UTF16 {\n\n    export function byteLength(str: string): i32 {\n      return changetype<BLOCK>(changetype<usize>(str) - BLOCK_OVERHEAD).rtSize;\n    }\n\n    export function encode(str: string): ArrayBuffer {\n      var size = UTF16.byteLength(str);\n      var buf = __alloc(size, idof<ArrayBuffer>());\n      memory.copy(buf, changetype<usize>(str), <usize>size);\n      return changetype<ArrayBuffer>(buf); // retains\n    }\n\n    export function decode(buf: ArrayBuffer): String {\n      return decodeUnsafe(changetype<usize>(buf), buf.byteLength);\n    }\n\n    // @ts-ignore: decorator\n    @unsafe\n    export function decodeUnsafe(buf: usize, len: usize): String {\n      var str = __alloc(len &= ~1, idof<String>());\n      memory.copy(str, buf, len);\n      return changetype<String>(str); // retains\n    }\n  }\n}\n","// @ts-ignore\r\n@external(\"__canvas_sys\", \"loadImage\")\r\ndeclare function loadImage(img: Image, src: string): i32;\r\n\r\n// @ts-ignore\r\n@external(\"__canvas_sys\", \"disposeImage\")\r\ndeclare function disposeImage(id: i32): void;\r\n\r\nexport class Image {\r\n  private _id: i32 = -1;\r\n  private _width: i32 = 0;\r\n  private _height: i32 = 0;\r\n  private _loaded: bool = false;\r\n  private _src: string = \"\";\r\n\r\n  @inline\r\n  public get width(): number {\r\n    return this._width;\r\n  }\r\n\r\n  @inline\r\n  public get height(): number {\r\n    return this._height;\r\n  }\r\n\r\n  @inline\r\n  public get loaded(): bool {\r\n    return this._loaded;\r\n  }\r\n\r\n  @inline\r\n  public get src(): string {\r\n    return this._src;\r\n  }\r\n\r\n  public set src(value: string) {\r\n    this._src = value;\r\n    this._id = loadImage(this, value);\r\n  }\r\n\r\n  public dispose(): void {\r\n    disposeImage(this._id);\r\n  }\r\n}\r\n\r\nexport function __image_loaded(img: Image, width: i32, height: i32): void {\r\n  store<i32>(changetype<usize>(img) + offsetof<Image>(\"_width\"), width);\r\n  store<i32>(changetype<usize>(img) + offsetof<Image>(\"_height\"), height);\r\n  store<bool>(changetype<usize>(img) + offsetof<Image>(\"_loaded\"), true);\r\n}\r\n\r\n/**\r\n * Gets the image's external id.\r\n *\r\n * @param image - The target image.\r\n */\r\n// @ts-ignore: @inline is valid on regular functions\r\n@inline\r\nexport function getImageID(image: Image): i32 {\r\n  return load<i32>(changetype<usize>(image) + offsetof<Image>(\"_id\"));\r\n}\r\n","import {\r\n  Buffer,\r\n  CanvasRenderingContext2D,\r\n  getContextById,\r\n} from \"./index\";\r\n\r\nvar ctx: CanvasRenderingContext2D;\r\n\r\nclass Writer extends Buffer<f64> {\r\n  writeTest(): void {\r\n    this._writeTwo(0, 1, 2);\r\n  }\r\n\r\n  getBuffer(): usize {\r\n    return changetype<usize>(this._buffer);\r\n  }\r\n}\r\n\r\nvar buff: Writer = new Writer();\r\nexport function init(): void {\r\n  ctx = getContextById(\"main\");\r\n}\r\n\r\nexport function writeThreeTimes(): usize {\r\n  buff.writeTest();\r\n  return buff.getBuffer();\r\n}\r\n"]}